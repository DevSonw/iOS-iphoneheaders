/*
* This header is generated by classdump-dyld 0.7
* on Wednesday, June 24, 2015 at 10:50:22 PM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Foundation/Foundation-Structs.h>
#import <Foundation/NSCopying.h>
#import <Foundation/NSSecureCoding.h>

@class NSString, NSDictionary, NSURL, NSArray;

@interface NSError : NSObject <NSCopying, NSSecureCoding> {

	void* _reserved;
	int _code;
	NSString* _domain;
	NSDictionary* _userInfo;

}

@property (getter=_mapkit_isCLDenied,nonatomic,readonly) char _mapkit_CLDenied; 
@property (getter=_mapkit_isCLLocationUnknown,nonatomic,readonly) char _mapkit_CLLocationUnknown; 
@property (getter=_mapkit_isCLHeadingFailure,nonatomic,readonly) char _mapkit_CLHeadingFailure; 
@property (getter=_mapkit_isCLErrorNetwork,nonatomic,readonly) char _mapkit_CLErrorNetwork; 
@property (nonatomic,retain,readonly) NSURL * _mapkit_locationErrorSettingsURL; 
@property (copy,readonly) NSString * domain; 
@property (readonly) int code; 
@property (copy,readonly) NSDictionary * userInfo; 
@property (copy,readonly) NSString * localizedDescription; 
@property (copy,readonly) NSString * localizedFailureReason; 
@property (copy,readonly) NSString * localizedRecoverySuggestion; 
@property (copy,readonly) NSArray * localizedRecoveryOptions; 
@property (retain,readonly) id recoveryAttempter; 
@property (copy,readonly) NSString * helpAnchor; 
+(id)cecFeatureAbortErrorWithOpCode:(unsigned char)arg1 reason:(unsigned char)arg2 method:(id)arg3 ;
+(id)cecAcknowledgementErrorWithUnderlyingError:(id)arg1 ;
+(id)cecIOErrorWithUnderlyingError:(id)arg1 ;
+(id)_webUI_WebUIErrorWithCode:(unsigned)arg1 URL:(id)arg2 ;
+(id)hk_error:(int)arg1 description:(id)arg2 underlyingError:(id)arg3 ;
+(id)hk_error:(int)arg1 description:(id)arg2 ;
+(id)hk_error:(int)arg1 format:(id)arg2 ;
+(id)_maps_cancellationError;
+(id)_maps_cancellationError;
+(id)errorWithDomain:(id)arg1 code:(int)arg2 localizedDescription:(id)arg3 ;
+(id)errorWithStreamDomain:(long)arg1 code:(long)arg2 localizedDescription:(id)arg3 ;
+(id)ph_errorWithDomain:(id)arg1 code:(int)arg2 userInfo:(id)arg3 ;
+(id)brc_errorMethodNotImplemented:(const char*)arg1 ;
+(id)brc_errorPermissionErrorAtURL:(id)arg1 ;
+(id)errorWithPOSIXCode:(int)arg1 ;
+(id)errorFromErrno;
+(id)errorWithPOSIXCode:(int)arg1 description:(id)arg2 ;
+(id)errorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 ;
+(id)brc_errorInvalidParameter:(id)arg1 value:(id)arg2 ;
+(id)brc_errorItemNotFound:(id)arg1 ;
+(id)brc_errorContainerNotFound:(id)arg1 ;
+(id)brc_errorDocumentIsNotSharedAtURL:(id)arg1 ;
+(id)brc_errorDocumentWithFilename:(id)arg1 size:(long long)arg2 isTooLargeToUpload:(long long)arg3 ;
+(id)brc_errorAccountMismatch;
+(id)brc_errorDaemonShouldBeLoggedOut;
+(id)brc_errorPathOutsideAnyCloudDocsContainerAtURL:(id)arg1 ;
+(id)brc_errorNoContainerForBundle:(id)arg1 ;
+(id)brc_errorNoDocumentAtURL:(id)arg1 underlyingPOSIXError:(int)arg2 ;
+(id)brc_errorDocumentAtURL:(id)arg1 isNotExternalToContainer:(id)arg2 ;
+(id)brc_errorNotInCloud:(id)arg1 ;
+(id)brc_addPartialError:(id)arg1 forURL:(id)arg2 toError:(id)arg3 ;
+(id)userErrorForCode:(int)arg1 userInfo:(id)arg2 ;
+(id)serverErrorForCode:(int)arg1 withReason:(id)arg2 ;
+(id)userErrorForServerError:(id)arg1 ;
+(id)serverErrorForCode:(int)arg1 withUserInfo:(id)arg2 ;
+(id)userErrorForServerCode:(int)arg1 reason:(id)arg2 ;
+(id)_gkUnauthenticatedError;
+(id)userErrorForCode:(int)arg1 underlyingError:(id)arg2 ;
+(id)AVConferenceServiceError:(int)arg1 detailedCode:(int)arg2 returnCode:(int)arg3 filePath:(id)arg4 description:(id)arg5 reason:(id)arg6 ;
+(id)AVConferenceServiceError:(int)arg1 detailedCode:(int)arg2 filePath:(id)arg3 description:(id)arg4 reason:(id)arg5 ;
+(id)AVConferenceServiceError:(int)arg1 detailCode:(int)arg2 description:(id)arg3 ;
+(id)APIParameterErrorFromErrorCode:(int)arg1 ;
+(id)APILimitErrorFromErrorCode:(int)arg1 ;
+(id)APIAuthorizationErrorFromErrorCode:(int)arg1 ;
+(id)APIInternalServerErrorFromErrorCode:(int)arg1 ;
+(id)APIUserErrorFromErrorCode:(int)arg1 ;
+(id)APIFakeUserErrorFromErrorCode:(int)arg1 ;
+(id)APIGenericErrorFromErrorCode:(int)arg1 ;
+(id)errorFromTencentWeiboAPIResponseErrorWithType:(int)arg1 code:(int)arg2 ;
+(id)MMCSErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 ;
+(id)MSErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 ;
+(id)MSErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 underlyingError:(id)arg4 ;
+(id)MSErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 suggestion:(id)arg4 ;
+(id)MSErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 underlyingError:(id)arg4 additionalUserInfo:(id)arg5 ;
+(id)errorWithSqliteCode:(int)arg1 andMessage:(id)arg2 ;
+(id)errorForDB:(sqlite3Ref)arg1 ;
+(id)errorForDB:(sqlite3Ref)arg1 SQL:(id)arg2 ;
+(id)errorForDB:(sqlite3Ref)arg1 stmt:(sqlite3_stmtRef)arg2 ;
+(id)errorWithPOSIXCode:(int)arg1 ;
+(id)errorFromErrno;
+(id)mf_timeoutError;
+(id)hs_homeSharingErrorWithCode:(int)arg1 userInfo:(id)arg2 ;
+(id)hs_cloudErrorWithCode:(int)arg1 userInfo:(id)arg2 ;
+(id)tl_errorWithDomain:(id)arg1 description:(id)arg2 ;
+(id)ml_errorWithCode:(unsigned)arg1 description:(id)arg2 ;
+(id)ml_errorWithCode:(unsigned)arg1 ;
+(id)errorWithCADResult:(int)arg1 ;
+(id)errorWithCode:(int)arg1 ;
+(id)errorWithCode:(int)arg1 description:(id)arg2 reason:(id)arg3 ;
+(id)errorWithCADResult:(int)arg1 action:(id)arg2 ;
+(id)_defaultDescriptionForCode:(int)arg1 ;
+(id)errorWithCode:(int)arg1 description:(id)arg2 ;
+(id)zilchDecoderErrorForNoSolution;
+(id)_geo_errorFromXPCData:(id)arg1 ;
+(id)errorWithBTResult:(id)arg1 ;
+(id)genericErrorWithFile:(const char*)arg1 function:(const char*)arg2 lineNumber:(int)arg3 ;
+(id)_ax_errorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 arguments:(void*)arg4 ;
+(id)ax_errorWithDomain:(id)arg1 description:(id)arg2 ;
+(id)ax_errorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 ;
+(id)_webKitErrorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
+(void)_registerWebKitErrors;
+(id)_webkit_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
+(id)_webKitErrorWithCode:(int)arg1 failingURL:(id)arg2 ;
+(void)_webkit_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2 ;
+(id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 errorType:(id)arg4 ;
+(id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 suggestion:(id)arg4 USEnglishSuggestion:(id)arg5 underlyingError:(id)arg6 errorType:(id)arg7 ;
+(id)MCErrorWithDomain:(id)arg1 code:(int)arg2 description:(id)arg3 errorType:(id)arg4 ;
+(id)MCErrorWithDomain:(id)arg1 code:(int)arg2 descriptionArray:(id)arg3 underlyingError:(id)arg4 errorType:(id)arg5 ;
+(id)bs_timeoutError;
+(void)_registerFormatter:(/*function pointer*/void*)arg1 forErrorKey:(id)arg2 parameters:(const char*)arg3 ;
+(void)_registerBuiltInFormatters;
+(void)_web_addErrorsWithCodesAndDescriptions:(id)arg1 inDomain:(id)arg2 ;
+(id)_web_errorWithDomain:(id)arg1 code:(int)arg2 failingURL:(id)arg3 ;
+(id)_web_errorWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
+(id)errorWithDomain:(id)arg1 code:(int)arg2 userInfo:(id)arg3 ;
+(char)supportsSecureCoding;
-(char)isCECAcknowledgementError;
-(void)_safari_enumerateCloudKitErrorsWithBlock:(/*^block*/id)arg1 ;
-(char)safari_errorOrAnyPartialErrorHasCloudKitErrorCode:(int)arg1 ;
-(char)safari_errorOrAnyPartialErrorHasCloudKitInternalErrorCode:(int)arg1 ;
-(id)initWithATPError:(id)arg1 ;
-(id)ATPError;
-(char)hk_isDeviceNotFoundError;
-(char)hk_isAuthorizationDeniedError;
-(char)hk_isAuthorizationNotDeterminedError;
-(char)hk_isInvalidArgumentError;
-(char)hk_isInternalFailureError;
-(void)hk_logWithDatabaseAccessibilityAtLogLevel:(int)arg1 format:(id)arg2 ;
-(char)hk_isDatabaseAccessibilityError;
-(char)hk_isHealthKitError;
-(void)hk_logWithoutDatabaseAccessibiityErrors:(id)arg1 ;
-(char)_maps_isCancellation;
-(char)_maps_isErrorOfDomain:(id)arg1 code:(int)arg2 ;
-(char)_maps_isCancellation;
-(char)_maps_isErrorOfDomain:(id)arg1 code:(int)arg2 ;
-(char)isSiriUISnippetPluginError;
-(char)isExpiredPasswordError;
-(char)isConnectivityError;
-(char)isPasswordMismatchError;
-(char)isInvalidSubscriberError;
-(char)isServerError;
-(char)isSecurityError;
-(char)isEqualToError:(id)arg1 ;
-(char)isStreamDomain:(long)arg1 error:(long)arg2 ;
-(char)isNewPasswordError;
-(char)shouldPresentErrorForTaskType:(int)arg1 ;
-(char)isPOSIXErrorCode:(int)arg1 ;
-(char)br_isCloudDocsErrorCode:(int)arg1 ;
-(char)isCocoaErrorCode:(int)arg1 ;
-(char)isSubCalReachabilityError;
-(char)isSubCalAuthError;
-(char)_gkIsUnauthenticatedError;
-(id)encodeableError;
-(id)encodeableError;
-(id)encodeableError;
-(id)encodeableError;
-(char)isCPLOperationCancelledError;
-(id)cplUnderlyingPOSIXError;
-(id)cplSafeErrorForXPC;
-(id)_cplSafeUserInfoForXPCDidChange:(char*)arg1 ;
-(id)cplShortDomainDescription;
-(char)isCPLErrorWithCode:(int)arg1 ;
-(char)isCPLError;
-(char)MMCSIsAuthorizationError;
-(char)MMCSIsNetworkConditionsError;
-(char)MMCSIsFatalError;
-(void)_MMCSApplyBlock:(/*^block*/id)arg1 ;
-(int)MMCSErrorType;
-(char)MMCSIsCancelError;
-(id)MMCSRetryAfterDate;
-(char)MSIsTemporaryNetworkError;
-(char)MSIsQuotaError;
-(char)MSNeedsBackoff;
-(char)MSIsCounted;
-(char)MSCanBeIgnored;
-(char)MSIsFatal;
-(char)MSIsBadTokenError;
-(char)MSIsAuthError;
-(id)MSMMCSRetryAfterDate;
-(char)MSIsRegistrationError;
-(id)MSFindPrimaryError;
-(id)_MSVerboseDescriptionRecursionCount:(int)arg1 ;
-(void)_MSApplyBlock:(/*^block*/id)arg1 ;
-(char)MSContainsErrorWithDomain:(id)arg1 code:(int)arg2 ;
-(id)MSMakePrimaryError;
-(char)MSASStateMachineIsCanceledError;
-(id)MSVerboseDescription;
-(int)extendedSqliteCode;
-(id)sqliteStatement;
-(char)isSqliteErrorCode:(int)arg1 ;
-(id)_mapkit_directionsErrorWithDetail:(SCD_Struct_NS22*)arg1 ;
-(char)_mapkit_isDirectionsError;
-(int)_mapkit_directionsErrorCode;
-(int)_mapkit_underlyingGEOError;
-(id)_mapkit_error;
-(char)_mapkit_isCLDenied;
-(char)_mapkit_isCLLocationUnknown;
-(char)_mapkit_isCLHeadingFailure;
-(char)_mapkit_isCLErrorNetwork;
-(NSURL *)_mapkit_locationErrorSettingsURL;
-(id)mf_shortDescription;
-(char)mf_isUserCancelledError;
-(id)mf_moreInfo;
-(char)mf_shouldBeReportedToUser;
-(char)mf_isInaccessibleAccountCredentialError;
-(char)mf_isMissingAccountCredentialError;
-(id)DAExtendedDescription;
-(id)userReadableError;
-(id)CKClientSuitableError;
-(char)CKIsNotFoundError;
-(char)isPOSIXErrorCode:(int)arg1 ;
-(char)mf_isCancelledError;
-(char)mf_isTimeoutError;
-(id)tl_nonRedundantDescription;
-(id)errorBySettingFatalError:(char)arg1 ;
-(char)isFatalError;
-(char)isEqual:(id)arg1 compareUserInfo:(char)arg2 ;
-(id)zilchDecoderTileLoadingError;
-(id)_geo_newXPCData;
-(id)ax_nonRedundantDescription;
-(id)_initWithPluginErrorCode:(int)arg1 contentURL:(id)arg2 pluginPageURL:(id)arg3 pluginName:(id)arg4 MIMEType:(id)arg5 ;
-(id)_webkit_initWithDomain:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
-(id)initWithXPCEncoding:(id)arg1 ;
-(id)copyXPCEncoding;
-(id)MCVerboseDescription;
-(id)MCFindPrimaryError;
-(id)MCUSEnglishDescription;
-(id)MCUSEnglishSuggestion;
-(id)MCCopyAsPrimaryError;
-(char)MCContainsErrorDomain:(id)arg1 code:(int)arg2 ;
-(id)MCErrorType;
-(id)ac_secureCodingError;
-(char)bs_isCancelledError;
-(char)bs_isTimeoutError;
-(unsigned long)_cfTypeID;
-(id)replacementObjectForPortCoder:(id)arg1 ;
-(id)_cocoaErrorString:(id)arg1 ;
-(id)_cocoaErrorStringWithKind:(id)arg1 variant:(id)arg2 ;
-(id)_cocoaErrorStringWithKind:(id)arg1 ;
-(CFStringRef)_retainedUserInfoCallBackForKey:(id)arg1 ;
-(NSString *)helpAnchor;
-(int)_collectApplicableUserInfoFormatters:(/*function pointer*/void**)arg1 max:(int)arg2 ;
-(id)_formatCocoaErrorString:(id)arg1 parameters:(const char*)arg2 applicableFormatters:(/*function pointer*/void**)arg3 count:(int)arg4 ;
-(id)_cocoaErrorString:(id)arg1 fromBundle:(id)arg2 tableName:(id)arg3 ;
-(id)_web_initWithDomain:(id)arg1 code:(int)arg2 failingURL:(id)arg3 ;
-(id)_web_initWithDomain_nowarn:(id)arg1 code:(int)arg2 URL:(id)arg3 ;
-(id)_web_failingURL;
-(char)_web_errorIsInDomain:(id)arg1 ;
-(id)_web_localizedDescription;
-(void)dealloc;
-(id)initWithCoder:(id)arg1 ;
-(void)encodeWithCoder:(id)arg1 ;
-(char)isEqual:(id)arg1 ;
-(unsigned)hash;
-(id)description;
-(NSString *)domain;
-(int)code;
-(id)copyWithZone:(NSZone*)arg1 ;
-(NSDictionary *)userInfo;
-(id)initWithDomain:(id)arg1 code:(int)arg2 userInfo:(id)arg3 ;
-(NSString *)localizedDescription;
-(NSString *)localizedRecoverySuggestion;
-(NSArray *)localizedRecoveryOptions;
-(id)recoveryAttempter;
-(NSString *)localizedFailureReason;
-(void)finalize;
@end

