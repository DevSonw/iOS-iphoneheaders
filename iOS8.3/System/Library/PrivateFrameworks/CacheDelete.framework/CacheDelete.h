/*
* This header is generated by classdump-dyld 0.7
* on Thursday, June 25, 2015 at 12:49:50 AM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/PrivateFrameworks/CacheDelete.framework/deleted
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <deleted/CacheDeleteClientProtocol.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class CDService, CacheDeleteListener, NSMutableDictionary, NSMutableSet, NSDictionary, NSObject;

@interface CacheDelete : NSObject <CacheDeleteClientProtocol> {

	char _cancel;
	CDService* _currentPurging;
	CacheDeleteListener* _listener;
	NSMutableDictionary* _services;
	NSMutableSet* _daemons;
	NSDictionary* _default_values;
	NSObject*<OS_dispatch_queue> _operation_queue;
	NSObject*<OS_dispatch_queue> _daemons_queue;
	NSObject*<OS_dispatch_queue> _cancel_queue;
	NSObject*<OS_dispatch_queue> _purge_post_queue;
	NSObject*<OS_dispatch_semaphore> _purge_semaphore;
	long long _purge_amount_needed;
	long long _purge_amount_purged;
	long long _purge_active_service_count;

}

@property (nonatomic,retain) CDService * currentPurging;                          //@synthesize currentPurging=_currentPurging - In the implementation block
@property (nonatomic,retain) CacheDeleteListener * listener;                      //@synthesize listener=_listener - In the implementation block
@property (nonatomic,retain) NSMutableDictionary * services;                      //@synthesize services=_services - In the implementation block
@property (nonatomic,retain) NSMutableSet * daemons;                              //@synthesize daemons=_daemons - In the implementation block
@property (nonatomic,retain) NSDictionary * default_values;                       //@synthesize default_values=_default_values - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> operation_queue;                  //@synthesize operation_queue=_operation_queue - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> daemons_queue;                    //@synthesize daemons_queue=_daemons_queue - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> cancel_queue;                     //@synthesize cancel_queue=_cancel_queue - In the implementation block
@property (assign) char cancel;                                                   //@synthesize cancel=_cancel - In the implementation block
@property (assign) long long purge_amount_needed;                                 //@synthesize purge_amount_needed=_purge_amount_needed - In the implementation block
@property (assign) long long purge_amount_purged;                                 //@synthesize purge_amount_purged=_purge_amount_purged - In the implementation block
@property (assign) long long purge_active_service_count;                          //@synthesize purge_active_service_count=_purge_active_service_count - In the implementation block
@property (retain) NSObject*<OS_dispatch_queue> purge_post_queue;                 //@synthesize purge_post_queue=_purge_post_queue - In the implementation block
@property (retain) NSObject*<OS_dispatch_semaphore> purge_semaphore;              //@synthesize purge_semaphore=_purge_semaphore - In the implementation block
-(NSObject*<OS_dispatch_queue>)operation_queue;
-(NSObject*<OS_dispatch_queue>)cancel_queue;
-(void)setCurrentPurging:(CDService *)arg1 ;
-(id)_checkInfo:(id)arg1 ;
-(int)urgencyFromInfo:(id)arg1 key:(id)arg2 ;
-(id)_totalAvailable:(int)arg1 info:(id)arg2 optOuts:(id)arg3 ;
-(NSObject*<OS_dispatch_queue>)purge_post_queue;
-(long long)purge_amount_needed;
-(long long)purge_amount_purged;
-(long long)purge_active_service_count;
-(void)setPurge_amount_purged:(long long)arg1 ;
-(void)queueServiceRequest:(id)arg1 info:(id)arg2 urgency:(int)arg3 ;
-(void)reportPercentageForAmountRequested:(long long)arg1 amountPurged:(long long)arg2 identifier:(id)arg3 ;
-(void)setPurge_active_service_count:(long long)arg1 ;
-(NSObject*<OS_dispatch_semaphore>)purge_semaphore;
-(void)setPurge_amount_needed:(long long)arg1 ;
-(void)setPurge_semaphore:(NSObject*<OS_dispatch_semaphore>)arg1 ;
-(CDService *)currentPurging;
-(NSObject*<OS_dispatch_queue>)daemons_queue;
-(NSMutableSet *)daemons;
-(char)pingService:(id)arg1 ;
-(id)totalAvailable:(id)arg1 ;
-(NSDictionary *)default_values;
-(void)notifyRecipients:(id)arg1 value:(id)arg2 ;
-(void)handleVFSStreamXPCEvent:(id)arg1 ;
-(void)performPeriodicsWithInfo:(id)arg1 ;
-(void)setDaemons:(NSMutableSet *)arg1 ;
-(void)setDefault_values:(NSDictionary *)arg1 ;
-(void)setOperation_queue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setDaemons_queue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setCancel_queue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(void)setPurge_post_queue:(NSObject*<OS_dispatch_queue>)arg1 ;
-(char)cancel;
-(id)init;
-(CacheDeleteListener *)listener;
-(void)setListener:(CacheDeleteListener *)arg1 ;
-(void)setCancel:(char)arg1 ;
-(void)clientCheckin:(id)arg1 endpoint:(id)arg2 info:(id)arg3 reply:(/*^block*/id)arg4 ;
-(void)clientPurgeableSpace:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)clientItemizedPurgeableSpace:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)clientPurge:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)clientCancelPurge:(/*^block*/id)arg1 ;
-(void)clientSetState:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)clientGetState:(id)arg1 replyBlock:(/*^block*/id)arg2 ;
-(void)setServices:(NSMutableDictionary *)arg1 ;
-(id)purge:(id)arg1 ;
-(void)scanPlistsAtPath:(id)arg1 execBlock:(/*^block*/id)arg2 ;
-(NSMutableDictionary *)services;
@end

