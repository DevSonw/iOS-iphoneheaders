/*
* This header is generated by classdump-dyld 0.7
* on Thursday, June 25, 2015 at 4:31:56 AM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/PrivateFrameworks/iLifeSlideshow.framework/iLifeSlideshow
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <iLifeSlideshow/iLifeSlideshow-Structs.h>
@class MRImageManager, NSString, MRTexture, NSDictionary, NSMutableDictionary, EAGLContext;

@interface MRImage : NSObject {

	MRImageManager* mImageManager;
	unsigned long mWidth;
	unsigned long mHeight;
	MRImage* mRefImage;
	NSString* mImageBufferKey;
	MRTexture* mTexture;
	unsigned long mPixelFormat;
	float mCenterX;
	float mCenterY;
	float mScale;
	float mRotationAngle;
	NSString* mFilterID;
	NSDictionary* mShader;
	int mClampMode;
	double mSourceTimeStamp;
	double mRenderTime;
	int mRetainByUserCount;
	float mColor[4];
	IOSurfaceRef mIOSurface;
	CVBufferRef mCVPixelBuffer;
	CGContextRef mCGContext;
	CGColorSpaceRef mColorspace;
	void** mDatas[3];
	unsigned long mDataSize;
	unsigned long mDataRowBytes;
	unsigned long mDataWidth;
	unsigned long mDataHeight;
	unsigned char mOrientation;
	NSString* mLabel;
	NSMutableDictionary* mUserData;
	CVBufferRef mCVTexture;
	unsigned long mFlags;

}

@property (readonly) MRImageManager * imageManager; 
@property (nonatomic,readonly) unsigned long width; 
@property (nonatomic,readonly) unsigned long height; 
@property (nonatomic,readonly) unsigned long pixelFormat; 
@property (nonatomic,readonly) char isMonochromatic; 
@property (nonatomic,readonly) char isYUV; 
@property (nonatomic,readonly) unsigned textureName; 
@property (nonatomic,readonly) unsigned textureTarget; 
@property (nonatomic,readonly) EAGLContext * updateGLContext; 
@property (assign,nonatomic) float centerX; 
@property (assign,nonatomic) float centerY; 
@property (assign,nonatomic) float scale; 
@property (assign,nonatomic) float rotationAngle; 
@property (nonatomic,copy) NSString * filterID; 
@property (retain) NSDictionary * shader; 
@property (assign,nonatomic) int clampMode; 
@property (nonatomic,readonly) char hasKBOrShader; 
@property (assign,nonatomic) double sourceTimeStamp; 
@property (assign,nonatomic) double renderTime; 
@property (assign,nonatomic) char usesBackgroundColorAsBorderColor; 
@property (nonatomic,readonly) char isPremultiplied; 
@property (assign,nonatomic) char filtersNearest; 
@property (assign,nonatomic) char preservesAspectRatio; 
@property (nonatomic,readonly) char isOpaque; 
@property (nonatomic,copy) NSString * label; 
@property (readonly) NSMutableDictionary * userData; 
@property (nonatomic,readonly) float aspectRatio; 
@property (nonatomic,readonly) char isEmpty; 
@property (assign,nonatomic) char hasKenBurns; 
@property (assign,nonatomic) char scaleWasFixedForTargetAspectRatio; 
@property (readonly) char usesMipmapping; 
@property (assign,nonatomic) char mipmapFiltersNearest; 
@property (readonly) NSString * imageBufferKey; 
@property (readonly) MRTexture * texture; 
@property (readonly) MRTexture * textureIfExists; 
@property (readonly) int retainByUserCount; 
-(float)centerX;
-(float)centerY;
-(unsigned)textureTarget;
-(char)isPremultiplied;
-(void)dealloc;
-(id)init;
-(id)initWithImage:(id)arg1 ;
-(float)scale;
-(char)isEmpty;
-(char)isOpaque;
-(void)setScale:(float)arg1 ;
-(unsigned long)width;
-(NSString *)label;
-(unsigned long)height;
-(void)setLabel:(NSString *)arg1 ;
-(NSMutableDictionary *)userData;
-(void)cleanup;
-(MRImageManager *)imageManager;
-(float)rotationAngle;
-(void)setRotationAngle:(float)arg1 ;
-(float)aspectRatio;
-(MRTexture *)texture;
-(void)finalize;
-(NSString *)filterID;
-(void)setFilterID:(NSString *)arg1 ;
-(void)setClampMode:(int)arg1 ;
-(void)releaseByUser;
-(id)retainByUser;
-(unsigned)textureName;
-(void)getMatrix:(float)arg1 forReferenceAspectRatio:(float)arg2 ;
-(int)clampMode;
-(char)filtersNearest;
-(char)usesMipmapping;
-(char)mipmapFiltersNearest;
-(NSDictionary *)shader;
-(void)setShader:(NSDictionary *)arg1 ;
-(void)setOnContext:(id)arg1 onTextureUnit:(unsigned)arg2 withReferenceAspectRatio:(float)arg3 state:(SCD_Struct_MR9*)arg4 ;
-(char)preservesAspectRatio;
-(void)unsetOnContext:(id)arg1 onTextureUnit:(unsigned)arg2 state:(const SCD_Struct_MR9*)arg3 ;
-(id)insertingInCollection;
-(char)hasKenBurns;
-(void)setUsesBackgroundColorAsBorderColor:(char)arg1 ;
-(void)setCenterX:(float)arg1 ;
-(void)setCenterY:(float)arg1 ;
-(id)retainedByUserImage;
-(CGSize)relativeSizeInContextPixelSize:(CGSize)arg1 ;
-(void)removingFromCollection;
-(id)initWithIOSurface:(IOSurfaceRef)arg1 size:(CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5 ;
-(id)initWithIOSurface:(IOSurfaceRef)arg1 size:(CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 ;
-(id)initWithCGContext:(CGContextRef)arg1 size:(CGSize)arg2 imageManager:(id)arg3 ;
-(NSString *)imageBufferKey;
-(void)kenburnsMatrix:(float)arg1 forReferenceAspectRatio:(float)arg2 ;
-(char)isYUV;
-(unsigned long)pixelFormat;
-(EAGLContext *)updateGLContext;
-(MRTexture *)textureIfExists;
-(char)isMonochromatic;
-(id)initWithSize:(CGSize)arg1 andColor:(const float*)arg2 imageBufferKey:(id)arg3 imageManager:(id)arg4 options:(id)arg5 ;
-(id)initWithTexture:(id)arg1 ;
-(id)initWithIOSurface:(IOSurfaceRef)arg1 imageBufferKey:(id)arg2 imageManager:(id)arg3 ;
-(id)initWithIOSurface:(IOSurfaceRef)arg1 imageManager:(id)arg2 ;
-(id)initWithCGImage:(CGImageRef)arg1 textureSize:(CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5 monochromatic:(char)arg6 ;
-(id)initWithCGImage:(CGImageRef)arg1 textureSize:(CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(char)arg5 ;
-(id)initWithCVPixelBuffer:(CVBufferRef)arg1 size:(CGSize)arg2 orientation:(int)arg3 imageBufferKey:(id)arg4 imageManager:(id)arg5 monochromatic:(char)arg6 ;
-(id)initWithCVPixelBuffer:(CVBufferRef)arg1 size:(CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(char)arg5 ;
-(id)initWithCVTexture:(CVBufferRef)arg1 size:(CGSize)arg2 orientation:(int)arg3 imageManager:(id)arg4 monochromatic:(char)arg5 ;
-(id)initWithCGContext:(CGContextRef)arg1 imageManager:(id)arg2 ;
-(id)retainedByUserImageWithShader:(id)arg1 ;
-(char)usesBackgroundColorAsBorderColor;
-(void)setFiltersNearest:(char)arg1 ;
-(void)generateMipmap;
-(void)setMipmapFiltersNearest:(char)arg1 ;
-(void)setPreservesAspectRatio:(char)arg1 ;
-(void)setHasKenBurns:(char)arg1 ;
-(char)scaleWasFixedForTargetAspectRatio;
-(void)setScaleWasFixedForTargetAspectRatio:(char)arg1 ;
-(char)hasKBOrShader;
-(void)addOverlayForROI:(id)arg1 ;
-(void)uploadCGImage:(CGImageRef)arg1 toTextureRect:(CGRect)arg2 ;
-(double)sourceTimeStamp;
-(void)setSourceTimeStamp:(double)arg1 ;
-(double)renderTime;
-(void)setRenderTime:(double)arg1 ;
-(int)retainByUserCount;
@end

