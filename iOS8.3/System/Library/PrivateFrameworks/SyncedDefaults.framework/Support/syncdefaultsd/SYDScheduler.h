/*
* This header is generated by classdump-dyld 0.7
* on Thursday, June 25, 2015 at 3:44:51 AM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/PrivateFrameworks/SyncedDefaults.framework/Support/syncdefaultsd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <syncdefaultsd/syncdefaultsd-Structs.h>
@class NSString, SYDServer, SYDAccount, NSMutableSet, NSMutableDictionary, NSMutableArray, NSURL, SYDSchedulingParameters, SYDGlobalScheduling, SYDSchedulerPushManager, SYDNetworkStateManager, SYDBackgroundScheduler, NSURLRequest, NSHTTPURLResponse, NSData, NSError, SYDURLConnection;

@interface SYDScheduler : NSObject {

	NSString* _identifier;
	SYDServer* _server;
	SYDAccount* _account;
	NSString* _lastKnownUser;
	char _wasDisabledLastTime;
	NSMutableSet* _appsQueue;
	char _isSynchronizing;
	char _hadASuccessfulSync;
	char _wantsToSyncNow;
	char _needsToEndTransaction;
	unsigned _syncIdentifier;
	char _isSyncCancelled;
	NSMutableSet* _cancelledApps;
	NSMutableDictionary* _syncWithTrackingRequests;
	NSMutableArray* _pendingSyncRequests;
	char _willStartSynchronizingSoon;
	double _nextSoonSynchronization;
	NSURL* _lastSeenPrimaryURL;
	NSURL* _redirectedURL;
	unsigned _redirectCount;
	SYDSchedulingParameters* _parameters;
	SYDGlobalScheduling* _scheduling;
	double _minimalDelayedTime;
	double _lastRequestForConfig;
	NSString* _lastModifiedHeaderForConfig;
	SYDSchedulerPushManager* _pushManager;
	SYDNetworkStateManager* _networkStateManager;
	SYDBackgroundScheduler* _backgroundScheduler;
	unsigned _backgroundRescheduleCount;
	double _nextScheduledUpdate;
	double _lastPushNotification;
	double _lastSynchronization;
	double _lastBurstStart;
	unsigned _lastBurstCount;
	NSURLRequest* _lastRequest;
	NSHTTPURLResponse* _lastResponse;
	NSData* _lastData;
	NSError* _lastError;
	NSError* _sessionError;
	char _usesSyncIndicator;
	double _syncIndicatorStart;
	char _tracksAllChanges;
	asl_object_sRef aslClient;
	unsigned _transactionCount;
	char _isIdle;
	char _isWaitingToIdle;
	char _disableThrottling;
	SYDURLConnection* _currentConnection;
	char _tracksUsage;
	NSMutableDictionary* _usagePerDisplayIdentifier;
	NSMutableDictionary* _sessionUsagePerDisplayIdentifier;

}

@property (nonatomic,readonly) NSString * identifier;                                          //@synthesize identifier=_identifier - In the implementation block
@property (nonatomic,readonly) SYDSchedulingParameters * parameters;                           //@synthesize parameters=_parameters - In the implementation block
@property (nonatomic,readonly) SYDGlobalScheduling * scheduling;                               //@synthesize scheduling=_scheduling - In the implementation block
@property (assign,nonatomic) SYDServer * server;                                               //@synthesize server=_server - In the implementation block
@property (nonatomic,readonly) char isIdle;                                                    //@synthesize isIdle=_isIdle - In the implementation block
@property (nonatomic,readonly) char isWaitingToIdle;                                           //@synthesize isWaitingToIdle=_isWaitingToIdle - In the implementation block
@property (assign,nonatomic) char usesSyncIndicator;                                           //@synthesize usesSyncIndicator=_usesSyncIndicator - In the implementation block
@property (assign,nonatomic) char tracksAllChanges;                                            //@synthesize tracksAllChanges=_tracksAllChanges - In the implementation block
@property (assign,getter=isLoggingEnabled,nonatomic) char loggingEnabled; 
@property (assign,getter=isFileLoggingEnabled,nonatomic) char fileLoggingEnabled; 
@property (assign,nonatomic) char disableThrottling;                                           //@synthesize disableThrottling=_disableThrottling - In the implementation block
@property (assign,nonatomic) char tracksUsage;                                                 //@synthesize tracksUsage=_tracksUsage - In the implementation block
+(Class)parametersClass;
+(Class)pushManagerClass;
+(Class)accountClass;
-(void)shutdownWithHandler:(/*^block*/id)arg1 ;
-(char)tracksAllChanges;
-(void)logChange:(id)arg1 forBundleIdentifier:(id)arg2 changeCount:(long long)arg3 ;
-(void)setApplicationNeedsToSynchronizeSoon:(id)arg1 reason:(int)arg2 ;
-(void)endSyncWithTrackingRequestForBundleIndentifier:(id)arg1 error:(id)arg2 ;
-(void)synchronizeApplicationsSimilarToApplication:(id)arg1 ;
-(SYDGlobalScheduling *)scheduling;
-(void)resetUpdates;
-(void)_startTrackingChanges;
-(void)_otherSchedulerDidUpdateConfigurationDictionary:(id)arg1 ;
-(void)_shouldUpdateTokenOnServer;
-(void)_receivedPushNotification:(id)arg1 ;
-(void)_networkStateDidChange;
-(void)_networkTypeDidChange;
-(void)resetIdling;
-(void)_synchronizeAllApps;
-(void)_cancelPlannedSynchronization;
-(int)_updateAccountRelatedManagers;
-(void)resetAllApplications;
-(void)synchronizeApplicationsWithServerSoon:(id)arg1 reason:(int)arg2 message:(id)arg3 description:(id)arg4 ;
-(double)_configurationUpdateInterval;
-(char)tracksUsage;
-(void)_addUsage:(unsigned)arg1 forKey:(id)arg2 forDisplayIdentifier:(id)arg3 ;
-(char)_addAppToQueue:(id)arg1 reason:(int)arg2 now:(double)arg3 ;
-(void)_scheduleNextPollingSynchronization;
-(double)_reasonnableConfigurationUpdateInterval;
-(void)_resetBurstStart;
-(void)_stopShowingIndicator;
-(char)_hasPendingTrackingMessages;
-(void)_startSynchronizationSoon;
-(void)_endSyncWithTrackingRequestWithError:(id)arg1 ;
-(void)synchronizeApplicationsWithServerNow:(id)arg1 reason:(int)arg2 description:(id)arg3 ;
-(void)_schedulePendingSyncRequests;
-(void)_serviceUnavailableWithDuration:(double)arg1 ;
-(void)_didUsePropertyList:(id)arg1 forOutput:(char)arg2 forDisplayIdentifier:(id)arg3 ;
-(id)_newRequestToServerWithPath:(id)arg1 body:(id)arg2 credentials:(id)arg3 ;
-(void)_endSynchronizationWithRemainingApps:(id)arg1 ;
-(void)_storeLastRequest:(id)arg1 response:(id)arg2 data:(id)arg3 error:(id)arg4 ;
-(void)_processSyncResponse:(id)arg1 forSynchronizingApps:(id)arg2 ;
-(char)_useAlternateHost:(id)arg1 ;
-(void)_sendHTTPRequest:(id)arg1 withCredentials:(id)arg2 synchronizingApps:(id)arg3 ;
-(void)sendAsynchronousRequest:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(double)_pollingInterval;
-(void)_startSynchronizationIfPossible;
-(char)_needsToDoSomeUpdateWithServerNow:(double)arg1 ;
-(void)_addUsage:(unsigned)arg1 forKey:(id)arg2 forDisplayIdentifier:(id)arg3 usingUsageDictionary:(id)arg4 ;
-(int)_maximumAppsPerRequest;
-(void)_sendSyncRequestWithCredentials:(id)arg1 ;
-(void)_sendSetAPNSRequestWithCredentials:(id)arg1 ;
-(void)_startShowingIndicator;
-(void)_sendConfigRequestWithCredentials:(id)arg1 ;
-(void)_resetUpdatesForceSynchronization:(char)arg1 ;
-(void)_addPendingSyncRequest:(id)arg1 ;
-(char)_addAppsToQueue:(id)arg1 reason:(int)arg2 now:(double)arg3 ;
-(void)_beginSyncWithTrackingForApps:(id)arg1 reason:(int)arg2 message:(id)arg3 ;
-(double)_rescheduleMinimalDelayWithNow:(double)arg1 ;
-(void)_didRescheduleEarly;
-(void)_didRescheduleAsUsual;
-(void)_forgetIdling;
-(void)_idling;
-(void)_rescheduleSyncWithTrackingRequest;
-(id)limitsDescription;
-(void)_stopTrackingChanges;
-(unsigned)_usageForKey:(id)arg1 forDisplayIdentifier:(id)arg2 usingUsageDictionary:(id)arg3 ;
-(char)isFileLoggingEnabled;
-(id)initWithIdentifier:(id)arg1 andPersistentState:(id)arg2 globalPushManager:(id)arg3 ;
-(void)revalidateAccount;
-(void)_receivedSimulatedPushNotification:(id)arg1 ;
-(void)synchronizeApplicationsWithServerNow:(id)arg1 reason:(int)arg2 ;
-(void)synchronizeApplicationsWithServerSoon:(id)arg1 reason:(int)arg2 ;
-(void)unscheduleApplication:(id)arg1 ;
-(void)cancelSyncForApplications:(id)arg1 ;
-(void)refetchConfiguration;
-(id)lastRequestDescription;
-(void)setUsesSyncIndicator:(char)arg1 ;
-(void)setTracksAllChanges:(char)arg1 ;
-(id)usageDescription;
-(void)updateUsageDictionary:(id*)arg1 ;
-(void)resetUsage;
-(void)setFileLoggingEnabled:(char)arg1 ;
-(void)setDisableThrottling:(char)arg1 ;
-(void)setTracksUsage:(char)arg1 ;
-(char)usesSyncIndicator;
-(char)disableThrottling;
-(char)isWaitingToIdle;
-(void)awake;
-(void)dealloc;
-(id)description;
-(SYDServer *)server;
-(NSString *)identifier;
-(id)configuration;
-(void)cancelSync;
-(void)beginTransaction;
-(void)endTransaction;
-(void)_accountDidChange;
-(id)statusDescription;
-(void)setServer:(SYDServer *)arg1 ;
-(char)isLoggingEnabled;
-(SYDSchedulingParameters *)parameters;
-(char)isIdle;
-(id)persistentState;
-(void)setLoggingEnabled:(char)arg1 ;
@end

