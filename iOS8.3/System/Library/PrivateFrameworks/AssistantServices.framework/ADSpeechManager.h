/*
* This header is generated by classdump-dyld 0.7
* on Thursday, June 25, 2015 at 12:46:38 AM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/ADSpeechCapturingDelegate.h>
#import <assistantd/ADSpeechCapturingPowerDelegate.h>

@protocol OS_dispatch_queue, ADSpeechManagerDelegate, ADSpeechCapturing;
@class NSObject, NSError, ADSpeechLog, ADSpeechRecorder, ADSpeechPlaybackSimulator, NSString, AFDictationOptions;

@interface ADSpeechManager : NSObject <ADSpeechCapturingDelegate, ADSpeechCapturingPowerDelegate> {

	NSObject*<OS_dispatch_queue> _rootQueue;
	NSObject*<OS_dispatch_queue> _queue;
	int _speechState;
	char _shouldTalkToDelegate;
	NSError* _recordingError;
	id<ADSpeechManagerDelegate> _delegate;
	/*^block*/id _recordStartedCompletion;
	/*^block*/id _recordStoppedCompletion;
	ADSpeechLog* _speechLog;
	id<ADSpeechCapturing> _currentCapturing;
	ADSpeechRecorder* _speechRecorder;
	ADSpeechPlaybackSimulator* _playbackSimulator;
	NSString* _dictationLanguage;
	AFDictationOptions* _dictationOptions;
	id _context;
	char _isFingerprintingOnly;
	char _isDriving;

}

@property (nonatomic,retain) NSString * dictationLanguage;                       //@synthesize dictationLanguage=_dictationLanguage - In the implementation block
@property (nonatomic,retain) AFDictationOptions * dictationOptions;              //@synthesize dictationOptions=_dictationOptions - In the implementation block
@property (nonatomic,retain) id context;                                         //@synthesize context=_context - In the implementation block
@property (assign,nonatomic) char isFingerprintingOnly;                          //@synthesize isFingerprintingOnly=_isFingerprintingOnly - In the implementation block
@property (assign,nonatomic) char isDriving;                                     //@synthesize isDriving=_isDriving - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)_speechCodecError;
+(id)_speechStartFailureError;
+(id)_badStateError;
-(void)cancelSpeechCaptureSuppressingAlert:(char)arg1 ;
-(void)stopSpeechCaptureWithOptions:(id)arg1 ;
-(void)updateOptionsAfterRecognitionForElapsedTime:(double)arg1 completion:(/*^block*/id)arg2 ;
-(void)stopFingerprintingForSuccess:(char)arg1 ;
-(char)isFingerprintingOnly;
-(void)stopSpeechCaptureWithOptions:(id)arg1 suppressAlert:(char)arg2 ;
-(NSString *)dictationLanguage;
-(AFDictationOptions *)dictationOptions;
-(void)setIsDriving:(char)arg1 ;
-(void)prepareAudioSystemWithOptions:(id)arg1 ;
-(void)startSpeechCaptureForRequestWithOptions:(id)arg1 ;
-(void)setIsFingerprintingOnly:(char)arg1 ;
-(void)startAcousticIDCaptureWithOptions:(id)arg1 ;
-(void)startSpeechCaptureWithURL:(id)arg1 isNarrowBand:(char)arg2 isDictation:(char)arg3 ;
-(void)setDictationLanguage:(NSString *)arg1 ;
-(void)setDictationOptions:(AFDictationOptions *)arg1 ;
-(void)startSpeechCaptureForDictationWithOptions:(id)arg1 ;
-(id)_currentSpeechCaptureSource;
-(id)_speechRecorder;
-(void)_cleanUpDelegateInfo;
-(void)_tellDelegateSpeechFailedWithError:(id)arg1 ;
-(void)_tellDelegateSpeechCanceled;
-(void)_tellDelegateSpeechFinishedWithPacketCount:(int)arg1 endpointMode:(int)arg2 ;
-(void)_tellDelegateSpeechStartedWithRecordingInfo:(id)arg1 ;
-(void)_cancelRecordingWithError:(id)arg1 ;
-(void)_tellDelegateUpdateAudioInfo:(id)arg1 ;
-(void)_recordingStoppedWithError:(id)arg1 endpointMode:(int)arg2 totalPacketCount:(int)arg3 ;
-(void)_tellDelegateAboutSpeechPackets:(id)arg1 count:(int)arg2 ;
-(void)_tellDelegateAboutFingerprint:(id)arg1 duration:(double)arg2 ;
-(void)_tellDelegateMusicWasDetected;
-(void)_tellDelegateEndpointWasDelayedForMusic;
-(void)_tellDelegateAudioFileDidFinish:(id)arg1 error:(id)arg2 ;
-(void)_tellDelegateAboutAveragePower:(float)arg1 peak:(float)arg2 ;
-(void)eagerlyInitializeAudioRecording;
-(void)_updateCapturingStateWithOptions:(id)arg1 ;
-(void)_startFixedPriorityCaptureForMode:(int)arg1 options:(id)arg2 ;
-(void)_startCaptureForMode:(int)arg1 options:(id)arg2 ;
-(void)_tellDelegateSpeechShouldPreheatWithRecordingInfo:(id)arg1 ;
-(void)_tellDelegateSpeechWillBeginWithTimestamp:(double)arg1 ;
-(void)_releaseSession;
-(void)speechCapturingDidStartRecordingSuccessfully:(char)arg1 withInfo:(id)arg2 ;
-(void)speechCapturingDidUpdateRecordingInfo:(id)arg1 ;
-(void)speechCapturingDidRecordSpeechPackets:(id)arg1 totalPacketCount:(int)arg2 ;
-(void)speechCapturingWillStopRecording:(char)arg1 ;
-(void)speechCapturingDidStopRecordingWithError:(id)arg1 endpointMode:(int)arg2 totalPacketCount:(int)arg3 ;
-(void)speechCapturing:(id)arg1 didReceiveFingerprint:(id)arg2 duration:(double)arg3 ;
-(void)speechCapturingDidDetectMusic:(id)arg1 ;
-(void)speechCapturingDidDelayEndpointForMusic:(id)arg1 ;
-(void)speechCapturing:(id)arg1 didFinishWritingAudioFile:(id)arg2 error:(id)arg3 ;
-(void)speechCapturingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2 ;
-(char)isDriving;
-(char)isStopped;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)context;
-(void)setContext:(id)arg1 ;
-(void)endSession;
-(void)preheat;
-(void)updateSpeechOptions:(id)arg1 ;
-(char)isCapturing;
@end

