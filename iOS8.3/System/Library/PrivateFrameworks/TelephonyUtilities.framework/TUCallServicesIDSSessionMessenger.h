/*
* This header is generated by classdump-dyld 0.7
* on Thursday, June 25, 2015 at 3:48:15 AM Japan Standard Time
* Operating System: Version 8.3 (Build 12F69)
* Image Source: /System/Library/PrivateFrameworks/TelephonyUtilities.framework/callservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <callservicesd/TUCallServicesIDSMessenger.h>
#import <callservicesd/IDSServiceDelegatePrivate.h>
#import <callservicesd/TUIDSSessionDelegate.h>

@class NSMutableArray, IDSDevice, TUIDSSession, NSString;

@interface TUCallServicesIDSSessionMessenger : TUCallServicesIDSMessenger <IDSServiceDelegatePrivate, TUIDSSessionDelegate> {

	NSMutableArray* _sessions;

}

@property (assign,nonatomic,__weak) id<TUCallServicesIDSSessionMessengerDelegate> delegate; 
@property (nonatomic,readonly) IDSDevice * deviceWithWaitingSession; 
@property (nonatomic,readonly) IDSDevice * deviceWithActiveSession; 
@property (nonatomic,readonly) int availableSocket; 
@property (nonatomic,readonly) TUIDSSession * waitingSession; 
@property (nonatomic,readonly) TUIDSSession * currentSession; 
@property (nonatomic,readonly) TUIDSSession * endingSession; 
@property (nonatomic,retain) NSMutableArray * sessions;                                                  //@synthesize sessions=_sessions - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(NSMutableArray *)sessions;
-(void)setSessions:(NSMutableArray *)arg1 ;
-(void)setCurrentSessionWillEnd;
-(void)endEndingSession;
-(IDSDevice *)deviceWithActiveSession;
-(void)sendMessage:(id)arg1 andStartSessionIfNecessaryForIdentifier:(id)arg2 toDevicesSupportingService:(int)arg3 withTimeout:(int)arg4 ;
-(void)sendMessage:(id)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)sendMessage:(id)arg1 andCancelOrDeclineInvitiationIfNecessaryForIdentifier:(id)arg2 ;
-(void)sendMessage:(id)arg1 andStartSessionIfNecessaryForIdentifier:(id)arg2 toDevice:(id)arg3 timeout:(int)arg4 completionHandler:(/*^block*/id)arg5 ;
-(IDSDevice *)deviceWithWaitingSession;
-(void)sendMessage:(id)arg1 andAcceptInvitiationIfNecessaryForIdentifier:(id)arg2 ;
-(void)sendMessage:(id)arg1 forIdentifier:(id)arg2 waitUntilConnected:(char)arg3 ;
-(void)cancelOrDeclineInvitationForIdentifier:(id)arg1 ;
-(void)acceptInvitationForIdentifier:(id)arg1 ;
-(int)availableSocket;
-(void)performBlockOnSocketAvailability:(/*^block*/id)arg1 forIdentifier:(id)arg2 ;
-(void)session:(id)arg1 endedWithReason:(int)arg2 ;
-(void)session:(id)arg1 receivedInvitationAcceptWithData:(id)arg2 ;
-(void)session:(id)arg1 receivedInvitationCancelWithData:(id)arg2 fromDevice:(id)arg3 ;
-(void)session:(id)arg1 receivedInvitationDeclineWithData:(id)arg2 fromDevice:(id)arg3 ;
-(void)session:(id)arg1 receivedData:(id)arg2 fromDevice:(id)arg3 ;
-(id)_sessionForIdentifier:(id)arg1 ;
-(TUIDSSession *)waitingSession;
-(id)_createSessionToDevices:(id)arg1 ;
-(TUIDSSession *)endingSession;
-(id)_createSessionToAllDevicesSupportingService:(int)arg1 ;
-(void)_startSession:(id)arg1 withMessage:(id)arg2 identifier:(id)arg3 timeout:(int)arg4 declineOnError:(char)arg5 ;
-(void)_sendMessage:(id)arg1 andCancelInvitiationIfNecessaryForSession:(id)arg2 ;
-(void)_sendMessage:(id)arg1 andDeclineInvitiationIfNecessaryForSession:(id)arg2 ;
-(void)_destroySession:(id)arg1 ;
-(void)endSessionForIdentifier:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(TUIDSSession *)currentSession;
-(void)service:(id)arg1 account:(id)arg2 inviteReceivedForSession:(id)arg3 fromID:(id)arg4 withContext:(id)arg5 ;
-(void)sessionStarted:(id)arg1 ;
-(id)deviceForFromID:(id)arg1 ;
@end

