/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, June 23, 2015 at 11:27:24 PM Japan Standard Time
* Operating System: Version 8.2 (Build 12D508)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class NSString, <TSUMultipleChoiceListChoiceProviding>, TSKShuffleMapping, TSCETectonicShift, NSIndexSet, TSCH3DChartRep, TSCH3DAnimationInterpolation, NSSet, NSObject, TSCH3DShaderVariable, TSCH3DScene, TSCHChartInfo, TSCHChartType, TSCHChartSeriesType, TSTTableStyle, TSTCellStyle, TSWPParagraphStyle, TSWPShapeStyle, TSTCell, TSUFormatObject, NSNumber, NSDate, TSPObject, TSWPColumnStyle, TSWPListStyle;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct _xmlTextReader* xmlTextReaderRef;

typedef struct CGPath* CGPathRef;

typedef struct __CFString* CFStringRef;

typedef struct __CFArray* CFArrayRef;

typedef struct __CFBundle* CFBundleRef;

typedef struct __CFURL* CFURLRef;

typedef struct __CFDictionary* CFDictionaryRef;

typedef struct GQDSMap* GQDSMapRef;

typedef struct __CFDate* CFDateRef;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_GQ12;

typedef struct {
	int location;
	int length;
} SCD_Struct_GQ13;

typedef struct __CTFont* CTFontRef;

typedef struct __CFData* CFDataRef;

typedef struct __QLPreviewRequest* QLPreviewRequestRef;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned total_in;
	char* next_out;
	unsigned avail_out;
	unsigned total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned adler;
	unsigned reserved;
} z_stream_s;

typedef struct __CFLocale* CFLocaleRef;

typedef struct __CFNumberFormatter* CFNumberFormatterRef;

typedef struct {
	/*function pointer*/void* field1;
	/*function pointer*/void* field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_GQ20;

typedef struct __CFError* CFErrorRef;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_TS23;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct __CFDateFormatter* CFDateFormatterRef;

typedef struct {
	unsigned field1 : 16;
	6 field2;
	unsigned field3 : 8;
	unsigned field4 : 3;
	unsigned field5 : 1;
	unsigned field6 : 1;
} SCD_Struct_TS26;

typedef struct {
	unsigned field1 : 8;
} SCD_Struct_TS27;

typedef struct {
	unsigned field1 : 8;
	unsigned field2 : 8;
	unsigned field3 : 1;
} SCD_Struct_TS28;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	id field3;
} SCD_Struct_TS29;

typedef struct {
	unsigned field1 : 1;
	int field2;
	int field3;
	int field4;
} SCD_Struct_TS30;

typedef struct {
	double field1;
	double field2;
	double field3;
	int field4;
	unsigned field5 : 2;
	unsigned field6 : 2;
} SCD_Struct_TS31;

typedef struct {
	int field1;
	unsigned field2;
	id field3;
} SCD_Struct_TS32;

typedef struct {
	unsigned field1;
	/*function pointer*/void* field2;
} SCD_Struct_TS33;

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	SCD_Struct_TS26 field4;
	SCD_Struct_TS27 field5;
	SCD_Struct_TS28 field6;
	SCD_Struct_TS29 field7;
	SCD_Struct_TS30 field8;
	SCD_Struct_TS31 field9;
	SCD_Struct_TS32 field10;
	SCD_Struct_TS33) field11;
} SCD_Struct_TS34;

typedef struct {
	id field1;
	id field2;
	id field3;
	id field4;
	double field5;
	unsigned field6 : 8;
	unsigned char field7;
	unsigned char field8;
	unsigned char field9;
	unsigned char field10;
	unsigned char field11;
	unsigned char field12;
	unsigned char field13;
	unsigned short field14;
	unsigned field15 : 1;
	unsigned field16 : 1;
	unsigned field17 : 1;
	unsigned field18 : 1;
	unsigned field19 : 1;
	unsigned field20 : 1;
} SCD_Struct_TS35;

typedef struct timeval {
	int tv_sec;
	int tv_usec;
} timeval;

typedef struct TSUOpstat_s {
	char running;
	unsigned long long count;
	timeval min_time;
	timeval max_time;
	timeval total_time;
	timeval last_time;
} TSUOpstat_s;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct __CFSet* CFSetRef;

typedef struct CGContext* CGContextRef;

typedef struct CGColor* CGColorRef;

typedef struct Color* ColorRef;

typedef struct _compressed_pair<boost::shared_ptr<TSUStringChunk> *, std::__1::allocator<boost::shared_ptr<TSUStringChunk> > > {
	shared_ptr<TSUStringChunk> __first_;
} compressed_pair<boost::shared_ptr<TSUStringChunk> *, std::__1::allocator<boost::shared_ptr<TSUStringChunk> > >;

typedef struct vector<boost::shared_ptr<TSUStringChunk>, std::__1::allocator<boost::shared_ptr<TSUStringChunk> > > {
	shared_ptr<TSUStringChunk> __begin_;
	shared_ptr<TSUStringChunk> __end_;
	compressed_pair<boost::shared_ptr<TSUStringChunk> *, std::__1::allocator<boost::shared_ptr<TSUStringChunk> > > __end_cap_;
} vector<boost::shared_ptr<TSUStringChunk>, std::__1::allocator<boost::shared_ptr<TSUStringChunk> > >;

typedef struct {
	unsigned mCurrencyCodeIndex : 16;
	unsigned mDecimalPlaces : 8;
	unsigned mNegativeStyle : 3;
	unsigned mShowThousandsSeparator : 1;
	unsigned mUseAccountingStyle : 1;
} SCD_Struct_TS46;

typedef struct {
	unsigned mSuppressDateFormat : 1;
	unsigned mSuppressTimeFormat : 1;
	NSString* mDateTimeFormat;
} SCD_Struct_TS47;

typedef struct {
	unsigned mUseAutomaticUnits : 1;
	int mDurationUnitSmallest;
	int mDurationUnitLargest;
	int mDurationStyle;
} SCD_Struct_TS48;

typedef struct {
	double mMinimum;
	double mMaximum;
	double mIncrement;
	int mDisplayFormatType;
	unsigned mOrientation : 2;
	unsigned mPosition : 2;
} SCD_Struct_TS49;

typedef struct {
	int mInitialValue;
	unsigned mMultipleChoiceListFormatID;
	<TSUMultipleChoiceListChoiceProviding>* mData;
} SCD_Struct_TS50;

typedef struct {
	unsigned mCustomFormatID;
	/*function pointer*/void* mData;
} SCD_Struct_TS51;

typedef struct {
	int mFormatType;
	/*function pointer*/void* ;
	SCD_Struct_TS46 mNumberFormatStruct;
	SCD_Struct_TS27 mFractionFormatStruct;
	SCD_Struct_TS28 mBaseFormatStruct;
	SCD_Struct_TS47 mDateFormatStruct;
	SCD_Struct_TS48 mDurationFormatStruct;
	SCD_Struct_TS51 mCustomFormatStruct;
	SCD_Struct_TS49 mControlFormatStruct;
	SCD_Struct_TS50) mMultipleChoiceListFormatStruct;
} SCD_Struct_TS52;

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	SCD_Struct_TS27 field4;
	SCD_Struct_TS28 field5;
	SCD_Struct_TS29 field6;
	SCD_Struct_TS32 field7;
	SCD_Struct_TS46 field8;
	SCD_Struct_TS48 field9;
	SCD_Struct_TS49 field10;
	SCD_Struct_TS51) field11;
} SCD_Struct_TS53;

typedef struct {
	int field1;
	/*function pointer*/void* field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
	/*function pointer*/void* field6;
} SCD_Struct_TS54;

typedef struct {
	int field1;
	/*function pointer*/void* field2;
	/*function pointer*/void* field3;
	/*function pointer*/void* field4;
	/*function pointer*/void* field5;
} SCD_Struct_TS55;

typedef struct _compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > {
	_NSRange __first_;
} compressed_pair<_NSRange *, std::__1::allocator<_NSRange> >;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange> > {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > __end_cap_;
} vector<_NSRange, std::__1::allocator<_NSRange> >;

typedef struct CGImage* CGImageRef;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct _CCCryptor* CCCryptorRef;

typedef struct CGDataProvider* CGDataProviderRef;

typedef struct _compressed_pair<CGRect *, std::__1::allocator<CGRect> > {
	CGRect __first_;
} compressed_pair<CGRect *, std::__1::allocator<CGRect> >;

typedef struct vector<CGRect, std::__1::allocator<CGRect> > {
	CGRect __begin_;
	CGRect __end_;
	compressed_pair<CGRect *, std::__1::allocator<CGRect> > __end_cap_;
} vector<CGRect, std::__1::allocator<CGRect> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> {
	__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, NSMutableArray *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, NSMutableArray *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, NSMutableArray *>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, NSMutableArray *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, NSMutableArray *> > >;

typedef struct hash_map<const long long, NSMutableArray *, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, NSMutableArray *> > > {
	hash_table<std::__1::pair<const long long, NSMutableArray *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, NSMutableArray *>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, NSMutableArray *>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, NSMutableArray *> > > __table_;
} hash_map<const long long, NSMutableArray *, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, NSMutableArray *> > >;

typedef struct auto_ptr<google::protobuf::Message> {
	Message __ptr_;
} auto_ptr<google::protobuf::Message>;

typedef struct auto_ptr<__gnu_cxx::hash_map<const long long, bool, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, bool> > > > {
	hash_map<const long long, bool, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, bool> > > __ptr_;
} auto_ptr<__gnu_cxx::hash_map<const long long, bool, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, bool> > > >;

typedef struct _compressed_pair<TSP::UnarchiverReference *, std::__1::allocator<TSP::UnarchiverReference> > {
	UnarchiverReference __first_;
} compressed_pair<TSP::UnarchiverReference *, std::__1::allocator<TSP::UnarchiverReference> >;

typedef struct vector<TSP::UnarchiverReference, std::__1::allocator<TSP::UnarchiverReference> > {
	UnarchiverReference __begin_;
	UnarchiverReference __end_;
	compressed_pair<TSP::UnarchiverReference *, std::__1::allocator<TSP::UnarchiverReference> > __end_cap_;
} vector<TSP::UnarchiverReference, std::__1::allocator<TSP::UnarchiverReference> >;

typedef struct _compressed_pair<TSP::UnarchiverRepeatedReference *, std::__1::allocator<TSP::UnarchiverRepeatedReference> > {
	UnarchiverRepeatedReference __first_;
} compressed_pair<TSP::UnarchiverRepeatedReference *, std::__1::allocator<TSP::UnarchiverRepeatedReference> >;

typedef struct vector<TSP::UnarchiverRepeatedReference, std::__1::allocator<TSP::UnarchiverRepeatedReference> > {
	UnarchiverRepeatedReference __begin_;
	UnarchiverRepeatedReference __end_;
	compressed_pair<TSP::UnarchiverRepeatedReference *, std::__1::allocator<TSP::UnarchiverRepeatedReference> > __end_cap_;
} vector<TSP::UnarchiverRepeatedReference, std::__1::allocator<TSP::UnarchiverRepeatedReference> >;

typedef struct _compressed_pair<void (__strong *)(), std::__1::allocator<void ()()> > {
	/*^block*/id __first_;
} compressed_pair<void (__strong *)(), std::__1::allocator<void ()()> >;

typedef struct vector<void ()(), std::__1::allocator<void ()()> > {
	/*^block*/id __begin_;
	/*^block*/id __end_;
	compressed_pair<void (__strong *)(), std::__1::allocator<void ()()> > __end_cap_;
} vector<void ()(), std::__1::allocator<void ()()> >;

typedef struct set<long long, std::__1::less<long long>, std::__1::allocator<long long> >* set<long long, std::__1::less<long long>, std::__1::allocator<long long> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> {
	__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSPData *__weak>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > >;

typedef struct hash_map<const long long, TSPData *__weak, TSP::ObjectIdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > > {
	hash_table<std::__1::pair<const long long, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSPData *__weak>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSPData *__weak>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > > __table_;
} hash_map<const long long, TSPData *__weak, TSP::ObjectIdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSPData *__weak> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> {
	__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > > {
	__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true>, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true> > __p3_;
} hash_table<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true>, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > >;

typedef struct hash_map<const std::__1::array<unsigned char, 20>, TSPData *__weak, TSP::DataDigestHash, TSP::DataDigestEqualTo, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > > {
	hash_table<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak>, TSP::DataDigestEqualTo, true>, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > > __table_;
} hash_map<const std::__1::array<unsigned char, 20>, TSPData *__weak, TSP::DataDigestHash, TSP::DataDigestEqualTo, std::__1::allocator<std::__1::pair<const std::__1::array<unsigned char, 20>, TSPData *__weak> > >;

typedef struct CGDataConsumer* CGDataConsumerRef;

typedef struct array<unsigned char, 20> {
	unsigned char __elems_[20];
} array<unsigned char, 20>;

typedef struct RepeatedPtrField<TSP::ComponentInfo> {
	void elements_;
	int current_size_;
	int allocated_size_;
	int total_size_;
} RepeatedPtrField<TSP::ComponentInfo>;

typedef struct RepeatedPtrField<TSP::DataInfo> {
	void elements_;
	int current_size_;
	int allocated_size_;
	int total_size_;
} RepeatedPtrField<TSP::DataInfo>;

typedef struct RepeatedField<unsigned int> {
	unsigned elements_;
	int current_size_;
	int total_size_;
} RepeatedField<unsigned int>;

typedef struct UnknownFieldSet {
	vector<google::protobuf::UnknownField, std::__1::allocator<google::protobuf::UnknownField> > fields_;
} UnknownFieldSet;

typedef struct PackageMetadata {
	/*function pointer*/void* _vptr$MessageLite;
	UnknownFieldSet _unknown_fields_;
	unsigned long long last_object_identifier_;
	DocumentRevision revision_;
	RepeatedPtrField<TSP::ComponentInfo> components_;
	RepeatedPtrField<TSP::DataInfo> datas_;
	RepeatedField<unsigned int> read_version_;
	int _read_version_cached_byte_size_;
	RepeatedField<unsigned int> write_version_;
	int _write_version_cached_byte_size_;
	RepeatedField<unsigned int> file_format_version_;
	int _file_format_version_cached_byte_size_;
	unsigned long long save_token_;
	int preferred_package_type_;
	int _cached_size_;
	unsigned _has_bits_[1];
} PackageMetadata;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const google::protobuf::Message *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const google::protobuf::Message *>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const google::protobuf::Message *> > >;

typedef struct hash_map<unsigned int, const google::protobuf::Message *, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, const google::protobuf::Message *> > > {
	hash_table<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const google::protobuf::Message *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const google::protobuf::Message *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const google::protobuf::Message *> > > __table_;
} hash_map<unsigned int, const google::protobuf::Message *, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, const google::protobuf::Message *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> {
	__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > > {
	__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true>, std::__1::allocator<std::__1::pair<const google::protobuf::Descriptor *, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true> > __p3_;
} hash_table<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true>, std::__1::allocator<std::__1::pair<const google::protobuf::Descriptor *, unsigned int> > >;

typedef struct hash_map<const google::protobuf::Descriptor *, unsigned int, TSP::DescriptorHash, std::__1::equal_to<const google::protobuf::Descriptor *>, std::__1::allocator<std::__1::pair<const google::protobuf::Descriptor *const, unsigned int> > > {
	hash_table<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, TSP::DescriptorHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const google::protobuf::Descriptor *, unsigned int>, std::__1::equal_to<const google::protobuf::Descriptor *>, true>, std::__1::allocator<std::__1::pair<const google::protobuf::Descriptor *, unsigned int> > > __table_;
} hash_map<const google::protobuf::Descriptor *, unsigned int, TSP::DescriptorHash, std::__1::equal_to<const google::protobuf::Descriptor *>, std::__1::allocator<std::__1::pair<const google::protobuf::Descriptor *const, unsigned int> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, const char *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned int, const char *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned int, const char *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const char *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, const char *>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::pair<unsigned int, const char *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const char *> > >;

typedef struct hash_map<unsigned int, const char *, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, const char *> > > {
	hash_table<std::__1::pair<unsigned int, const char *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, const char *>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, const char *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, const char *> > > __table_;
} hash_map<unsigned int, const char *, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, const char *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, __unsafe_unretained Class> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned int, __unsafe_unretained Class>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, __unsafe_unretained Class> > >;

typedef struct hash_map<unsigned int, __unsafe_unretained Class, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, __unsafe_unretained Class> > > {
	hash_table<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned int, __unsafe_unretained Class>, __gnu_cxx::hash<unsigned int>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned int, __unsafe_unretained Class>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, __unsafe_unretained Class> > > __table_;
} hash_map<unsigned int, __unsafe_unretained Class, __gnu_cxx::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, __unsafe_unretained Class> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, void *> > >;

typedef struct _tree<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage> > > {
	__tree_node<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true> > __pair3_;
} tree<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage> > >;

typedef struct map<long long, TSP::DescriptionPrinterMessage, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::DescriptionPrinterMessage> > > {
	tree<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::__map_value_compare<long long, std::__1::__value_type<long long, TSP::DescriptionPrinterMessage>, std::__1::less<long long>, true>, std::__1::allocator<std::__1::__value_type<long long, TSP::DescriptionPrinterMessage> > > __tree_;
} map<long long, TSP::DescriptionPrinterMessage, std::__1::less<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::DescriptionPrinterMessage> > >;

typedef struct DispatchDataInputStream* DispatchDataInputStreamRef;

typedef struct sqlite3_blob* sqlite3_blobRef;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
} SCD_Struct_TS157;

typedef struct Reference* ReferenceRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> {
	__hash_node<std::__1::pair<const long long, bool>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, bool>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, bool>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, bool> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, bool>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, bool>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, bool> > >;

typedef struct hash_map<const long long, bool, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, bool> > > {
	hash_table<std::__1::pair<const long long, bool>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, bool>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, bool>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, bool> > > __table_;
} hash_map<const long long, bool, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, bool> > >;

typedef struct RepeatedPtrField<TSP::MessageInfo> {
	void elements_;
	int current_size_;
	int allocated_size_;
	int total_size_;
} RepeatedPtrField<TSP::MessageInfo>;

typedef struct ArchiveInfo {
	/*function pointer*/void* _vptr$MessageLite;
	UnknownFieldSet _unknown_fields_;
	unsigned long long identifier_;
	RepeatedPtrField<TSP::MessageInfo> message_infos_;
	int _cached_size_;
	unsigned _has_bits_[1];
} ArchiveInfo;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> {
	__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > > {
	__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, TSP::DataInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::DataInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::DataInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, TSP::DataInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::DataInfo> > >;

typedef struct hash_map<long long, TSP::DataInfo, TSP::DataIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::DataInfo> > > {
	hash_table<std::__1::pair<long long, TSP::DataInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::DataInfo>, TSP::DataIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::DataInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::DataInfo> > > __table_;
} hash_map<long long, TSP::DataInfo, TSP::DataIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::DataInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> {
	__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > > {
	__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, TSP::ExternalReferenceInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ExternalReferenceInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ExternalReferenceInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, TSP::ExternalReferenceInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ExternalReferenceInfo> > >;

typedef struct hash_map<long long, TSP::ExternalReferenceInfo, TSP::ObjectIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ExternalReferenceInfo> > > {
	hash_table<std::__1::pair<long long, TSP::ExternalReferenceInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ExternalReferenceInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ExternalReferenceInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ExternalReferenceInfo> > > __table_;
} hash_map<long long, TSP::ExternalReferenceInfo, TSP::ObjectIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ExternalReferenceInfo> > >;

typedef struct _compressed_pair<TSP::RepeatedExternalReferenceCompletionInfo *, std::__1::allocator<TSP::RepeatedExternalReferenceCompletionInfo> > {
	RepeatedExternalReferenceCompletionInfo __first_;
} compressed_pair<TSP::RepeatedExternalReferenceCompletionInfo *, std::__1::allocator<TSP::RepeatedExternalReferenceCompletionInfo> >;

typedef struct vector<TSP::RepeatedExternalReferenceCompletionInfo, std::__1::allocator<TSP::RepeatedExternalReferenceCompletionInfo> > {
	RepeatedExternalReferenceCompletionInfo __begin_;
	RepeatedExternalReferenceCompletionInfo __end_;
	compressed_pair<TSP::RepeatedExternalReferenceCompletionInfo *, std::__1::allocator<TSP::RepeatedExternalReferenceCompletionInfo> > __end_cap_;
} vector<TSP::RepeatedExternalReferenceCompletionInfo, std::__1::allocator<TSP::RepeatedExternalReferenceCompletionInfo> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> {
	__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot> > >;

typedef struct hash_map<const long long, TSP::ComponentPropertiesSnapshot, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot> > > {
	hash_table<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot> > > __table_;
} hash_map<const long long, TSP::ComponentPropertiesSnapshot, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ComponentPropertiesSnapshot> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> {
	__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, TSP::WrittenComponentInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenComponentInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenComponentInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, TSP::WrittenComponentInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenComponentInfo> > >;

typedef struct hash_map<const long long, TSP::WrittenComponentInfo, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenComponentInfo> > > {
	hash_table<std::__1::pair<const long long, TSP::WrittenComponentInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenComponentInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenComponentInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenComponentInfo> > > __table_;
} hash_map<const long long, TSP::WrittenComponentInfo, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenComponentInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > > > > {
	__tree_node<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > > > >;

typedef struct map<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > > > > {
	tree<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > > > > __tree_;
} map<unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > >, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::queue<TSPComponent *, std::__1::deque<TSPComponent *, std::__1::allocator<TSPComponent *> > > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> {
	__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, TSP::WrittenObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenObjectInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::WrittenObjectInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, TSP::WrittenObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenObjectInfo> > >;

typedef struct hash_map<const long long, TSP::WrittenObjectInfo, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenObjectInfo> > > {
	hash_table<std::__1::pair<const long long, TSP::WrittenObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::WrittenObjectInfo>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::WrittenObjectInfo>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenObjectInfo> > > __table_;
} hash_map<const long long, TSP::WrittenObjectInfo, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::WrittenObjectInfo> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<TSP::WrittenObjectInfo> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<TSP::WrittenObjectInfo> >;

typedef struct _compressed_pair<TSP::WrittenObjectInfo **, std::__1::allocator<TSP::WrittenObjectInfo *> > {
	WrittenObjectInfo __first_;
} compressed_pair<TSP::WrittenObjectInfo **, std::__1::allocator<TSP::WrittenObjectInfo *> >;

typedef struct _split_buffer<TSP::WrittenObjectInfo *, std::__1::allocator<TSP::WrittenObjectInfo *> > {
	WrittenObjectInfo __first_;
	WrittenObjectInfo __begin_;
	WrittenObjectInfo __end_;
	compressed_pair<TSP::WrittenObjectInfo **, std::__1::allocator<TSP::WrittenObjectInfo *> > __end_cap_;
} split_buffer<TSP::WrittenObjectInfo *, std::__1::allocator<TSP::WrittenObjectInfo *> >;

typedef struct deque<TSP::WrittenObjectInfo, std::__1::allocator<TSP::WrittenObjectInfo> > {
	split_buffer<TSP::WrittenObjectInfo *, std::__1::allocator<TSP::WrittenObjectInfo *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<TSP::WrittenObjectInfo> > __size_;
} deque<TSP::WrittenObjectInfo, std::__1::allocator<TSP::WrittenObjectInfo> >;

typedef struct queue<TSP::WrittenObjectInfo, std::__1::deque<TSP::WrittenObjectInfo, std::__1::allocator<TSP::WrittenObjectInfo> > > {
	deque<TSP::WrittenObjectInfo, std::__1::allocator<TSP::WrittenObjectInfo> > c;
} queue<TSP::WrittenObjectInfo, std::__1::deque<TSP::WrittenObjectInfo, std::__1::allocator<TSP::WrittenObjectInfo> > >;

typedef struct _compressed_pair<TSP::ObjectStackEntry *, std::__1::allocator<TSP::ObjectStackEntry> > {
	ObjectStackEntry __first_;
} compressed_pair<TSP::ObjectStackEntry *, std::__1::allocator<TSP::ObjectStackEntry> >;

typedef struct vector<TSP::ObjectStackEntry, std::__1::allocator<TSP::ObjectStackEntry> > {
	ObjectStackEntry __begin_;
	ObjectStackEntry __end_;
	compressed_pair<TSP::ObjectStackEntry *, std::__1::allocator<TSP::ObjectStackEntry> > __end_cap_;
} vector<TSP::ObjectStackEntry, std::__1::allocator<TSP::ObjectStackEntry> >;

typedef struct PasteboardMetadata {
	/*function pointer*/void* _vptr$MessageLite;
	UnknownFieldSet _unknown_fields_;
	RepeatedField<unsigned int> version_;
	int _version_cached_byte_size_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > app_name_;
	RepeatedPtrField<TSP::DataInfo> datas_;
	basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > source_document_uuid_;
	int _cached_size_;
	unsigned _has_bits_[1];
} PasteboardMetadata;

typedef struct RepeatedPtrField<TSP::FieldInfo> {
	void elements_;
	int current_size_;
	int allocated_size_;
	int total_size_;
} RepeatedPtrField<TSP::FieldInfo>;

typedef struct RepeatedField<unsigned long long> {
	unsigned long long elements_;
	int current_size_;
	int total_size_;
} RepeatedField<unsigned long long>;

typedef struct MessageInfo {
	/*function pointer*/void* _vptr$MessageLite;
	UnknownFieldSet _unknown_fields_;
	RepeatedField<unsigned int> version_;
	int _version_cached_byte_size_;
	unsigned type_;
	unsigned length_;
	RepeatedPtrField<TSP::FieldInfo> field_infos_;
	RepeatedField<unsigned long long> object_references_;
	int _object_references_cached_byte_size_;
	RepeatedField<unsigned long long> data_references_;
	int _data_references_cached_byte_size_;
	int _cached_size_;
	unsigned _has_bits_[1];
} MessageInfo;

typedef struct shared_ptr<TSP::ArchiveInfo> {
	ArchiveInfo __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<TSP::ArchiveInfo>;

typedef struct shared_ptr<google::protobuf::UnknownFieldSet> {
	UnknownFieldSet __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<google::protobuf::UnknownFieldSet>;

typedef struct FieldInfo {
	/*function pointer*/void* _vptr$MessageLite;
	UnknownFieldSet _unknown_fields_;
	FieldPath path_;
	int type_;
	int rule_;
	RepeatedField<unsigned long long> object_references_;
	int _object_references_cached_byte_size_;
	RepeatedField<unsigned long long> data_references_;
	int _data_references_cached_byte_size_;
	int _cached_size_;
	unsigned _has_bits_[1];
} FieldInfo;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, void *> > >;

typedef struct _tree<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, TSPUnknownFieldTreeNode *> > > {
	__tree_node<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true> > __pair3_;
} tree<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, TSPUnknownFieldTreeNode *> > >;

typedef struct map<int, TSPUnknownFieldTreeNode *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, TSPUnknownFieldTreeNode *> > > {
	tree<std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, TSPUnknownFieldTreeNode *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, TSPUnknownFieldTreeNode *> > > __tree_;
} map<int, TSPUnknownFieldTreeNode *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, TSPUnknownFieldTreeNode *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> {
	__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > > {
	__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, TSP::ObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ObjectInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, TSP::ObjectInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, TSP::ObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ObjectInfo> > >;

typedef struct hash_map<long long, TSP::ObjectInfo, TSP::ObjectIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ObjectInfo> > > {
	hash_table<std::__1::pair<long long, TSP::ObjectInfo>, __gnu_cxx::__hash_map_hasher<std::__1::pair<long long, TSP::ObjectInfo>, TSP::ObjectIdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<long long, TSP::ObjectInfo>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, TSP::ObjectInfo> > > __table_;
} hash_map<long long, TSP::ObjectInfo, TSP::ObjectIdentifierHash, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, TSP::ObjectInfo> > >;

typedef struct {
	unsigned long long version;
	unsigned long long compatibleVersion;
} SCD_Struct_TS255;

typedef struct _compressed_pair<TSP::FinalizeHandlerItem **, std::__1::allocator<TSP::FinalizeHandlerItem *> > {
	FinalizeHandlerItem __first_;
} compressed_pair<TSP::FinalizeHandlerItem **, std::__1::allocator<TSP::FinalizeHandlerItem *> >;

typedef struct vector<TSP::FinalizeHandlerItem *, std::__1::allocator<TSP::FinalizeHandlerItem *> > {
	FinalizeHandlerItem __begin_;
	FinalizeHandlerItem __end_;
	compressed_pair<TSP::FinalizeHandlerItem **, std::__1::allocator<TSP::FinalizeHandlerItem *> > __end_cap_;
} vector<TSP::FinalizeHandlerItem *, std::__1::allocator<TSP::FinalizeHandlerItem *> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> {
	__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > > {
	__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::FinalizeHandlerItem> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true> > __p3_;
} hash_table<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::FinalizeHandlerItem> > >;

typedef struct hash_map<const long long, TSP::FinalizeHandlerItem, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::FinalizeHandlerItem> > > {
	hash_table<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, __gnu_cxx::__hash_map_hasher<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, TSP::IdentifierHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const long long, TSP::FinalizeHandlerItem>, std::__1::equal_to<const long long>, true>, std::__1::allocator<std::__1::pair<const long long, TSP::FinalizeHandlerItem> > > __table_;
} hash_map<const long long, TSP::FinalizeHandlerItem, TSP::IdentifierHash, std::__1::equal_to<const long long>, std::__1::allocator<std::__1::pair<const long long, TSP::FinalizeHandlerItem> > >;

typedef struct {
	unsigned ctx[96];
} SCD_Struct_TS268;

typedef struct __CFUUID* CFUUIDRef;

typedef struct {
	unsigned short field1;
	unsigned char field2;
	unsigned char field3;
} SCD_Struct_TS270;

typedef struct {
	unsigned short row;
	unsigned char column;
	unsigned char reserved;
} SCD_Struct_TS271;

typedef struct {
	__CFUUID mTableID;
	TSKShuffleMapping* mSortMapping;
	char mExplodeRanges;
} SCD_Struct_TS272;

typedef struct {
	__CFUUID mTableID;
	__CFUUID mTransposedCondStyleOwnerID;
	unsigned short mNumberOfFooterRows;
} SCD_Struct_TS273;

typedef struct {
	SCD_Struct_TS271 mTopLeft;
	SCD_Struct_TS271 mBottomRight;
} SCD_Struct_TS274;

typedef struct {
	SCD_Struct_TS274 range;
	__CFUUID tableID;
} SCD_Struct_TS275;

typedef struct {
	__CFUUID mTableID;
	SCD_Struct_TS274 mOldTableSize;
	SCD_Struct_TS274 mNewTableSize;
} SCD_Struct_TS276;

typedef struct {
	__CFUUID mTableID;
	SCD_Struct_TS274 mMergedRange;
} SCD_Struct_TS277;

typedef struct {
	SCD_Struct_TS275 mFromReference;
	SCD_Struct_TS275 mToReference;
} SCD_Struct_TS278;

typedef union {
	TSCETectonicShift* mTectonicShift;
	SCD_Struct_TS272 mRemapSortMappingInfo;
	SCD_Struct_TS278 mRangeMovedInfo;
	__CFUUID mDeletedOwnerID;
	SCD_Struct_TS276 mTableResizedInfo;
	SCD_Struct_TS277 mCellMergedInfo;
	SCD_Struct_TS273 mTransposedInfo;
} SCD_Union_TS279;

typedef struct opaque_pthread_mutex_t {
	long __sig;
	char __opaque[40];
} opaque_pthread_mutex_t;

typedef struct {
	SCD_Struct_TS27 field1;
	1 field2;
	_ field3;
	_ field4;
	CFUUID field5;
} SCD_Struct_TS281;

typedef struct {
	unsigned formulaID : 24;
	unsigned reserved : 8;
} SCD_Struct_TS282;

typedef struct {
	SCD_Struct_TS27 field1;
	5 field2;
	int field3;
} SCD_Struct_TS283;

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	SCD_Struct_TS27 field4;
	1 field5;
	SCD_Struct_TS28 field6;
	5 field7;
	SCD_Struct_TS28 field8;
	3 field9;
	_ field10;
	_ field11;
	CFUUID) field12;
} SCD_Struct_TS284;

typedef struct TSCEEvaluationContext* TSCEEvaluationContextRef;

typedef struct TSUFormat {
	/*function pointer*/void* _vptr$TSUFormat;
	int mFormatType;
	BOOL mIsImplicitFormat;
	/*function pointer*/void* mData;
	SCD_Struct_TS46 mNumberStruct;
	SCD_Struct_TS27 mFractionFormatStruct;
	SCD_Struct_TS28 mBaseFormatStruct;
	SCD_Struct_TS47 mDateFormatStruct;
	SCD_Struct_TS48 mDurationFormatStruct;
	SCD_Struct_TS51 mCustomFormatStruct;
	SCD_Struct_TS49 mControlFormatStruct;
	SCD_Struct_TS50) mMultipleChoiceListFormatStruct;
	TSUCustomFormat mCustomFormat;
} TSUFormat;

typedef struct TSCENumberValue {
	/*function pointer*/void* _vptr$TSCEAbstractValue;
	double mDouble;
	int mBaseUnits[1];
	TSUFormat mFormat;
	char mIsUnitlessZero;
} TSCENumberValue;

typedef struct TSCEValue {
	unsigned mBuff[68];
	int mType;
} TSCEValue;

typedef struct {
	unsigned x;
	unsigned y;
	char xIsNegative;
	char yIsNegative;
} SCD_Struct_TS289;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> {
	__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > > {
	__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true> > __p3_;
} hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > >;

typedef struct hash_map<TSUColumnRowCoordinate, TSUColumnRowCoordinate, TSCECellCoordinateHash, TSCECellCoordinateEqual, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > {
	hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSCECellCoordinateEqual, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > __table_;
} hash_map<TSUColumnRowCoordinate, TSUColumnRowCoordinate, TSCECellCoordinateHash, TSCECellCoordinateEqual, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowCoordinate> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> {
	__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > > {
	__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > >;

typedef struct _hash_table<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true>, std::__1::allocator<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true> > __p3_;
} hash_table<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true>, std::__1::allocator<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > > > >;

typedef struct hash_map<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > >, TSCEFormulaOwnerIDHash, TSCEFormulaOwnerIDEqual, std::__1::allocator<std::__1::pair<const __CFUUID *const, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > > > > {
	hash_table<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, __gnu_cxx::__hash_map_hasher<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDHash, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, TSCEFormulaOwnerIDEqual, true>, std::__1::allocator<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > > > > __table_;
} hash_map<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > >, TSCEFormulaOwnerIDHash, TSCEFormulaOwnerIDEqual, std::__1::allocator<std::__1::pair<const __CFUUID *const, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > > > >;

typedef struct _hash_iterator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> {
	__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> __node_;
} hash_iterator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *>;

typedef struct _hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> > {
	hash_iterator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> __i_;
} hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::pair<const __CFUUID *, std::__1::vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > >, void *> *> >;

typedef struct _wrap_iter<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> *> {
	pair<TSUColumnRowCoordinate, TSCEFormula> __i;
} wrap_iter<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> *>;

typedef struct _compressed_pair<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > {
	pair<TSUColumnRowCoordinate, TSCEFormula> __first_;
} compressed_pair<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > >;

typedef struct vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > {
	pair<TSUColumnRowCoordinate, TSCEFormula> __begin_;
	pair<TSUColumnRowCoordinate, TSCEFormula> __end_;
	compressed_pair<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > > __end_cap_;
} vector<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSCEFormula> > >;

typedef struct _compressed_pair<TSUColumnRowCoordinate *, std::__1::allocator<TSUColumnRowCoordinate> > {
	/*function pointer*/void* __first_;
} compressed_pair<TSUColumnRowCoordinate *, std::__1::allocator<TSUColumnRowCoordinate> >;

typedef struct vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<TSUColumnRowCoordinate *, std::__1::allocator<TSUColumnRowCoordinate> > __end_cap_;
} vector<TSUColumnRowCoordinate, std::__1::allocator<TSUColumnRowCoordinate> >;

typedef struct {
	char field1;
	char field2;
} SCD_Struct_TS317;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> {
	__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true> > __p3_;
} hash_table<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *> > >;

typedef struct hash_map<unsigned short, TSCENamedReferenceTrieNode *, __gnu_cxx::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSCENamedReferenceTrieNode *> > > {
	hash_table<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::__hash_map_hasher<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, __gnu_cxx::hash<unsigned short>, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *>, std::__1::equal_to<unsigned short>, true>, std::__1::allocator<std::__1::pair<unsigned short, TSCENamedReferenceTrieNode *> > > __table_;
} hash_map<unsigned short, TSCENamedReferenceTrieNode *, __gnu_cxx::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSCENamedReferenceTrieNode *> > >;

typedef struct TSCENamedReferenceTrieNode {
	__CFDictionary mTrackedReferencesByOwnerID;
	hash_map<unsigned short, TSCENamedReferenceTrieNode *, __gnu_cxx::hash<unsigned short>, std::__1::equal_to<unsigned short>, std::__1::allocator<std::__1::pair<const unsigned short, TSCENamedReferenceTrieNode *> > > mChildren;
} TSCENamedReferenceTrieNode;

typedef struct {
	SCD_Struct_TS275 rangeReference;
	int rangeContext;
} SCD_Struct_TS329;

typedef struct {
	int referenceType;
	/*function pointer*/void* referenceUnion;
	SCD_Struct_TS281 cellReference;
	SCD_Struct_TS275 rangeReference;
	SCD_Struct_TS329 spanningRangeReference;
	__CFUUID) tableID;
} SCD_Struct_TS330;

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	SCD_Struct_TS27 field4;
	1 field5;
	SCD_Struct_TS28 field6;
	5 field7;
	SCD_Struct_TS32 field8;
	9 field9;
	_ field10;
	_ field11;
	CFUUID) field12;
} SCD_Struct_TS331;

typedef struct ThemeArchive* ThemeArchiveRef;

typedef struct {
	char field1;
	char field2;
	char field3;
	char field4;
	char field5;
	char field6;
	unsigned field7;
} SCD_Struct_TS333;

typedef struct tvec2<int> {
	/*function pointer*/void* ;
	int x;
	int r;
	i) s;
	/*function pointer*/void* ;
	int y;
	int g;
	i) t;
} tvec2<int>;

typedef struct tvec3<float> {
	/*function pointer*/void* ;
	float x;
	float r;
	f) s;
	/*function pointer*/void* ;
	float y;
	float g;
	f) t;
	/*function pointer*/void* ;
	float z;
	float b;
	f) p;
} tvec3<float>;

typedef struct tquat<float> {
	float x;
	float y;
	float z;
	float w;
} tquat<float>;

typedef struct tvec4<float> {
	/*function pointer*/void* ;
	float x;
	float r;
	f) s;
	/*function pointer*/void* ;
	float y;
	float g;
	f) t;
	/*function pointer*/void* ;
	float z;
	float b;
	f) p;
	/*function pointer*/void* ;
	float w;
	float a;
	f) q;
} tvec4<float>;

typedef struct tmat4x4<float> {
	tvec4<float> value[4];
} tmat4x4<float>;

typedef struct line<glm::detail::tvec3<float> > {
	tvec3<float> mPosition;
	tvec3<float> mDirection;
} line<glm::detail::tvec3<float> >;

typedef struct _compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> > {
	ResourceAttributeState __first_;
} compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> >;

typedef struct vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> > {
	ResourceAttributeState __begin_;
	ResourceAttributeState __end_;
	compressed_pair<TSCH3D::ResourceAttributeState *, std::__1::allocator<TSCH3D::ResourceAttributeState> > __end_cap_;
} vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> >;

typedef struct AttributeSpecs {
	unsigned stride;
	unsigned offset;
	unsigned components;
} AttributeSpecs;

typedef struct tvec3<int> {
	/*function pointer*/void* ;
	int x;
	int r;
	i) s;
	/*function pointer*/void* ;
	int y;
	int g;
	i) t;
	/*function pointer*/void* ;
	int z;
	int b;
	i) p;
} tvec3<int>;

typedef struct FramebufferAttributes {
	int type;
	int samples;
	int colorDataType;
	int colorFormat;
	int depthDataType;
	char linearFilter;
	char discardHint;
} FramebufferAttributes;

typedef struct tvec1<float> {
	/*function pointer*/void* ;
	float x;
	float r;
	f) s;
} tvec1<float>;

typedef struct box<glm::detail::tvec1<float> > {
	tvec1<float> mMin;
	tvec1<float> mMax;
} box<glm::detail::tvec1<float> >;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __first_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef const struct RenderElementInfo* RenderElementInfoRef;

typedef const struct ChartLabelsContainingLabelRenderInfo* ChartLabelsContainingLabelRenderInfoRef;

typedef struct ExternalLabelAttribute* ExternalLabelAttributeRef;

typedef struct ObjcSharedPtr<NSIndexSet> {
	NSIndexSet* mValue;
} ObjcSharedPtr<NSIndexSet>;

typedef struct ChartRepRenderIndexSet {
	TSCH3DChartRep* rep;
	char built;
	ObjcSharedPtr<NSIndexSet> series;
	int seriesIndex;
	ObjcSharedPtr<NSIndexSet> values;
	int currentChunk;
} ChartRepRenderIndexSet;

typedef struct ObjcSharedPtr<TSCH3DAnimationInterpolation> {
	TSCH3DAnimationInterpolation* mValue;
} ObjcSharedPtr<TSCH3DAnimationInterpolation>;

typedef struct ChartAnimationTimeRanges {
	box<glm::detail::tvec1<float> > elementsRange;
	box<glm::detail::tvec1<float> > valueLabelsRange;
	box<glm::detail::tvec1<float> > gridlinesRange;
	box<glm::detail::tvec1<float> > labelsRange;
	box<glm::detail::tvec1<float> > shadowBlendRange;
	char gridlinesEaseInEaseOut;
	ObjcSharedPtr<TSCH3DAnimationInterpolation> growPerElementInterpolation;
	char blendDynamicShadows;
	ObjcSharedPtr<TSCH3DAnimationInterpolation> labelsInterpolation;
	ObjcSharedPtr<TSCH3DAnimationInterpolation> valueLabelsInterpolation;
} ChartAnimationTimeRanges;

typedef struct GeometryArrays {
	unsigned offset;
	unsigned count;
	unsigned capoffset;
	unsigned capcount;
} GeometryArrays;

typedef struct StateStack<glm::detail::tmat4x4<float>, 8> {
	unsigned mIndex;
	tmat4x4<float> mCurrent;
	tmat4x4<float> mStack[8];
} StateStack<glm::detail::tmat4x4<float>, 8>;

typedef struct ObjcSharedPtr<NSSet> {
	NSSet* mValue;
} ObjcSharedPtr<NSSet>;

typedef struct ObjcSharedPtr<NSObject> {
	NSObject* mValue;
} ObjcSharedPtr<NSObject>;

typedef struct TextureSizeHint {
	int loadOptimizedMipmaps;
	tvec2<int> sizeLODHint;
} TextureSizeHint;

typedef struct TextureAttributes {
	int object;
	int format;
	char mipmap;
	char repeat;
	char nearest;
	int unit;
	TextureSizeHint textureSizeHint;
	char is3DTexture;
} TextureAttributes;

typedef struct array<TSCH3D::TextureAttributes, 8> {
	TextureAttributes __elems_[8];
} array<TSCH3D::TextureAttributes, 8>;

typedef struct array<SFUtility::ObjcSharedPtr<NSObject>, 8> {
	ObjcSharedPtr<NSObject> __elems_[8];
} array<SFUtility::ObjcSharedPtr<NSObject>, 8>;

typedef struct _compressed_pair<TSCH3D::ObjectState::Lookup *, std::__1::allocator<TSCH3D::ObjectState::Lookup> > {
	Lookup __first_;
} compressed_pair<TSCH3D::ObjectState::Lookup *, std::__1::allocator<TSCH3D::ObjectState::Lookup> >;

typedef struct vector<TSCH3D::ObjectState::Lookup, std::__1::allocator<TSCH3D::ObjectState::Lookup> > {
	Lookup __begin_;
	Lookup __end_;
	compressed_pair<TSCH3D::ObjectState::Lookup *, std::__1::allocator<TSCH3D::ObjectState::Lookup> > __end_cap_;
} vector<TSCH3D::ObjectState::Lookup, std::__1::allocator<TSCH3D::ObjectState::Lookup> >;

typedef struct ObjectState {
	ObjcSharedPtr<NSSet> mEffects;
	vector<TSCH3D::ObjectState::Lookup, std::__1::allocator<TSCH3D::ObjectState::Lookup> > mAttributes;
	array<SFUtility::ObjcSharedPtr<NSObject>, 8> mTextures;
	array<TSCH3D::TextureAttributes, 8> mTextureAttributes;
} ObjectState;

typedef struct StateStack<TSCH3D::ObjectState, 6> {
	unsigned mIndex;
	ObjectState mCurrent;
	ObjectState mStack[6];
} StateStack<TSCH3D::ObjectState, 6>;

typedef struct tvec2<float> {
	/*function pointer*/void* ;
	float x;
	float r;
	f) s;
	/*function pointer*/void* ;
	float y;
	float g;
	f) t;
} tvec2<float>;

typedef struct array<signed char, 8> {
	char __elems_[8];
} array<signed char, 8>;

typedef struct EnableClipDistances {
	array<signed char, 8> states;
} EnableClipDistances;

typedef struct RenderState {
	BOOL mBlend;
	int blendMode;
	BOOL depthTest;
	BOOL depthMask;
	BOOL culling;
	BOOL cullBack;
	BOOL polygonOffset;
	float polygonOffsetFactor;
	float polygonOffsetUnits;
	EnableClipDistances enableClipDistances;
} RenderState;

typedef struct box<glm::detail::tvec2<int> > {
	tvec2<int> mMin;
	tvec2<int> mMax;
} box<glm::detail::tvec2<int> >;

typedef struct box<glm::detail::tvec2<float> > {
	tvec2<float> mMin;
	tvec2<float> mMax;
} box<glm::detail::tvec2<float> >;

typedef struct _compressed_pair<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > > {
	box<glm::detail::tvec3<float> > __first_;
} compressed_pair<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > >;

typedef struct vector<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > > {
	box<glm::detail::tvec3<float> > __begin_;
	box<glm::detail::tvec3<float> > __end_;
	compressed_pair<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > > __end_cap_;
} vector<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > >;

typedef struct box<glm::detail::tvec3<float> > {
	tvec3<float> mMin;
	tvec3<float> mMax;
} box<glm::detail::tvec3<float> >;

typedef struct ObjectBounds {
	box<glm::detail::tvec3<float> > mBounds;
	box<glm::detail::tvec3<float> > mProjected;
	box<glm::detail::tvec3<float> > m2DProjected;
	vector<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::box<glm::detail::tvec3<float> > > > mBoxes;
} ObjectBounds;

typedef struct _compressed_pair<TSCH3D::BarElementInfo *, std::__1::allocator<TSCH3D::BarElementInfo> > {
	BarElementInfo __first_;
} compressed_pair<TSCH3D::BarElementInfo *, std::__1::allocator<TSCH3D::BarElementInfo> >;

typedef struct vector<TSCH3D::BarElementInfo, std::__1::allocator<TSCH3D::BarElementInfo> > {
	BarElementInfo __begin_;
	BarElementInfo __end_;
	compressed_pair<TSCH3D::BarElementInfo *, std::__1::allocator<TSCH3D::BarElementInfo> > __end_cap_;
} vector<TSCH3D::BarElementInfo, std::__1::allocator<TSCH3D::BarElementInfo> >;

typedef struct BarExtrusionCrossSectionDetails {
	float detail;
	float tension;
	float adaptiveThreshold;
	float creaseAngle;
	int crossType;
} BarExtrusionCrossSectionDetails;

typedef struct BarExtrusionSpineDetails {
	float bevelHeight;
	int bevelSlices;
	int stride;
	float creaseAngle;
} BarExtrusionSpineDetails;

typedef struct BarExtrusionDetails {
	BarExtrusionCrossSectionDetails crossSection;
	BarExtrusionSpineDetails spine;
} BarExtrusionDetails;

typedef struct array<TSCH3D::BarExtrusionDetails, 2> {
	BarExtrusionDetails __elems_[2];
} array<TSCH3D::BarExtrusionDetails, 2>;

typedef struct _compressed_pair<<anonymous>::Range *, std::__1::allocator<<anonymous>::Range> > {
	Range __first_;
} compressed_pair<<anonymous>::Range *, std::__1::allocator<<anonymous>::Range> >;

typedef struct vector<<anonymous>::Range, std::__1::allocator<<anonymous>::Range> > {
	Range __begin_;
	Range __end_;
	compressed_pair<<anonymous>::Range *, std::__1::allocator<<anonymous>::Range> > __end_cap_;
} vector<<anonymous>::Range, std::__1::allocator<<anonymous>::Range> >;

typedef struct _compressed_pair<TSCH3D::RenderElementInfo *, std::__1::allocator<TSCH3D::RenderElementInfo> > {
	RenderElementInfo __first_;
} compressed_pair<TSCH3D::RenderElementInfo *, std::__1::allocator<TSCH3D::RenderElementInfo> >;

typedef struct vector<TSCH3D::RenderElementInfo, std::__1::allocator<TSCH3D::RenderElementInfo> > {
	RenderElementInfo __begin_;
	RenderElementInfo __end_;
	compressed_pair<TSCH3D::RenderElementInfo *, std::__1::allocator<TSCH3D::RenderElementInfo> > __end_cap_;
} vector<TSCH3D::RenderElementInfo, std::__1::allocator<TSCH3D::RenderElementInfo> >;

typedef struct plane<glm::detail::tvec3<float> > {
	tvec3<float> mNormal;
	float mDistance;
} plane<glm::detail::tvec3<float> >;

typedef struct TSCH3DShaderType {
	unsigned mValue;
} TSCH3DShaderType;

typedef struct TSCH3DShaderVariableScopeType {
	unsigned mValue;
} TSCH3DShaderVariableScopeType;

typedef struct _compressed_pair<TSCH3DShaderVariableScopeType *, std::__1::allocator<TSCH3DShaderVariableScopeType> > {
	TSCH3DShaderVariableScopeType __first_;
} compressed_pair<TSCH3DShaderVariableScopeType *, std::__1::allocator<TSCH3DShaderVariableScopeType> >;

typedef struct vector<TSCH3DShaderVariableScopeType, std::__1::allocator<TSCH3DShaderVariableScopeType> > {
	TSCH3DShaderVariableScopeType __begin_;
	TSCH3DShaderVariableScopeType __end_;
	compressed_pair<TSCH3DShaderVariableScopeType *, std::__1::allocator<TSCH3DShaderVariableScopeType> > __end_cap_;
} vector<TSCH3DShaderVariableScopeType, std::__1::allocator<TSCH3DShaderVariableScopeType> >;

typedef struct array<TSCH3DShaderVariableScopeType, 2> {
	TSCH3DShaderVariableScopeType __elems_[2];
} array<TSCH3DShaderVariableScopeType, 2>;

typedef struct TSCH3DShaderVariableScopes {
	array<TSCH3DShaderVariableScopeType, 2> mScopes;
} TSCH3DShaderVariableScopes;

typedef struct MaterialShaderVariables {
	TSCH3DShaderVariable* texture;
	TSCH3DShaderVariable* intensity;
	TSCH3DShaderVariable* factor;
	TSCH3DShaderVariable* textureColor;
	TSCH3DShaderVariable* color;
	TSCH3DShaderVariable* modulation;
	TSCH3DShaderVariable* texcoords;
	TSCH3DShaderVariable* textureMatrix;
} MaterialShaderVariables;

typedef struct array<glm::detail::tmat4x4<float>, 2> {
	tmat4x4<float> __elems_[2];
} array<glm::detail::tmat4x4<float>, 2>;

typedef struct LightingPackageShaderEffectState {
	array<glm::detail::tmat4x4<float>, 2> transforms;
} LightingPackageShaderEffectState;

typedef struct {
	char forceOmitLegend;
	char forceOmitTitle;
	char forceOmitAxisTitle;
	char enable3DTightBounds;
	char enable3DScaledDepthBounds;
	char enable3DSageMaxDepthRatio;
	unsigned max3DLimitingSeries;
} SCD_Struct_TS398;

typedef struct ChartSceneInfo {
	TSCH3DScene* scene;
	TSCHChartInfo* chartInfo;
	TSCHChartType* chartType;
	TSCHChartSeriesType* seriesType;
	SCD_Struct_TS398 layoutSettings;
} ChartSceneInfo;

typedef struct _compressed_pair<glm::detail::tvec2<int> *, std::__1::allocator<glm::detail::tvec2<int> > > {
	tvec2<int> __first_;
} compressed_pair<glm::detail::tvec2<int> *, std::__1::allocator<glm::detail::tvec2<int> > >;

typedef struct vector<glm::detail::tvec2<int>, std::__1::allocator<glm::detail::tvec2<int> > > {
	tvec2<int> __begin_;
	tvec2<int> __end_;
	compressed_pair<glm::detail::tvec2<int> *, std::__1::allocator<glm::detail::tvec2<int> > > __end_cap_;
} vector<glm::detail::tvec2<int>, std::__1::allocator<glm::detail::tvec2<int> > >;

typedef struct DataBufferInfo {
	int componentType;
	unsigned components;
	unsigned count;
	unsigned byteSize;
	unsigned componentByteSize;
	unsigned elementByteSize;
} DataBufferInfo;

typedef struct BarExtrusionSetting {
	float size;
	char hasTopBevel;
	char hasBottomBevel;
	char isCylindrical;
	char isStackedBar;
	BarExtrusionDetails details;
} BarExtrusionSetting;

typedef struct _compressed_pair<glm::detail::tvec3<float> *, std::__1::allocator<glm::detail::tvec3<float> > > {
	tvec3<float> __first_;
} compressed_pair<glm::detail::tvec3<float> *, std::__1::allocator<glm::detail::tvec3<float> > >;

typedef struct vector<glm::detail::tvec3<float>, std::__1::allocator<glm::detail::tvec3<float> > > {
	tvec3<float> __begin_;
	tvec3<float> __end_;
	compressed_pair<glm::detail::tvec3<float> *, std::__1::allocator<glm::detail::tvec3<float> > > __end_cap_;
} vector<glm::detail::tvec3<float>, std::__1::allocator<glm::detail::tvec3<float> > >;

typedef struct _compressed_pair<glm::detail::tvec2<float> *, std::__1::allocator<glm::detail::tvec2<float> > > {
	tvec2<float> __first_;
} compressed_pair<glm::detail::tvec2<float> *, std::__1::allocator<glm::detail::tvec2<float> > >;

typedef struct vector<glm::detail::tvec2<float>, std::__1::allocator<glm::detail::tvec2<float> > > {
	tvec2<float> __begin_;
	tvec2<float> __end_;
	compressed_pair<glm::detail::tvec2<float> *, std::__1::allocator<glm::detail::tvec2<float> > > __end_cap_;
} vector<glm::detail::tvec2<float>, std::__1::allocator<glm::detail::tvec2<float> > >;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __first_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct DataBuffer2DDimension {
	tvec2<int> mSize;
	unsigned mComponents;
	char mHasLevels;
} DataBuffer2DDimension;

typedef struct _compressed_pair<glm::detail::tvec1<float> *, std::__1::allocator<glm::detail::tvec1<float> > > {
	tvec1<float> __first_;
} compressed_pair<glm::detail::tvec1<float> *, std::__1::allocator<glm::detail::tvec1<float> > >;

typedef struct vector<glm::detail::tvec1<float>, std::__1::allocator<glm::detail::tvec1<float> > > {
	tvec1<float> __begin_;
	tvec1<float> __end_;
	compressed_pair<glm::detail::tvec1<float> *, std::__1::allocator<glm::detail::tvec1<float> > > __end_cap_;
} vector<glm::detail::tvec1<float>, std::__1::allocator<glm::detail::tvec1<float> > >;

typedef struct _compressed_pair<glm::detail::tvec4<float> *, std::__1::allocator<glm::detail::tvec4<float> > > {
	tvec4<float> __first_;
} compressed_pair<glm::detail::tvec4<float> *, std::__1::allocator<glm::detail::tvec4<float> > >;

typedef struct vector<glm::detail::tvec4<float>, std::__1::allocator<glm::detail::tvec4<float> > > {
	tvec4<float> __begin_;
	tvec4<float> __end_;
	compressed_pair<glm::detail::tvec4<float> *, std::__1::allocator<glm::detail::tvec4<float> > > __end_cap_;
} vector<glm::detail::tvec4<float>, std::__1::allocator<glm::detail::tvec4<float> > >;

typedef struct _compressed_pair<TSCH3D::PODType<unsigned char> *, std::__1::allocator<TSCH3D::PODType<unsigned char> > > {
	PODType<unsigned char> __first_;
} compressed_pair<TSCH3D::PODType<unsigned char> *, std::__1::allocator<TSCH3D::PODType<unsigned char> > >;

typedef struct vector<TSCH3D::PODType<unsigned char>, std::__1::allocator<TSCH3D::PODType<unsigned char> > > {
	PODType<unsigned char> __begin_;
	PODType<unsigned char> __end_;
	compressed_pair<TSCH3D::PODType<unsigned char> *, std::__1::allocator<TSCH3D::PODType<unsigned char> > > __end_cap_;
} vector<TSCH3D::PODType<unsigned char>, std::__1::allocator<TSCH3D::PODType<unsigned char> > >;

typedef struct _compressed_pair<TSCH3D::PODType<unsigned short> *, std::__1::allocator<TSCH3D::PODType<unsigned short> > > {
	PODType<unsigned short> __first_;
} compressed_pair<TSCH3D::PODType<unsigned short> *, std::__1::allocator<TSCH3D::PODType<unsigned short> > >;

typedef struct vector<TSCH3D::PODType<unsigned short>, std::__1::allocator<TSCH3D::PODType<unsigned short> > > {
	PODType<unsigned short> __begin_;
	PODType<unsigned short> __end_;
	compressed_pair<TSCH3D::PODType<unsigned short> *, std::__1::allocator<TSCH3D::PODType<unsigned short> > > __end_cap_;
} vector<TSCH3D::PODType<unsigned short>, std::__1::allocator<TSCH3D::PODType<unsigned short> > >;

typedef struct _compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > {
	char* __first_;
} compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >;

typedef struct vector<unsigned char, std::__1::allocator<unsigned char> > {
	char* __begin_;
	char* __end_;
	compressed_pair<unsigned char *, std::__1::allocator<unsigned char> > __end_cap_;
} vector<unsigned char, std::__1::allocator<unsigned char> >;

typedef struct DataBuffer3DDimension {
	tvec3<int> mSize;
	unsigned mComponents;
} DataBuffer3DDimension;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, void *> > >;

typedef struct _tree<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true>, std::__1::allocator<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds> > > {
	__tree_node<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true> > __pair3_;
} tree<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true>, std::__1::allocator<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds> > >;

typedef struct map<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds, std::__1::less<TSCH3D::SceneObjectSharedPointer>, std::__1::allocator<std::__1::pair<const TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds> > > {
	tree<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::__map_value_compare<TSCH3D::SceneObjectSharedPointer, std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds>, std::__1::less<TSCH3D::SceneObjectSharedPointer>, true>, std::__1::allocator<std::__1::__value_type<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds> > > __tree_;
} map<TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds, std::__1::less<TSCH3D::SceneObjectSharedPointer>, std::__1::allocator<std::__1::pair<const TSCH3D::SceneObjectSharedPointer, TSCH3D::ActiveLabelsTypeBounds> > >;

typedef struct ResizeData {
	tvec2<float> size;
	tvec3<float> scale;
	tvec2<float> delta;
	tvec2<float> steps;
	tvec2<float> unrotatedSize;
	tvec2<float> chartOnlySize;
} ResizeData;

typedef struct tvec2<bool> {
	/*function pointer*/void* ;
	BOOL x;
	BOOL r;
	B) s;
	/*function pointer*/void* ;
	BOOL y;
	BOOL g;
	B) t;
} tvec2<bool>;

typedef struct ChartProjectedBoundsSpaces {
	box<glm::detail::tvec2<float> > mChart;
	box<glm::detail::tvec2<float> > mOrient;
	box<glm::detail::tvec2<float> > mDrawing;
	box<glm::detail::tvec2<float> > mLayout;
	box<glm::detail::tvec2<float> > mLayoutInPage;
	box<glm::detail::tvec2<float> > mBodyLayout;
	box<glm::detail::tvec2<float> > mBodyLayoutInPage;
	box<glm::detail::tvec2<float> > mContainingViewport;
} ChartProjectedBoundsSpaces;

typedef struct TSCH3DChartSceneAreaLayoutItemCacheValues {
	tvec4<float> infoChartScale;
	tvec2<int> containingViewport;
	tvec2<float> chartBodyLayoutOffsetInChartAreaLayoutSpace;
	CGSize layoutSize;
	CGSize requestLayoutSize;
	CGSize chartBodyLayoutSize;
	CGSize requestChartBodyLayoutSize;
	tvec2<int> modelSize;
	SCD_Struct_TS398 layoutSettings;
	char forcedValid;
} TSCH3DChartSceneAreaLayoutItemCacheValues;

typedef struct CGColorSpace* CGColorSpaceRef;

typedef struct tmat3x3<float> {
	tvec3<float> value[3];
} tmat3x3<float>;

typedef struct LabelRenderInfo {
	tvec2<float> sampledLabelSize;
	tvec2<float> sampledLabelFullSize;
	tvec2<float> sampledLabelRenderOffset;
	tvec2<float> sampledAlignmentPadding;
} LabelRenderInfo;

typedef struct ValueEnumerator {
	char mForward;
	unsigned mIndex;
	unsigned mMax;
	double mValue;
} ValueEnumerator;

typedef struct _compressed_pair<double *, std::__1::allocator<double> > {
	double __first_;
} compressed_pair<double *, std::__1::allocator<double> >;

typedef struct vector<double, std::__1::allocator<double> > {
	double __begin_;
	double __end_;
	compressed_pair<double *, std::__1::allocator<double> > __end_cap_;
} vector<double, std::__1::allocator<double> >;

typedef struct _compressed_pair<TSCH3D::AxisLabelCacheItem *, std::__1::allocator<TSCH3D::AxisLabelCacheItem> > {
	AxisLabelCacheItem __first_;
} compressed_pair<TSCH3D::AxisLabelCacheItem *, std::__1::allocator<TSCH3D::AxisLabelCacheItem> >;

typedef struct vector<TSCH3D::AxisLabelCacheItem, std::__1::allocator<TSCH3D::AxisLabelCacheItem> > {
	AxisLabelCacheItem __begin_;
	AxisLabelCacheItem __end_;
	compressed_pair<TSCH3D::AxisLabelCacheItem *, std::__1::allocator<TSCH3D::AxisLabelCacheItem> > __end_cap_;
} vector<TSCH3D::AxisLabelCacheItem, std::__1::allocator<TSCH3D::AxisLabelCacheItem> >;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_TS438;

typedef struct {
	double field1;
	double field2;
	double field3;
	unsigned field4;
} SCD_Struct_TS439;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_TS440;

typedef struct {
	CGAffineTransform field1;
	CGPoint field2;
} SCD_Struct_TS441;

typedef struct CGLayer* CGLayerRef;

typedef struct {
	unsigned field1;
	/*function pointer*/void* field2;
	void field3;
} SCD_Struct_TS443;

typedef struct TSCHLegendAnchorLine {
	CGPoint normal;
	float distance;
} TSCHLegendAnchorLine;

typedef struct NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct __CFAttributedString* CFAttributedStringRef;

typedef struct {
	CGPoint field1;
	float field2;
	char field3;
	unsigned field4;
} SCD_Struct_TS447;

typedef struct {
	CGPoint field1;
	char field2;
} SCD_Struct_TS448;

typedef struct {
	id field1;
	id field2;
	CGRect field3;
	id field4;
	id field5;
} SCD_Struct_TS449;

typedef struct {
	CGPoint field1;
	CGPoint field2;
} SCD_Struct_TS450;

typedef struct bitset<5> {
	unsigned __first_;
} bitset<5>;

typedef struct array<NSObject *, 8> {
	NSObject* __elems_[8];
} array<NSObject *, 8>;

typedef struct ObjectStateMatchObject {
	ObjcSharedPtr<NSSet> mEffects;
	vector<TSCH3D::ResourceAttributeState, std::__1::allocator<TSCH3D::ResourceAttributeState> > mAttributes;
	array<TSCH3D::TextureAttributes, 8> mTextureAttributes;
	array<NSObject *, 8> mTextures;
} ObjectStateMatchObject;

typedef struct TSCH3DPrecalculatedLayoutCacheType {
	int platform;
	int target;
	char isLandscape;
} TSCH3DPrecalculatedLayoutCacheType;

typedef struct _compressed_pair<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > > {
	plane<glm::detail::tvec3<float> > __first_;
} compressed_pair<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > >;

typedef struct vector<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > > {
	plane<glm::detail::tvec3<float> > __begin_;
	plane<glm::detail::tvec3<float> > __end_;
	compressed_pair<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > *, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > > __end_cap_;
} vector<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> >, std::__1::allocator<TSCH3D::Math::ExtendedTypesDetails::plane<glm::detail::tvec3<float> > > >;

typedef struct UpdatableValue<unsigned int> {
	unsigned value;
} UpdatableValue<unsigned int>;

typedef struct GLSingleState {
	unsigned target;
	UpdatableValue<unsigned int> handle;
} GLSingleState;

typedef struct array<TSCH3D::GLSingleState, 2> {
	GLSingleState __elems_[2];
} array<TSCH3D::GLSingleState, 2>;

typedef struct BufferStates {
	array<TSCH3D::GLSingleState, 2> states;
} BufferStates;

typedef struct array<TSCH3D::GLSingleState, 4> {
	GLSingleState __elems_[4];
} array<TSCH3D::GLSingleState, 4>;

typedef struct TextureUnitStates {
	UpdatableValue<unsigned int> activeTexture;
	array<TSCH3D::GLSingleState, 4> states;
} TextureUnitStates;

typedef struct EdgeDetectionParameters {
	char detectSilhouetteEdges;
	char detectSharpEdges;
	float sharpEdgeThreshold;
} EdgeDetectionParameters;

typedef struct {
	int x;
	int y;
	int width;
	int height;
} SCD_Struct_TS464;

typedef struct CGShading* CGShadingRef;

typedef struct CGAffineTransform {
	float a;
	float b;
	float c;
	float d;
	float tx;
	float ty;
} CGAffineTransform;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct CGPDFDocument* CGPDFDocumentRef;

typedef struct {
	int field1;
	int field2;
	/*function pointer*/void* field3;
} SCD_Struct_TS469;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_TS470;

typedef struct {
	int field1;
	unsigned field2;
	char field3;
	char* field4;
	unsigned field5;
	unsigned field6;
	unsigned field7;
	char field8;
	_ field9;
	NSRange field10;
	unsigned field11;
} SCD_Struct_TS471;

typedef struct {
	float x;
	float y;
	float z;
} SCD_Struct_TS472;

typedef struct CATransform3D {
	float m11;
	float m12;
	float m13;
	float m14;
	float m21;
	float m22;
	float m23;
	float m24;
	float m31;
	float m32;
	float m33;
	float m34;
	float m41;
	float m42;
	float m43;
	float m44;
} CATransform3D;

typedef struct {
	NSRange topLeft;
	NSRange bottomRight;
} SCD_Struct_TS474;

typedef struct {
	unsigned field1;
	int field2;
} SCD_Struct_TS475;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct opaque_pthread_rwlock_t {
	long __sig;
	char __opaque[124];
} opaque_pthread_rwlock_t;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct TSKThreadInfo {
	_opaque_pthread_t threadId;
	unsigned count;
} TSKThreadInfo;

typedef struct TSKThreadTicketInfo {
	unsigned useCount;
	id ticket;
} TSKThreadTicketInfo;

typedef struct TSSPropertyStore* TSSPropertyStoreRef;

typedef struct {
	unsigned short field1;
	unsigned short field2;
} SCD_Struct_TS482;

typedef struct {
	SCD_Struct_TS27 field1;
	1 field2;
	SCD_Struct_TS48 field3;
	2 field4;
} SCD_Struct_TS483;

typedef struct {
	TSTTableStyle* tableStyle;
	TSTCellStyle* bodyCellStyle;
	TSTCellStyle* headerRowCellStyle;
	TSTCellStyle* headerColumnCellStyle;
	TSTCellStyle* footerRowCellStyle;
	TSWPParagraphStyle* bodyTextStyle;
	TSWPParagraphStyle* headerRowTextStyle;
	TSWPParagraphStyle* headerColumnTextStyle;
	TSWPParagraphStyle* footerRowTextStyle;
	TSWPParagraphStyle* tableNameStyle;
	TSWPShapeStyle* tableNameShapeStyle;
} SCD_Struct_TS484;

typedef struct TSTDefaultCellBlock {
	TSTCell* defaultBodyCell;
	TSTCell* defaultHeaderRowCell;
	TSTCell* defaultHeaderColumnCell;
	TSTCell* defaultFooterRowCell;
} TSTDefaultCellBlock;

typedef struct _compressed_pair<std::__1::pair<TSUColumnRowCoordinate, float> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, float> > > {
	pair<TSUColumnRowCoordinate, float> __first_;
} compressed_pair<std::__1::pair<TSUColumnRowCoordinate, float> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, float> > >;

typedef struct vector<std::__1::pair<TSUColumnRowCoordinate, float>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, float> > > {
	pair<TSUColumnRowCoordinate, float> __begin_;
	pair<TSUColumnRowCoordinate, float> __end_;
	compressed_pair<std::__1::pair<TSUColumnRowCoordinate, float> *, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, float> > > __end_cap_;
} vector<std::__1::pair<TSUColumnRowCoordinate, float>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, float> > >;

typedef struct {
	SCD_Struct_TS27 field1;
	1 field2;
	SCD_Struct_TS27 field3;
	1 field4;
	id field5;
	TSTCellStorage field6;
	SCD_Struct_TS48 field7;
	3 field8;
	char field9;
	char field10;
	char field11;
	char field12;
	char field13;
} SCD_Struct_TS488;

typedef struct {
	float tableNameHeight;
	CGSize scaleToFitParent;
	CGSize scaleToFitEnclosingTextColumn;
} SCD_Struct_TS489;

typedef struct {
	unsigned short numberOfColumns;
	unsigned short numberOfRows;
} SCD_Struct_TS490;

typedef struct {
	SCD_Struct_TS271 origin;
	SCD_Struct_TS490 size;
} SCD_Struct_TS491;

typedef struct {
	unsigned mID;
	NSString* mString;
} SCD_Struct_TS492;

typedef struct {
	unsigned mExplicitFormatFlags : 16;
	unsigned mCurrentCellFormatID;
	SCD_Struct_TS52 mCurrentCellFormat;
	unsigned mNumberFormatID;
	TSUFormatObject* mNumberFormatRef;
	unsigned mCurrencyFormatID;
	TSUFormatObject* mCurrencyFormatRef;
	unsigned mDurationFormatID;
	TSUFormatObject* mDurationFormatRef;
	unsigned mDateFormatID;
	TSUFormatObject* mDateFormatRef;
	unsigned mControlFormatID;
	TSUFormatObject* mControlFormatRef;
	unsigned mCustomFormatID;
	TSUFormatObject* mCustomFormatRef;
	unsigned mBaseFormatID;
	TSUFormatObject* mBaseFormatRef;
	unsigned mMultipleChoiceListFormatID;
	TSUFormatObject* mMultipleChoiceListFormatRef;
} SCD_Struct_TS493;

typedef struct {
	unsigned mUnused : 8;
	unsigned mValueType : 8;
	unsigned mCellFlags : 16;
	/*function pointer*/void* mValue;
	double mDouble;
	SCD_Struct_TS492 mString;
	id mDate;
	) NSDate;
	unsigned mCellStyleID;
	id mCellStyle;
	 TSTCellStyle;
	unsigned mTextStyleID;
	id mTextStyle;
	 TSWPParagraphStyle;
	unsigned mConditionalStyleSetID;
	id mConditionalStyleSet;
	 TSTConditionalStyleSet;
	unsigned char mConditionalAppliedRule;
	unsigned mFormulaID;
	TSCEFormula mFormula;
	unsigned mFormulaErrorID;
	id mFormulaError;
	 TSWPStorage;
	unsigned mRichTextPayloadID;
	id mRichTextPayload;
	 TSTRichTextPayload;
	unsigned mCommentStorageID;
	id mCommentStorage;
	 TSDCommentStorage;
	unsigned mImportWarningSetID;
	id mImportWarningSet;
	 TSTImportWarningSet;
	SCD_Struct_TS493 mCellFormats;
	unsigned char mStrokePresetNumber;
} SCD_Struct_TS494;

typedef struct {
	SCD_Struct_TS271 mPreviousCellID;
	SCD_Struct_TS271 mCellID;
	TSTCell* mCell;
	TSTCellStorage mCellRef;
	SCD_Struct_TS491 mMergeRange;
	char mStyleOnly;
	char mCommentStorageOnly;
	char mHidden;
	char mHiddenRow;
	char mHiddenColumn;
} SCD_Struct_TS495;

typedef struct TSCEVectorIndexPair {
	unsigned short column;
	unsigned short row;
} TSCEVectorIndexPair;

typedef struct TSTDurationWrapper {
	double timeInterval;
	SCD_Struct_TS48 durationFormat;
} TSTDurationWrapper;

typedef struct _hash_iterator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> {
	__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> __node_;
} hash_iterator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *>;

typedef struct _hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > {
	hash_iterator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> __i_;
} hash_map_iterator<std::__1::__hash_iterator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true> >;

typedef struct _hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true> > __p3_;
} hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > >;

typedef struct hash_map<TSUColumnRowCoordinate, TSUColumnRowCoordinate, TSTCellIDHasher, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > {
	hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowCoordinate> > > __table_;
} hash_map<TSUColumnRowCoordinate, TSUColumnRowCoordinate, TSTCellIDHasher, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowCoordinate> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> >;

typedef struct _compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true> >;

typedef struct _compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true> > {
	float __first_;
} compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> {
	__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > > {
	__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, void *> > > __p1_;
	compressed_pair<unsigned long, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true> > __p2_;
	compressed_pair<float, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true> > __p3_;
} hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize> > >;

typedef struct hash_map<TSUColumnRowCoordinate, TSUColumnRowSize, TSTCellIDHasher, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowSize> > > {
	hash_table<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, __gnu_cxx::__hash_map_hasher<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, TSTCellIDHasher, true>, __gnu_cxx::__hash_map_equal<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize>, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::pair<TSUColumnRowCoordinate, TSUColumnRowSize> > > __table_;
} hash_map<TSUColumnRowCoordinate, TSUColumnRowSize, TSTCellIDHasher, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, TSUColumnRowSize> > >;

typedef struct _compressed_pair<TSTWidthHeightCache_Private::WHCCol *, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> > {
	WHCCol __first_;
} compressed_pair<TSTWidthHeightCache_Private::WHCCol *, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> >;

typedef struct vector<TSTWidthHeightCache_Private::WHCCol, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> > {
	WHCCol __begin_;
	WHCCol __end_;
	compressed_pair<TSTWidthHeightCache_Private::WHCCol *, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> > __end_cap_;
} vector<TSTWidthHeightCache_Private::WHCCol, std::__1::allocator<TSTWidthHeightCache_Private::WHCCol> >;

typedef struct _compressed_pair<TSTWidthHeightCache_Private::WHCRow *, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> > {
	WHCRow __first_;
} compressed_pair<TSTWidthHeightCache_Private::WHCRow *, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> >;

typedef struct vector<TSTWidthHeightCache_Private::WHCRow, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> > {
	WHCRow __begin_;
	WHCRow __end_;
	compressed_pair<TSTWidthHeightCache_Private::WHCRow *, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> > __end_cap_;
} vector<TSTWidthHeightCache_Private::WHCRow, std::__1::allocator<TSTWidthHeightCache_Private::WHCRow> >;

typedef struct _compressed_pair<std::__1::pair<unsigned short, bool> *, std::__1::allocator<std::__1::pair<unsigned short, bool> > > {
	pair<unsigned short, bool> __first_;
} compressed_pair<std::__1::pair<unsigned short, bool> *, std::__1::allocator<std::__1::pair<unsigned short, bool> > >;

typedef struct vector<std::__1::pair<unsigned short, bool>, std::__1::allocator<std::__1::pair<unsigned short, bool> > > {
	pair<unsigned short, bool> __begin_;
	pair<unsigned short, bool> __end_;
	compressed_pair<std::__1::pair<unsigned short, bool> *, std::__1::allocator<std::__1::pair<unsigned short, bool> > > __end_cap_;
} vector<std::__1::pair<unsigned short, bool>, std::__1::allocator<std::__1::pair<unsigned short, bool> > >;

typedef struct _compressed_pair<TSUColumnRowRect *, std::__1::allocator<TSUColumnRowRect> > {
	/*function pointer*/void* __first_;
} compressed_pair<TSUColumnRowRect *, std::__1::allocator<TSUColumnRowRect> >;

typedef struct vector<TSUColumnRowRect, std::__1::allocator<TSUColumnRowRect> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<TSUColumnRowRect *, std::__1::allocator<TSUColumnRowRect> > __end_cap_;
} vector<TSUColumnRowRect, std::__1::allocator<TSUColumnRowRect> >;

typedef struct _compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > {
	unsigned short __first_;
} compressed_pair<unsigned short *, std::__1::allocator<unsigned short> >;

typedef struct vector<unsigned short, std::__1::allocator<unsigned short> > {
	unsigned short __begin_;
	unsigned short __end_;
	compressed_pair<unsigned short *, std::__1::allocator<unsigned short> > __end_cap_;
} vector<unsigned short, std::__1::allocator<unsigned short> >;

typedef struct TSTSimpleRange {
	int origin;
	unsigned length;
} TSTSimpleRange;

typedef struct _compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> > {
	TSTStrokeLayerRun __first_;
} compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> >;

typedef struct vector<TSTStrokeLayerRun, std::__1::allocator<TSTStrokeLayerRun> > {
	TSTStrokeLayerRun __begin_;
	TSTStrokeLayerRun __end_;
	compressed_pair<TSTStrokeLayerRun *, std::__1::allocator<TSTStrokeLayerRun> > __end_cap_;
} vector<TSTStrokeLayerRun, std::__1::allocator<TSTStrokeLayerRun> >;

typedef struct {
	char field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
	float field7;
} SCD_Struct_TS527;

typedef struct _tree_const_iterator<TSTMergeRangeElem, std::__1::__tree_node<TSTMergeRangeElem, void *> *, int> {
	__tree_node<TSTMergeRangeElem, void *> __ptr_;
} tree_const_iterator<TSTMergeRangeElem, std::__1::__tree_node<TSTMergeRangeElem, void *> *, int>;

typedef struct _compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > {
	unsigned __first_;
} compressed_pair<unsigned int *, std::__1::allocator<unsigned int> >;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int> > {
	unsigned __begin_;
	unsigned __end_;
	compressed_pair<unsigned int *, std::__1::allocator<unsigned int> > __end_cap_;
} vector<unsigned int, std::__1::allocator<unsigned int> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<unsigned long> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct vector<bool, std::__1::allocator<bool> > {
	unsigned long __begin_;
	unsigned __size_;
	compressed_pair<unsigned long, std::__1::allocator<unsigned long> > __cap_alloc_;
} vector<bool, std::__1::allocator<bool> >;

typedef struct TSCEFormulaTranslationFlags {
	unsigned mExcelImportTranslation : 1;
	unsigned mNumberToDateCoercionRemovalTranslation : 1;
} TSCEFormulaTranslationFlags;

typedef struct TSCEFormula {
	TSCEASTNodeArray mASTNodeArray;
	TSCEFormulaTranslationFlags mTranslationFlags;
} TSCEFormula;

typedef struct {
	unsigned char byte0;
	unsigned char byte1;
	unsigned char byte2;
	unsigned char byte3;
	unsigned char byte4;
	unsigned char byte5;
	unsigned char byte6;
	unsigned char byte7;
	unsigned char byte8;
	unsigned char byte9;
	unsigned char byte10;
	unsigned char byte11;
	unsigned char byte12;
	unsigned char byte13;
	unsigned char byte14;
	unsigned char byte15;
} SCD_Struct_TS535;

typedef struct {
	unsigned row : 21;
	unsigned column : 15;
	unsigned rowIsAbsolute : 1;
	unsigned columnIsAbsolute : 1;
	SCD_Struct_TS535 tableID;
} SCD_Struct_TS536;

typedef struct {
	unsigned row : 21;
	unsigned rowIsAbsolute : 1;
	SCD_Struct_TS535 tableID;
} SCD_Struct_TS537;

typedef struct {
	unsigned column : 15;
	unsigned columnIsAbsolute : 1;
	SCD_Struct_TS535 tableID;
} SCD_Struct_TS538;

typedef struct {
	double value;
	int units;
} SCD_Struct_TS539;

typedef struct {
	unsigned char column;
	unsigned short row;
	__CFUUID tableID;
	char columnIsAbsolute;
	char rowIsAbsolute;
} SCD_Struct_TS540;

typedef struct {
	int type;
	/*function pointer*/void* ;
	NSNumber* number;
	NSDate* date;
	NSString* string;
	SCD_Struct_TS540 reference;
	SCD_Struct_TS539) duration;
} SCD_Struct_TS541;

typedef struct {
	int( field1;
	/*function pointer*/void* field2;
	= field3;
	id field4;
	id field5;
	id field6;
	SCD_Struct_TS53 field7;
	0 field8;
	SCD_Struct_TS54 field9;
	9) field10;
} SCD_Struct_TS542;

typedef struct {
	unsigned field1 : 21;
	unsigned field2 : 15;
	5 field3;
	unsigned field4 : 1;
	unsigned field5 : 1;
	SCD_Struct_TS53 field6;
	5 field7;
} SCD_Struct_TS543;

typedef struct {
	unsigned field1 : 15;
	5 field2;
	unsigned field3 : 1;
	SCD_Struct_TS53 field4;
	5 field5;
} SCD_Struct_TS544;

typedef struct _compressed_pair<unsigned long, TSTCellRangeRowMajorLess> {
	unsigned long __first_;
} compressed_pair<unsigned long, TSTCellRangeRowMajorLess>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUColumnRowRect, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUColumnRowRect, void *> > >;

typedef struct _tree<TSUColumnRowRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUColumnRowRect> > {
	__tree_node<TSUColumnRowRect, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUColumnRowRect, void *> > > __pair1_;
	compressed_pair<unsigned long, TSTCellRangeRowMajorLess> __pair3_;
} tree<TSUColumnRowRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUColumnRowRect> >;

typedef struct set<TSUColumnRowRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUColumnRowRect> > {
	tree<TSUColumnRowRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUColumnRowRect> > __tree_;
} set<TSUColumnRowRect, TSTCellRangeRowMajorLess, std::__1::allocator<TSUColumnRowRect> >;

typedef struct _compressed_pair<unsigned long, TSTCellRangeColumnMajorLess> {
	unsigned long __first_;
} compressed_pair<unsigned long, TSTCellRangeColumnMajorLess>;

typedef struct _tree<TSUColumnRowRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUColumnRowRect> > {
	__tree_node<TSUColumnRowRect, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSUColumnRowRect, void *> > > __pair1_;
	compressed_pair<unsigned long, TSTCellRangeColumnMajorLess> __pair3_;
} tree<TSUColumnRowRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUColumnRowRect> >;

typedef struct set<TSUColumnRowRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUColumnRowRect> > {
	tree<TSUColumnRowRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUColumnRowRect> > __tree_;
} set<TSUColumnRowRect, TSTCellRangeColumnMajorLess, std::__1::allocator<TSUColumnRowRect> >;

typedef struct _compressed_pair<unsigned long, TSTColumnOrRowMapTgtLess> {
	unsigned long __first_;
} compressed_pair<unsigned long, TSTColumnOrRowMapTgtLess>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > >;

typedef struct _tree<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> > {
	__tree_node<TSTColumnOrRowMap, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<TSTColumnOrRowMap, void *> > > __pair1_;
	compressed_pair<unsigned long, TSTColumnOrRowMapTgtLess> __pair3_;
} tree<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >;

typedef struct set<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> > {
	tree<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> > __tree_;
} set<TSTColumnOrRowMap, TSTColumnOrRowMapTgtLess, std::__1::allocator<TSTColumnOrRowMap> >;

typedef struct TSTImportWarningSetCellWarningFlags {
	unsigned mCondFormatAboveAvgEqualAverageImportWarning : 1;
	unsigned mCondFormatAboveAvgStdDevImportWarning : 1;
	unsigned mCondFormatComplexFormulaImportWarning : 1;
	unsigned mCondFormatContainsErrorsImportWarning : 1;
	unsigned mCondFormatExprImportWarning : 1;
	unsigned mCondFormatNotContainsErrorsImportWarning : 1;
	unsigned mCondFormatParametersNotAllTheSameTypeImportWarning : 1;
	unsigned mCondFormatStopIfTrueImportWarning : 1;
	unsigned mCondFormatUnsupportedOperatorImportWarning : 1;
	unsigned mCondFormatUnsupportedStylingImportWarning : 1;
	unsigned mCondFormatUnsupportedTimePeriodImportWarning : 1;
	unsigned mUnsupportedConditionalFormatImportWarning : 1;
	unsigned mUnsupportedDataFormatImportWarning : 1;
} TSTImportWarningSetCellWarningFlags;

typedef struct TSTImportFormulaWarning {
	int mType;
	NSString* mOriginalFormula;
	NSString* mSupplementaryText;
} TSTImportFormulaWarning;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true>, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true>, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> > > >;

typedef struct unordered_map<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet>, std::__1::hash<TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> > > > {
	hash_table<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::__unordered_map_hasher<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::hash<TSUColumnRowCoordinate>, true>, std::__1::__unordered_map_equal<TSUColumnRowCoordinate, std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> >, std::__1::equal_to<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__hash_value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> > > > __table_;
} unordered_map<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet>, std::__1::hash<TSUColumnRowCoordinate>, std::__1::equal_to<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<TSTImportWarningSet> > > >;

typedef struct {
	unsigned field1;
	/*function pointer*/void* field2;
} SCD_Struct_TS568;

typedef struct TSWPStorageTransaction* TSWPStorageTransactionRef;

typedef struct {
	/*function pointer*/void* field1;
	= field2;
	SCD_Struct_TS49 field3;
	SCD_Struct_TS49 field4;
	0 field5;
	SCD_Struct_TS49 field6;
	0 field7;
	TSCH3DShaderType field8;
	TSCH3DShaderType field9;
	compressed_pair<int *, std::__1::allocator<int> > field10;
	0) field11;
} SCD_Struct_TS570;

typedef struct {
	id field1;
	id field2;
} SCD_Struct_TS571;

typedef struct {
	int field1;
	unsigned field2;
	char field3;
} SCD_Struct_TS572;

typedef struct shared_count {
	sp_counted_base pi_;
} shared_count;

typedef struct shared_ptr<TSWPLineFragmentArray> {
	TSWPLineFragmentArray px;
	shared_count pn;
} shared_ptr<TSWPLineFragmentArray>;

typedef struct {
	CGRect field1;
	float field2;
	float field3;
	float field4;
	float field5;
} SCD_Struct_TS575;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true>, std::__1::allocator<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > {
	__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true> > __pair3_;
} tree<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true>, std::__1::allocator<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > >;

typedef struct map<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> >, std::__1::less<const TSWPListStyle *>, std::__1::allocator<std::__1::pair<const TSWPListStyle *const, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > {
	tree<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::__map_value_compare<const TSWPListStyle *, std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > >, std::__1::less<const TSWPListStyle *>, true>, std::__1::allocator<std::__1::__value_type<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > __tree_;
} map<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> >, std::__1::less<const TSWPListStyle *>, std::__1::allocator<std::__1::pair<const TSWPListStyle *const, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > >;

typedef struct TSWPTopicNumberHints {
	map<const TSWPListStyle *, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> >, std::__1::less<const TSWPListStyle *>, std::__1::allocator<std::__1::pair<const TSWPListStyle *const, std::__1::vector<TSWPTopicNumberEntry, std::__1::allocator<TSWPTopicNumberEntry> > > > > _numbersForListStyle;
	unsigned _charIndex;
	unsigned _validThroughCharIndex;
} TSWPTopicNumberHints;

typedef struct {
	CGRect field1;
	_ field2;
	NSRange field3;
	unsigned field4;
	_ field5;
	NSRange field6;
	unsigned field7;
} SCD_Struct_TS581;

typedef struct TSWPRangeVector {
	_NSRange __begin_;
	_NSRange __end_;
	compressed_pair<_NSRange *, std::__1::allocator<_NSRange> > __end_cap_;
} TSWPRangeVector;

typedef struct {
	_ field1;
	CTFont field2;
	id field3;
	float field4;
	id field5[3];
	unsigned field6;
	T field7;
	unsigned short field8;
	W field9;
	P field10;
	D field11;
	const  field12;
	a field13;
	w field14;
	int field15;
	n field16;
	g field17;
	unsigned short field18;
	t field19;
	a field20;
	t field21;
	e field22;
	id field23;
	id field24;
	id field25;
	_ field26;
	_ field27;
	CGColor field28;
	CGColor field29;
	id field30;
	char field31;
	int field32;
	float field33;
	NSRange field34;
	float field35;
} SCD_Struct_TS583;

typedef struct __CTLine* CTLineRef;

typedef struct {
	unsigned field1;
	float field2;
} SCD_Struct_TS585;

typedef struct {
	CGRect field1;
	float field2;
	float field3;
	float field4;
	float field5;
	char field6;
} SCD_Struct_TS586;

typedef struct Point* PointRef;

typedef struct {
	/*function pointer*/void* ;
	TSCH3DShaderType ;
	SCD_Struct_TS490 ;
	SCD_Struct_TS490 ;
	compressed_pair<int *, std::__1::allocator<int> > ;
	TSCH3DShaderType ;
	SCD_Struct_TS490) ;
} SCD_Struct_TS588;

typedef struct {
	TSWPParagraphStyle* parStyle;
	TSPObject* section;
	TSWPColumnStyle* columnStyle;
	TSWPListStyle* listStyle;
	SCD_Struct_TS588 parData;
	SCD_Struct_TS588 parStartData;
	SCD_Struct_TS588 parBidiData;
} SCD_Struct_TS589;

typedef struct {
	CGPoint point;
	double time;
} SCD_Struct_TS590;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> > > > {
	__tree_node<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> > > >;

typedef struct map<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> > > > {
	tree<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> >, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> > > > __tree_;
} map<unsigned int, boost::shared_ptr<TSWPParagraphTypesetter>, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, boost::shared_ptr<TSWPParagraphTypesetter> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<id<TSWPStorageObserver> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::less<id<TSWPStorageObserver> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<TSWPStorageObserver>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<TSWPStorageObserver>, void *> > >;

typedef struct _tree<id<TSWPStorageObserver>, std::__1::less<id<TSWPStorageObserver> >, std::__1::allocator<id<TSWPStorageObserver> > > {
	__tree_node<id<TSWPStorageObserver>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<id<TSWPStorageObserver>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<id<TSWPStorageObserver> > > __pair3_;
} tree<id<TSWPStorageObserver>, std::__1::less<id<TSWPStorageObserver> >, std::__1::allocator<id<TSWPStorageObserver> > >;

typedef struct set<id<TSWPStorageObserver>, std::__1::less<id<TSWPStorageObserver> >, std::__1::allocator<id<TSWPStorageObserver> > > {
	tree<id<TSWPStorageObserver>, std::__1::less<id<TSWPStorageObserver> >, std::__1::allocator<id<TSWPStorageObserver> > > __tree_;
} set<id<TSWPStorageObserver>, std::__1::less<id<TSWPStorageObserver> >, std::__1::allocator<id<TSWPStorageObserver> > >;

typedef struct _compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > {
	_TSWPCharIndexAndAffinity __first_;
} compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> >;

typedef struct vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> > {
	_TSWPCharIndexAndAffinity __begin_;
	_TSWPCharIndexAndAffinity __end_;
	compressed_pair<_TSWPCharIndexAndAffinity *, std::__1::allocator<_TSWPCharIndexAndAffinity> > __end_cap_;
} vector<_TSWPCharIndexAndAffinity, std::__1::allocator<_TSWPCharIndexAndAffinity> >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *> > >;

typedef struct _list_node_base<unsigned long, void *> {
	__list_node<unsigned long, void *> __prev_;
	__list_node<unsigned long, void *> __next_;
} list_node_base<unsigned long, void *>;

typedef struct list<unsigned long, std::__1::allocator<unsigned long> > {
	list_node_base<unsigned long, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<unsigned long, void *> > > __size_alloc_;
} list<unsigned long, std::__1::allocator<unsigned long> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry> > > {
	__tree_node<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry> > >;

typedef struct map<unsigned long, TSWPFontHeightCacheEntry, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSWPFontHeightCacheEntry> > > {
	tree<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, TSWPFontHeightCacheEntry> > > __tree_;
} map<unsigned long, TSWPFontHeightCacheEntry, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, TSWPFontHeightCacheEntry> > >;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
	float field5;
	float field6;
	float field7;
} SCD_Struct_TS608;

typedef struct {
	char applicationExists;
	char oldPluginExists;
	char currentPluginExists;
} SCD_Struct_TS609;

typedef struct {
	CGSize field1;
	CGSize field2;
	2 field3;
	SCD_Struct_TS47 field4;
	2 field5;
	SCD_Struct_TS47 field6;
} SCD_Struct_KN610;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, void *> > >;

typedef struct _tree<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> > > > {
	__tree_node<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true> > __pair3_;
} tree<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> > > >;

typedef struct map<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject>, std::__1::less<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> > > > {
	tree<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::__map_value_compare<TSUColumnRowCoordinate, std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> >, std::__1::less<TSUColumnRowCoordinate>, true>, std::__1::allocator<std::__1::__value_type<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> > > > __tree_;
} map<TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject>, std::__1::less<TSUColumnRowCoordinate>, std::__1::allocator<std::__1::pair<const TSUColumnRowCoordinate, SFUtility::ObjcSharedPtr<NSObject> > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, TPPageLayout *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, TPPageLayout *>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, TPPageLayout *> > > {
	__tree_node<std::__1::__value_type<unsigned int, TPPageLayout *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned int, TPPageLayout *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, TPPageLayout *> > >;

typedef struct multimap<unsigned int, TPPageLayout *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, TPPageLayout *> > > {
	tree<std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::__map_value_compare<unsigned int, std::__1::__value_type<unsigned int, TPPageLayout *>, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::__value_type<unsigned int, TPPageLayout *> > > __tree_;
} multimap<unsigned int, TPPageLayout *, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, TPPageLayout *> > >;

typedef struct _compressed_pair<TSWPTargetHint *, std::__1::allocator<TSWPTargetHint> > {
	/*function pointer*/void* __first_;
} compressed_pair<TSWPTargetHint *, std::__1::allocator<TSWPTargetHint> >;

typedef struct vector<TSWPTargetHint, std::__1::allocator<TSWPTargetHint> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<TSWPTargetHint *, std::__1::allocator<TSWPTargetHint> > __end_cap_;
} vector<TSWPTargetHint, std::__1::allocator<TSWPTargetHint> >;

