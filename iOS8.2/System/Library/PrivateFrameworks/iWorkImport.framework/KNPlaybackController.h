/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, June 23, 2015 at 11:27:22 PM Japan Standard Time
* Operating System: Version 8.2 (Build 12D508)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol TSDCanvasDelegate, KNPlaybackControllerDelegate, KNPlaybackConcealer;
#import <iWorkImport/iWorkImport-Structs.h>
@class KNShow, KNPlaybackSession, KNAnimatedSlideView, KNPlaybackAudioController, NSObject, CALayer, KNMovieRenderer, NSIndexSet, KNSlideNode, NSSet, NSArray;

@interface KNPlaybackController : NSObject {

	KNShow* mShow;
	id<TSDCanvasDelegate> mCanvasDelegate;
	id<KNPlaybackControllerDelegate> mDelegate;
	int mPlayMode;
	KNPlaybackSession* mSession;
	KNAnimatedSlideView* mAnimator;
	/*^block*/id mEndShowHandler;
	KNPlaybackAudioController* mSoundtrackController;
	NSObject*<KNPlaybackConcealer> mPlaybackConcealer;
	CGColorSpaceRef mPlaybackColorSpace;
	CALayer* mBaseLayer;
	int mPlaybackState;
	char mAllowsShowToEndInternally;
	char mAutomaticallyPlaysSoundtrack;
	char mPlaysAutomaticEvents;
	char mAutomaticallyPlaysMovies;
	char mRenderingSuspended;
	char mNeedsRenderAfterResumingRendering;
	char mIsCurrentEventNonAutomatic;
	char mIsPaused;
	char mIsHyperlinkInProgress;
	char mIsUsingDiscreteGPU;
	KNMovieRenderer* mMovieRendererWithVisibleHUD;

}

@property (nonatomic,readonly) KNShow * show; 
@property (assign,nonatomic) id<KNPlaybackControllerDelegate> delegate; 
@property (nonatomic,readonly) id<TSDCanvasDelegate> canvasDelegate; 
@property (assign,nonatomic) int playMode; 
@property (nonatomic,readonly) CALayer * baseLayer; 
@property (assign,nonatomic) unsigned currentEventIndex; 
@property (nonatomic,copy) NSIndexSet * buildEventIndexesToAnimate; 
@property (nonatomic,readonly) double buildsToAnimateDuration; 
@property (nonatomic,copy) id endShowHandler; 
@property (getter=isAtBeginning,nonatomic,readonly) char atBeginning; 
@property (nonatomic,readonly) KNSlideNode * currentSlideNode; 
@property (nonatomic,readonly) KNSlideNode * firstSlideNode; 
@property (nonatomic,readonly) KNSlideNode * nextSlideNode; 
@property (nonatomic,readonly) KNSlideNode * lastSlideNode; 
@property (nonatomic,readonly) unsigned eventCount; 
@property (nonatomic,readonly) unsigned visibleEventIndex; 
@property (nonatomic,readonly) unsigned nextEventIndex; 
@property (getter=isAnimating,nonatomic,readonly) char animating; 
@property (getter=isNonMovieAnimationAnimating,nonatomic,readonly) char nonMovieAnimationAnimating; 
@property (getter=isNonMovieAnimationActive,nonatomic,readonly) char nonMovieAnimationActive; 
@property (getter=isPaused,nonatomic,readonly) char paused; 
@property (nonatomic,readonly) int pausedConcealingStyle; 
@property (nonatomic,retain) NSObject*<KNPlaybackConcealer> playbackConcealer; 
@property (nonatomic,readonly) NSSet * movieRenderers; 
@property (assign,nonatomic) KNMovieRenderer * movieRendererWithVisibleHUD; 
@property (assign,nonatomic) char automaticallyPlaysMovies; 
@property (assign,nonatomic) CGColorSpaceRef playbackColorSpace; 
@property (nonatomic,readonly) int playbackState; 
@property (assign,nonatomic) char allowsShowToEndInternally; 
@property (assign,nonatomic) char automaticallyPlaysSoundtrack; 
@property (assign,nonatomic) char playsAutomaticEvents; 
@property (assign,nonatomic) char shouldAnimateTransitionOnLastSlide; 
@property (nonatomic,retain,readonly) NSArray * currentlyVisibleInfos; 
@property (assign,nonatomic) char shouldAnimateNullTransitions; 
@property (assign,nonatomic) char isHyperlinkInProgress; 
+(id)keyPathsForValuesAffectingPausedConcealingStyle;
+(id)keyPathsForValuesAffectingMovieRenderers;
-(unsigned)currentEventIndex;
-(unsigned)nextEventIndex;
-(unsigned)eventCount;
-(CALayer *)baseLayer;
-(int)playMode;
-(char)shouldAnimateNullTransitions;
-(void)resumeAnimationsIfPaused;
-(KNSlideNode *)currentSlideNode;
-(KNSlideNode *)firstSlideNode;
-(KNSlideNode *)nextSlideNode;
-(NSSet *)movieRenderers;
-(void)setPlayMode:(int)arg1 ;
-(void)p_setAnimator:(id)arg1 ;
-(id<TSDCanvasDelegate>)canvasDelegate;
-(id)initWithShow:(id)arg1 canvasDelegate:(id)arg2 ;
-(void)gotoNextEvent;
-(id)nextSlideNodeAfterSlideNode:(id)arg1 ;
-(KNSlideNode *)lastSlideNode;
-(id)breadCrumbTrail;
-(void)setBreadCrumbTrail:(id)arg1 ;
-(id)endShowHandler;
-(void)setEndShowHandler:(id)arg1 ;
-(char)shouldAnimateTransitionOnLastSlide;
-(void)setShouldAnimateTransitionOnLastSlide:(char)arg1 ;
-(void)setShouldAnimateNullTransitions:(char)arg1 ;
-(void)applyMovieControl:(int)arg1 ;
-(void)p_movieStarted:(id)arg1 ;
-(char)isNonMovieAnimationActive;
-(char)isNonMovieAnimationAnimating;
-(void)renderCurrentEvent;
-(void)playAutomaticEvents;
-(void)p_resetAnimatorAtEventIndex:(unsigned)arg1 ;
-(void)p_retainDiscreteGPUIfNeeded;
-(void)p_endShowFromAnimator;
-(char)automaticallyPlaysMovies;
-(float)p_defaultViewScaleForBaseLayer:(id)arg1 ;
-(void)prepareOnLayer:(id)arg1 viewScale:(float)arg2 atSlideNode:(id)arg3 isBaseLayerVisible:(char)arg4 ;
-(char)playsAutomaticEvents;
-(void)endShow;
-(void)tearDownShow;
-(void)p_releaseDiscreteGPUIfRetained;
-(unsigned)visibleEventIndex;
-(char)gotoSlideNode:(id)arg1 toEventIndex:(unsigned)arg2 shouldAnimate:(char)arg3 ignoreDelays:(char)arg4 ;
-(void)p_gotoPreviousAndJumpToFirstEvent:(char)arg1 ;
-(void)gotoNextEventIgnoringDelay:(char)arg1 ;
-(char)gotoNextSlideWithAnimation:(char)arg1 ignoreDelays:(char)arg2 ;
-(void)p_resetAnimatorAndSetGoToFirstEvent:(char)arg1 ;
-(char)gotoFirstSlideWithAnimation:(char)arg1 ignoreDelays:(char)arg2 ;
-(void)restartPlaybackIfNeeded;
-(NSObject*<KNPlaybackConcealer>)playbackConcealer;
-(void)pauseAnimationsWithConcealingStyle:(int)arg1 ;
-(void)pauseSoundtrack;
-(void)resumeSoundtrack;
-(void)setCurrentEventIndex:(unsigned)arg1 ;
-(id)p_animator;
-(id)p_topLevelRepsForHitTesting;
-(char)isHyperlinkAtUnscaledPoint:(CGPoint)arg1 hitObject:(id*)arg2 hitRep:(id*)arg3 hitInfo:(id*)arg4 ;
-(id)p_hyperlinkURLForTarget:(id)arg1 rep:(id)arg2 info:(id)arg3 ;
-(NSArray *)currentlyVisibleInfos;
-(char)p_processHyperlinkURL:(id)arg1 ;
-(char)gotoLastSlideWithAnimation:(char)arg1 ignoreDelays:(char)arg2 ;
-(char)gotoPreviousSlideWithAnimation:(char)arg1 ignoreDelays:(char)arg2 ;
-(char)gotoLastVisitedSlideWithAnimation:(char)arg1 ignoreDelays:(char)arg2 ;
-(id)p_currentBuildChunks;
-(void)p_movieEnded:(id)arg1 ;
-(void)p_eventStarted:(id)arg1 ;
-(void)p_eventAnimationBecameActive:(id)arg1 ;
-(void)p_eventEnded:(id)arg1 ;
-(void)p_eventImmediatelyEnded:(id)arg1 ;
-(void)prepareOnLayer:(id)arg1 atSlideNode:(id)arg2 isBaseLayerVisible:(char)arg3 ;
-(double)buildsToAnimateDuration;
-(NSIndexSet *)buildEventIndexesToAnimate;
-(void)setBuildEventIndexesToAnimate:(NSIndexSet *)arg1 ;
-(void)playPreparedShow;
-(void)resizeShowToFitBaseLayer;
-(char)isAtBeginning;
-(void)gotoPreviousEvent;
-(void)gotoFirstEvent;
-(void)gotoNextEventWithoutAnimation;
-(void)restartShow;
-(int)pausedConcealingStyle;
-(void)stopAnimationsAndGotoCompletionOfEvent;
-(void)startSoundtrackAtMediaIndex:(unsigned)arg1 time:(double)arg2 ;
-(void)stopSoundtrack;
-(id)movieRendererAtPoint:(CGPoint)arg1 ;
-(void)setAutomaticallyPlaysMovies:(char)arg1 ;
-(void)setPlaybackColorSpace:(CGColorSpaceRef)arg1 ;
-(void)setPlaysAutomaticEvents:(char)arg1 ;
-(char)isHyperlinkAtPoint:(CGPoint)arg1 hitObject:(id*)arg2 hitRep:(id*)arg3 hitInfo:(id*)arg4 ;
-(char)processHyperlinkForTarget:(id)arg1 rep:(id)arg2 info:(id)arg3 ;
-(char)isHyperlinkInProgress;
-(void)setIsHyperlinkInProgress:(char)arg1 ;
-(KNMovieRenderer *)movieRendererWithVisibleHUD;
-(void)setMovieRendererWithVisibleHUD:(KNMovieRenderer *)arg1 ;
-(void)setPlaybackConcealer:(NSObject*<KNPlaybackConcealer>)arg1 ;
-(char)allowsShowToEndInternally;
-(void)setAllowsShowToEndInternally:(char)arg1 ;
-(char)automaticallyPlaysSoundtrack;
-(void)setAutomaticallyPlaysSoundtrack:(char)arg1 ;
-(CGColorSpaceRef)playbackColorSpace;
-(void)pauseAnimations;
-(int)playbackState;
-(KNShow *)show;
-(void)dealloc;
-(void)setDelegate:(id<KNPlaybackControllerDelegate>)arg1 ;
-(id)init;
-(id<KNPlaybackControllerDelegate>)delegate;
-(char)isAnimating;
-(void)resumeRendering;
-(void)suspendRendering;
-(char)isPaused;
-(void)stopAnimations;
@end

