/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, June 23, 2015 at 11:21:06 PM Japan Standard Time
* Operating System: Version 8.2 (Build 12D508)
* Image Source: /System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <SpringBoardFoundation/SpringBoardFoundation-Structs.h>
@class PCPersistentTimer, SBFPasscodeLockAssertionManager, SBFPasscodeLockDisableAssertion, NSString;

@interface SBFDeviceLockController : NSObject {

	int _lockState;
	char _isBlockedForThermalCondition;
	double _lastLockDate;
	char _isPermanentlyBlocked;
	double _deviceLockUnblockTime;
	PCPersistentTimer* _deviceLockUnblockTimer;
	char _cachedPasscodeLockedOrBlocked;
	char _hasBeenUnlockedOnceSinceBoot;
	SBFPasscodeLockAssertionManager* _assertionManager;
	SBFPasscodeLockDisableAssertion* _transientPasscodeCheckingAssertion;
	char _okToSendNotifications;
	NSString* _lastIncorrectPasscodeAttempt;
	char _shouldFetchPasscodeLockState;
	char _lastPasscodeLockStateWasLocked;
	CFRunLoopObserverRef _runLoopObserver;

}
+(id)_lockStateDefaults;
+(void)_loadLockControllerDefaultsJournalIfNecessary;
+(void)_updateLockControllerDefaultsJournal;
+(id)_journaledDefaultsAndTypes;
+(id)_journalPath;
-(char)isBlocked;
-(void)dealloc;
-(id)init;
-(id)description;
-(void)synchronize;
-(void)_clearBlockedState;
-(void)_setDeviceLockUnblockTime:(double)arg1 ;
-(char)deviceHasPasscodeSet;
-(char)_shouldSuppressLockOnInit;
-(void)_updateDeviceLockedState;
-(void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(char)arg1 ;
-(void)_clearUnblockTimer;
-(void)_noteBlockedReasonsMayHaveChanged;
-(char)_temporarilyBlocked;
-(void)updateLockControllerDefaultsWithBlock:(/*^block*/id)arg1 journaled:(char)arg2 ;
-(void)_unblockTimerFired;
-(void)_scheduleUnblockTimer;
-(void)_setupRunLoopObserverIfNecessary;
-(char)isPasscodeLocked;
-(char)isPasscodeLockedOrBlocked;
-(char)_shouldLockDeviceNow;
-(void)_enablePasscodeLockImmediately:(char)arg1 ;
-(void)_setLockState:(int)arg1 ;
-(void)_lockStateChangedFrom:(int)arg1 to:(int)arg2 ;
-(void)_wipeDevice;
-(char)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(char)arg2 ;
-(id)lastLockDate;
-(char)isBlockedForThermalCondition;
-(void)_sendBlockStateChangeNotification;
-(void)setBlockedForThermalCondition:(char)arg1 ;
-(char)isPermanentlyBlocked:(double*)arg1 ;
-(char)isPasscodeLockedCached;
-(char)deviceHasBeenPasscodeUnlockedOnceSinceBoot;
-(void)enablePasscodeLockImmediately;
-(void)_notifyOfFirstUnlock;
-(void)_keybagLockStateChangedTo:(int)arg1 ;
-(void)_addDeviceLockDisableAssertion:(id)arg1 ;
-(void)_removeDeviceLockDisableAssertion:(id)arg1 ;
-(void)_cachePassword:(id)arg1 ;
-(void)_uncachePasscodeIfNecessary;
@end

