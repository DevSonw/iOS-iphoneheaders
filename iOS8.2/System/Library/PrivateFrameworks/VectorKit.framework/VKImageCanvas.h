/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, June 23, 2015 at 11:26:37 PM Japan Standard Time
* Operating System: Version 8.2 (Build 12D508)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <VectorKit/GGLImageCanvas.h>
#import <VectorKit/VKWorldDelegate.h>
#import <VectorKit/VKAnimationRunner.h>

@class VKWorld, VKCamera, VKLayoutContext, VKDispatch, VKTimer, NSString;

@interface VKImageCanvas : GGLImageCanvas <VKWorldDelegate, VKAnimationRunner> {

	VKWorld* _world;
	VKCamera* _camera;
	VKLayoutContext* _layoutContext;
	VKDispatch* _dispatch;
	VKTimer* _layoutTimer;
	char _shouldDrawWhileLoading;
	double _frameTimestamp;
	char _needsLayout;
	MapCamera* _mapCamera;
	unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >* _renderQueue;
	unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> >* _renderQueueResolve;
	unique_ptr<<anonymous>::YFlipPass, std::__1::default_delete<<anonymous>::YFlipPass> >* _yFlipPass;
	RenderTree* _mapScene;

}

@property (nonatomic,readonly) VKWorld * world;                     //@synthesize world=_world - In the implementation block
@property (nonatomic,readonly) VKCamera * camera;                   //@synthesize camera=_camera - In the implementation block
@property (nonatomic,readonly) VKDispatch * dispatch;               //@synthesize dispatch=_dispatch - In the implementation block
@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)dealloc;
-(void)setSize:(CGSize)arg1 ;
-(void)animationDidStop:(id)arg1 ;
-(void)didReceiveMemoryWarning:(char)arg1 ;
-(VKCamera *)camera;
-(void)runAnimation:(id)arg1 ;
-(void)_updateViewTransform;
-(VKWorld *)world;
-(void)animationDidResume:(id)arg1 ;
-(void)worldLayoutDidChange:(id)arg1 ;
-(void)worldDisplayDidChange:(id)arg1 ;
-(id)initWithSize:(CGSize)arg1 scale:(float)arg2 useMultisampling:(char)arg3 device:(const shared_ptr<ggl::Device>Ref)arg4 homeQueue:(id)arg5 ;
-(void)loadScene;
-(void)cancelLoad;
-(VKDispatch *)dispatch;
-(void)renderSceneWithRenderer:(Renderer*)arg1 completion:(/*^block*/id)arg2 ;
-(void)_spinSceneWillRender:(char)arg1 ;
-(void)_spinScene:(id)arg1 ;
-(id)initWithSize:(CGSize)arg1 scale:(float)arg2 useMultisampling:(char)arg3 device:(const shared_ptr<ggl::Device>Ref)arg4 ;
@end

