/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 4:19:04 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /usr/libexec/locationd
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct FairPlayHWInfo_ {
	unsigned IDLength;
	unsigned char ID[20];
} FairPlayHWInfo_;

typedef struct FPSAPContextOpaque_* FPSAPContextOpaque_Ref;

typedef struct CLAccessoryObserverListener {
	void info;
	/*function pointer*/ void* onConnected;
	/*function pointer*/ void* onDisconnected;
	/*function pointer*/ void* onNmeaReceived;
	/*function pointer*/ void* onReferenceTime;
	/*function pointer*/ void* onReferenceLocation;
	/*function pointer*/ void* onEphemerisURL;
} CLAccessoryObserverListener;

typedef struct {
	unsigned age : 1;
	unsigned serverHash : 1;
} SCD_Struct_CR3;

typedef struct {
	unsigned arfcn : 1;
	unsigned ecn0 : 1;
	unsigned psc : 1;
	unsigned rat : 1;
	unsigned rscp : 1;
	unsigned serverHash : 1;
	unsigned transmit : 1;
} SCD_Struct_CR4;

typedef struct {
	unsigned altitude : 1;
	unsigned context : 1;
	unsigned course : 1;
	unsigned speed : 1;
	unsigned verticalAccuracy : 1;
} SCD_Struct_CR5;

typedef struct {
	unsigned mcc : 1;
	unsigned mnc : 1;
	unsigned rat : 1;
} SCD_Struct_CR6;

typedef struct {
	unsigned submissionId : 1;
} SCD_Struct_CR7;

typedef struct {
	int list;
	unsigned count;
	unsigned size;
} SCD_Struct_CR8;

typedef struct {
	unsigned bsLatitude : 1;
	unsigned bsLongitude : 1;
	unsigned sectorLatitude : 1;
	unsigned sectorLongitude : 1;
	unsigned bandclass : 1;
	unsigned celltype : 1;
	unsigned channel : 1;
	unsigned dayLightSavings : 1;
	unsigned ecn0 : 1;
	unsigned ltmOffset : 1;
	unsigned pnoffset : 1;
	unsigned rat : 1;
	unsigned rscp : 1;
	unsigned serverHash : 1;
	unsigned zoneid : 1;
} SCD_Struct_CR9;

typedef struct _long {
	unsigned __cap_;
	unsigned __size_;
	char* __data_;
} long;

typedef struct _short {
	/*function pointer*/ void* ;
	unsigned char __size_;
	c) __lx;
	BOOL __data_[11];
} short;

typedef struct _raw {
	unsigned long __words[3];
} raw;

typedef struct _rep {
	/*function pointer*/ void* ;
	long __l;
	short __s;
	const aw) __r;
} rep;

typedef struct _compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > {
	const ep __first_;
} compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >;

typedef struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > {
	compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > __r_;
} basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >;

typedef struct {
	unsigned numberOfSurroundingCdmaCells : 1;
	unsigned numberOfSurroundingCdmaEvdoCells : 1;
	unsigned numberOfSurroundingCells : 1;
	unsigned numberOfSurroundingLteCells : 1;
	unsigned numberOfSurroundingScdmaCells : 1;
	unsigned numberOfSurroundingWifis : 1;
} SCD_Struct_AL16;

typedef struct {
	unsigned bandclass : 1;
	unsigned bsid : 1;
	unsigned channel : 1;
	unsigned mcc : 1;
	unsigned nid : 1;
	unsigned pnoffset : 1;
	unsigned sid : 1;
	unsigned zoneid : 1;
} SCD_Struct_AL17;

typedef struct {
	unsigned cellLatitude : 1;
	unsigned cellLongitude : 1;
	unsigned bandInfo : 1;
	unsigned ecn0 : 1;
	unsigned pid : 1;
	unsigned rscp : 1;
	unsigned rssi : 1;
	unsigned serverHash : 1;
	unsigned uarfcn : 1;
} SCD_Struct_CR18;

typedef struct _compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > {
	Client __first_;
} compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> > {
	compressed_pair<CLLocationController_Type::Client *, std::__1::default_delete<CLLocationController_Type::Client> > __ptr_;
} unique_ptr<CLLocationController_Type::Client, std::__1::default_delete<CLLocationController_Type::Client> >;

typedef struct _compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> > {
	Client __first_;
} compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> >;

typedef struct unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client> > {
	compressed_pair<CLGpsController_Type::Client *, std::__1::default_delete<CLGpsController_Type::Client> > __ptr_;
} unique_ptr<CLGpsController_Type::Client, std::__1::default_delete<CLGpsController_Type::Client> >;

typedef struct _compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > {
	compressed_pair<CLServiceLocationProvider_Type::Client *, std::__1::default_delete<CLServiceLocationProvider_Type::Client> > __ptr_;
} unique_ptr<CLServiceLocationProvider_Type::Client, std::__1::default_delete<CLServiceLocationProvider_Type::Client> >;

typedef struct _compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > {
	Client __first_;
} compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> > {
	compressed_pair<CLClientManager_Type::Client *, std::__1::default_delete<CLClientManager_Type::Client> > __ptr_;
} unique_ptr<CLClientManager_Type::Client, std::__1::default_delete<CLClientManager_Type::Client> >;

typedef struct _CFURLRequest* CFURLRequestRef;

typedef struct _CFURLConnection* CFURLConnectionRef;

typedef struct _CFURLAuthChallenge* CFURLAuthChallengeRef;

typedef struct __CFURL* CFURLRef;

typedef struct _CFURLResponse* CFURLResponseRef;

typedef struct __CFURLConnectionSession* CFURLConnectionSessionRef;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_CL33;

typedef struct {
	unsigned ecn0 : 1;
	unsigned pilotPhase : 1;
	unsigned pnoffset : 1;
	unsigned rscp : 1;
} SCD_Struct_CR34;

typedef struct {
	id field1;
	char* field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	unsigned field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	id field12;
	int field13;
} SCD_Struct_CL35;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_CL36;

typedef struct {
	SCD_Struct_CL35 field1;
	unsigned field2;
	unsigned field3;
	int field4;
	int field5;
	int field6;
	unsigned field7;
	unsigned field8;
	bool field9;
	R field10;
	e field11;
	BOOL field12;
	t field13;
	unsigned field14;
	m field15;
	p field16;
	< field17;
	float field18;
	long field19;
	o field20;
	a field21;
	t field22;
	> field23;
	/*function pointer*/ void* field24;
	SCD_Struct_CL36 field25;
	unsigned char field26;
} SCD_Struct_CL37;

typedef struct CLDistanceCalc {
	/*function pointer*/ void* _vptr$CLDistanceCalc;
	double fM;
	double fN;
	double fRefLatRads;
	double fRefLatDegs;
	double fCosRefLat;
} CLDistanceCalc;

typedef struct {
	SCD_Struct_CL33 field1;
	double field2;
} SCD_Struct_CL39;

typedef struct _NSZone* NSZoneRef;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >;

typedef struct _tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > __pair3_;
} tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > > {
	tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > __tree_;
} map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > >;

typedef struct _tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > {
	__tree_node<std::__1::pair<unsigned long, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > >;

typedef struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > __tree_;
} map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >;

typedef struct __CFRunLoop* CFRunLoopRef;

