/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:59:12 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /usr/lib/libmecabra.dylib
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <libmecabra.dylib/libmecabra.dylib-Structs.h>
#import <CoreFoundation/NSCopying.h>

@class NSString;

@interface MecabraCandidate : NSObject <NSCopying> {

	void* _rawCandidate;

}

@property (nonatomic,readonly) BOOL isConversionCandidate; 
@property (nonatomic,readonly) BOOL isExtensionCandidate; 
@property (nonatomic,readonly) BOOL isEmojiCandidate; 
@property (nonatomic,readonly) BOOL isLearningDictionaryCandidate; 
@property (nonatomic,readonly) BOOL isUserWordCandidate; 
@property (nonatomic,readonly) BOOL isPredictionCandidate; 
@property (nonatomic,readonly) BOOL isFuzzyMatchCandidate; 
@property (nonatomic,readonly) int type; 
@property (nonatomic,readonly) unsigned wordCount; 
@property (nonatomic,readonly) NSString * surface; 
@property (nonatomic,readonly) NSString * analysisString; 
@property (nonatomic,readonly) NSString * convertedAnalysisString; 
@property (nonatomic,readonly) NSString * dictionaryReading; 
@property (nonatomic,readonly) MecabraCandidateBase* rawCandidate; 
@property (nonatomic,readonly) ConversionCandidate* rawConversionCandidate; 
+(id)createSyntheticCandidate:(id)arg1 withLexicon:(void*)arg2 language:(int)arg3 ;
-(void)dealloc;
-(BOOL)isEqual:(id)arg1 ;
-(id)description;
-(int)type;
-(id)copyWithZone:(NSZoneRef)arg1 ;
-(BOOL)isExtensionCandidate;
-(unsigned short)kind;
-(unsigned)weight;
-(void)setWeight:(unsigned)arg1 ;
-(id)dictionaryReading;
-(id)initWithCandidate:(MecabraCandidateBase*)arg1 ;
-(ConversionCandidate*)rawConversionCandidate;
-(MecabraCandidateBase*)rawCandidate;
-(id)surface;
-(unsigned)wordCount;
-(id)analysisString;
-(BOOL)isConversionCandidate;
-(id)convertedAnalysisString;
-(BOOL)isEmojiCandidate;
-(BOOL)isLearningDictionaryCandidate;
-(BOOL)isUserWordCandidate;
-(BOOL)isPredictionCandidate;
-(BOOL)isFuzzyMatchCandidate;
-(unsigned short)wordLengthAtIndex:(unsigned)arg1 ;
-(unsigned short)wordReadingLengthAtIndex:(unsigned)arg1 ;
-(BOOL)wordIsFromSystemDictionaryAtIndex:(unsigned)arg1 ;
-(CFArrayRef)copySyllableLengthArrayForWordAtIndex:(unsigned)arg1 ;
-(unsigned short)lcAttrAtIndex:(unsigned)arg1 ;
-(unsigned short)rcAttrAtIndex:(unsigned)arg1 ;
-(unsigned)trieValueAtIndex:(unsigned)arg1 ;
-(unsigned short)lastPrefixValue;
-(unsigned short)matchType;
-(CFArrayRef)copySyllableLengthArrayInAnalysisString;
-(CFArrayRef)copySyllableLengthArrayInConvertedAnalysisString;
-(CFArrayRef)copySyllableLengthArrayInDictionaryReading;
-(SCD_Struct_Me2)wordRangeAtIndex:(long)arg1 ;
-(long)alternateWordCountAtIndex:(long)arg1 ;
-(CFArrayRef)createAlternateWordArrayForWordAtIndex:(long)arg1 ;
-(id)syllablesInAnalysisString;
-(id)syllablesInConvertedAnalysisString;
-(id)syllablesInDictionaryReading;
-(id)syllablesInString:(id)arg1 syllableLengths:(id)arg2 ;
-(unsigned short)matchedLengthType;
-(id)convertedAnalysisStringForFirstSyllable;
-(id)syllabifiedAnalysisString;
-(id)syllabifiedConvertedAnalysisString;
-(id)syllabifiedDictionaryReading;
-(id)words;
-(id)wordReadings;
@end

