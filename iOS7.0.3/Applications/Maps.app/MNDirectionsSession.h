/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:59:58 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /Applications/Maps.app/Maps
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <Maps/Maps-Structs.h>
#import <Maps/MNRouteManagerDelegate.h>

@class MNNavigationSession, MNRouteManager, MNRouteLoader, RAPDirectionsRecorder, BKSProcessAssertion;

@interface MNDirectionsSession : NSObject <MNRouteManagerDelegate> {

	MNNavigationSession* _navigationSession;
	MNRouteManager* _routeManager;
	MNRouteLoader* _routeLoader;
	RAPDirectionsRecorder* _reportAProblemRecorder;
	BOOL _didBeginNavigation;
	BOOL _didEndNavigation;
	BKSProcessAssertion* _priorityAssertion;
	SBSThermalWarningAssertionRef _thermalWarningAssertion;

}

@property (nonatomic,readonly) MNNavigationSession * navigationSession;                          //@synthesize navigationSession=_navigationSession - In the implementation block
@property (nonatomic,readonly) MNRouteManager * routeManager;                                    //@synthesize routeManager=_routeManager - In the implementation block
@property (nonatomic,readonly) MNRouteLoader * routeLoader;                                      //@synthesize routeLoader=_routeLoader - In the implementation block
@property (nonatomic,readonly) RAPDirectionsRecorder * reportAProblemRecorder;                   //@synthesize reportAProblemRecorder=_reportAProblemRecorder - In the implementation block
@property (nonatomic,retain) BKSProcessAssertion * priorityAssertion;                            //@synthesize priorityAssertion=_priorityAssertion - In the implementation block
@property (assign,nonatomic) SBSThermalWarningAssertionRef thermalWarningAssertion;              //@synthesize thermalWarningAssertion=_thermalWarningAssertion - In the implementation block
+(BOOL)canRunDirectionsSessionWithSelectedRoute:(id)arg1 ;
+(BOOL)canRunDirectionsSessionWithRoutesWithTransportType:(int)arg1 ;
-(id)navigationSession;
-(id)routeManager;
-(id)initWithRouteLoader:(id)arg1 ;
-(BOOL)setupNavigatorForNavigationType:(int)arg1 useSimulation:(BOOL)arg2 tracePlayer:(id)arg3 ;
-(void)routeManagerDidChangeState:(id)arg1 newRouteState:(int)arg2 ;
-(void)routeManager:(id)arg1 didChangeRoutePreloadSession:(id)arg2 ;
-(void)routeManager:(id)arg1 recordRouteRequest:(id)arg2 ;
-(void)routeManagerDidCancelRoute:(id)arg1 errorCode:(int)arg2 ;
-(void)routeManagerWillRequestRoute:(id)arg1 traceRecorderFailed:(BOOL)arg2 ;
-(void)routeManagerDidFailToRecalculateRoute:(id)arg1 previousRoute:(id)arg2 errorCode:(int)arg3 ;
-(void)routeManagerWillRecalculateRoute:(id)arg1 ;
-(void)routeManager:(id)arg1 didSwitchToNewRoute:(id)arg2 alreadyOnRoute:(BOOL)arg3 ;
-(void)routeManager:(id)arg1 recordRouteResponse:(id)arg2 ;
-(void)routeManager:(id)arg1 didReceiveRouteSet:(id)arg2 ;
-(void)routeManager:(id)arg1 didRecalculateNewRoute:(id)arg2 ;
-(void)routeManagerDidFailToReceiveRoute:(id)arg1 error:(id)arg2 ;
-(void)routeManager:(id)arg1 failedWithError:(id)arg2 ;
-(void)routeManagerUpdatedETA:(id)arg1 ;
-(void)routeManagerUpdatedTrafficIncidents:(id)arg1 ;
-(void)routeManager:(id)arg1 recommendsNewRoute:(id)arg2 oldEstimatedTime:(unsigned)arg3 newEstimatedTime:(unsigned)arg4 ;
-(id)priorityAssertion;
-(void)setPriorityAssertion:(id)arg1 ;
-(id)reportAProblemRecorder;
-(void)routeManagerForcedSwitchToNewRoute:(id)arg1 ;
-(void)setThermalWarningAssertion:(SBSThermalWarningAssertionRef)arg1 ;
-(id)routeLoader;
-(SBSThermalWarningAssertionRef)thermalWarningAssertion;
-(void)dealloc;
@end

