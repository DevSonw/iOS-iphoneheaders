/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:58:00 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <VectorKit/VectorKit-Structs.h>
#import <CoreFoundation/NSFastEnumeration.h>

@protocol VKLRUCacheDelegate;
@interface VKLRUCache : NSObject <NSFastEnumeration> {

	unsigned _reservedCapacity;
	unsigned _maximumCapacity;
	unsigned _count;
	void* _table;
	id _head;
	id _tail;
	<VKLRUCacheDelegate>* _delegate;

}

@property (nonatomic,readonly) unsigned reservedCapacity;                  //@synthesize reservedCapacity=_reservedCapacity - In the implementation block
@property (nonatomic,readonly) unsigned maximumCapacity;                   //@synthesize maximumCapacity=_maximumCapacity - In the implementation block
@property (nonatomic,readonly) unsigned count;                             //@synthesize count=_count - In the implementation block
@property (assign,nonatomic) <VKLRUCacheDelegate> * delegate;              //@synthesize delegate=_delegate - In the implementation block
-(void)dealloc;
-(unsigned)countByEnumeratingWithState:(SCD_Struct_VK56*)arg1 objects:(id*)arg2 count:(unsigned)arg3 ;
-(void)setDelegate:(id)arg1 ;
-(unsigned)count;
-(id)init;
-(void)removeAllObjects;
-(id)description;
-(id)delegate;
-(id)objectForKey:(const VKCacheKey*)arg1 ;
-(void)setObject:(id)arg1 forKey:(const VKCacheKey*)arg2 ;
-(void)purge;
-(void)removeNode:(id)arg1 ;
-(id)initWithReservedCapacity:(unsigned)arg1 maximumCapacity:(unsigned)arg2 ;
-(void)setReservedCapacity:(unsigned)arg1 maximumCapacity:(unsigned)arg2 ;
-(void)dropTail;
-(void)evictIfNecessary;
-(void)insertNodeAtHead:(id)arg1 ;
-(void)consistencyCheck;
-(id)contentsDescription;
-(id)objectWithoutPromotingForKey:(const VKCacheKey*)arg1 ;
-(void)removeObjectsMatchingPredicate:(/*^block*/ id)arg1 ;
-(unsigned)reservedCapacity;
-(unsigned)maximumCapacity;
@end

