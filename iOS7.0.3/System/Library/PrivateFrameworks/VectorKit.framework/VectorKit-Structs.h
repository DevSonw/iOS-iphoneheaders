/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:58:18 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


@class NSString;

typedef struct _compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo> > {
	/*function pointer*/ void* __first_;
} compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo> >;

typedef struct vector<VGLGroupInfo, vk_allocator<VGLGroupInfo> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<VGLGroupInfo *, vk_allocator<VGLGroupInfo> > __end_cap_;
} vector<VGLGroupInfo, vk_allocator<VGLGroupInfo> >;

typedef struct NSRange {
	unsigned location;
	unsigned length;
} NSRange;

typedef struct {
	float x0;
	float x1;
	float y0;
	float y1;
	float z0;
	float z1;
} SCD_Struct_VG3;

typedef struct _compressed_pair<int *, vk_allocator<int> > {
	int __first_;
} compressed_pair<int *, vk_allocator<int> >;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<int, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<int, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<int> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::hash<int> >;

typedef struct _compressed_pair<float, std::__1::equal_to<int> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<int> >;

typedef struct _hash_node_base<std::__1::__hash_node<int, void *> *> {
	__hash_node<int, void *> __next_;
} hash_node_base<std::__1::__hash_node<int, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, vk_allocator<std::__1::__hash_node<int, void *> > > {
	hash_node_base<std::__1::__hash_node<int, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, vk_allocator<std::__1::__hash_node<int, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<int, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > > {
	__hash_node<int, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<int, void *> *, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > > {
	compressed_pair<std::__1::__hash_node<int, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<int, void *> *, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > >;

typedef struct _hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> > {
	unique_ptr<std::__1::__hash_node<int, void *> *, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<int, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<int, void *> *>, vk_allocator<std::__1::__hash_node<int, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<int> > __p2_;
	compressed_pair<float, std::__1::equal_to<int> > __p3_;
} hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> >;

typedef struct unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> > {
	hash_table<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> > __table_;
} unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> >;

typedef struct vector<int, vk_allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, vk_allocator<int> > __end_cap_;
} vector<int, vk_allocator<int> >;

typedef struct {
	NSRange indexRange;
	SCD_Struct_VG3 bounds;
	vector<int, vk_allocator<int> > groupInfoIndices;
	unordered_set<int, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<int> > overflowSourceFragments;
} SCD_Struct_VG16;

typedef struct bitset<16> {
	unsigned __first_;
} bitset<16>;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, unsigned int>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int> > >;

typedef struct unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, unsigned int> > > {
	hash_table<std::__1::pair<unsigned int, unsigned int>, std::__1::__unordered_map_hasher<unsigned int, unsigned int, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, unsigned int, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, unsigned int> > > __table_;
} unordered_map<unsigned int, unsigned int, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, unsigned int> > >;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_VG28;

typedef struct {
	float field1;
	float field2;
	float field3;
} SCD_Struct_VG29;

typedef struct VGLColor {
	float r;
	float g;
	float b;
	float a;
} VGLColor;

typedef struct CGContext* CGContextRef;

typedef struct CGColor* CGColorRef;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	float m00;
	float m01;
	float m02;
	float m03;
	float m10;
	float m11;
	float m12;
	float m13;
	float m20;
	float m21;
	float m22;
	float m23;
	float m30;
	float m31;
	float m32;
	float m33;
} SCD_Struct_VG34;

typedef union {
	SCD_Struct_VG34 field1;
	float m[16];
} SCD_Union_VG35;

typedef struct _compressed_pair<UniformHandle *, vk_allocator<UniformHandle> > {
	UniformHandle __first_;
} compressed_pair<UniformHandle *, vk_allocator<UniformHandle> >;

typedef struct vector<UniformHandle, vk_allocator<UniformHandle> > {
	UniformHandle __begin_;
	UniformHandle __end_;
	compressed_pair<UniformHandle *, vk_allocator<UniformHandle> > __end_cap_;
} vector<UniformHandle, vk_allocator<UniformHandle> >;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct VKPoint {
	double x;
	double y;
	double z;
} VKPoint;

typedef struct {
	double v[4][4];
} SCD_Struct_VK42;

typedef struct {
	BOOL orthographic;
	double width;
	double height;
	double near;
	double far;
} SCD_Struct_VK43;

typedef struct Vec3Imp<double> {
	double x;
	double y;
	double z;
} Vec3Imp<double>;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_VK45;

typedef struct VKEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} VKEdgeInsets;

typedef struct {
	double x0;
	double x1;
	double y0;
	double y1;
} SCD_Struct_VK47;

typedef struct VKFootprintConvexHull_struct {
	int edgeCount;
	VKPoint edgeOrigin[6];
	Vec3Imp<double> edgeNormal[6];
} VKFootprintConvexHull_struct;

typedef struct {
	VKPoint p;
	Vec3Imp<double> n;
} SCD_Struct_VK49;

typedef struct VKTileKey {
	unsigned z;
	int x;
	int y;
	unsigned pointSize;
} VKTileKey;

typedef struct {
	double x0;
	double x1;
	double y0;
	double y1;
	double z0;
	double z1;
} SCD_Struct_VK51;

typedef struct VKCameraState {
	VKPoint position;
	SCD_Struct_VK42 orientation;
	float aspectRatio;
	float verticalFieldOfView;
} VKCameraState;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_VK53;

typedef struct {
	VKPoint field1;
	double field2;
	BOOL field3;
} SCD_Struct_VK54;

typedef struct VKCacheKey {
	unsigned a;
	unsigned b;
	unsigned c;
	unsigned d;
} VKCacheKey;

typedef struct {
	unsigned long field1;
	id field2;
	unsigned long field3;
	unsigned long field4[5];
} SCD_Struct_VK56;

typedef struct {
	unsigned version : 1;
} SCD_Struct_VK57;

typedef struct {
	unsigned list;
	unsigned count;
	unsigned size;
} SCD_Struct_VK58;

typedef struct {
	float list;
	unsigned count;
	unsigned size;
} SCD_Struct_VK59;

typedef struct {
	unsigned alternateFillColor : 1;
	unsigned arrowCollisionOrder : 1;
	unsigned arrowCollisionRank : 1;
	unsigned arrowColor : 1;
	unsigned arrowHaloColor : 1;
	unsigned arrowHeight : 1;
	unsigned arrowHeightLarge : 1;
	unsigned arrowHeightMedium : 1;
	unsigned arrowHeightSmall : 1;
	unsigned arrowHeightXLarge : 1;
	unsigned arrowHeightXXLarge : 1;
	unsigned arrowMinZoom : 1;
	unsigned arrowSelectedMinZoom : 1;
	unsigned arrowSpacing : 1;
	unsigned brightness : 1;
	unsigned buildingFacadeColor : 1;
	unsigned buildingFlatColor : 1;
	unsigned buildingLandmarkColor : 1;
	unsigned buildingOutlineColor : 1;
	unsigned buildingRoofStyle : 1;
	unsigned buildingStrokeColor3d : 1;
	unsigned buildingStrokeWidth3d : 1;
	unsigned buildingTopColor : 1;
	unsigned casingsColor : 1;
	unsigned casingsHeight : 1;
	unsigned casingsShadowRamp : 1;
	unsigned casingsShadowWidth : 1;
	unsigned casingsStrokeColor : 1;
	unsigned casingsStrokeWidth : 1;
	unsigned casingsWidth : 1;
	unsigned curbColor : 1;
	unsigned dropShadowColor : 1;
	unsigned fancyCasingsColor : 1;
	unsigned fancyCasingsStrokeColor : 1;
	unsigned fancyCasingsStrokeWidth : 1;
	unsigned fancyCasingsWidth : 1;
	unsigned fillColor : 1;
	unsigned fillTextureBlendMode : 1;
	unsigned fillTextureOpacity : 1;
	unsigned fillZIndex : 1;
	unsigned genericShieldBackgroundColor : 1;
	unsigned genericShieldBorderColor : 1;
	unsigned genericShieldDropShadowColor : 1;
	unsigned genericShieldDropShadowSize : 1;
	unsigned genericShieldHaloColor : 1;
	unsigned genericShieldHaloSize : 1;
	unsigned genericShieldStyle : 1;
	unsigned genericShieldTextColor : 1;
	unsigned glossColor : 1;
	unsigned horizonColor : 1;
	unsigned insetShadowAngle : 1;
	unsigned insetShadowColor : 1;
	unsigned insetShadowHeight : 1;
	unsigned labelArrowLayer : 1;
	unsigned labelClass : 1;
	unsigned labelCollisionOrder : 1;
	unsigned labelCollisionRank : 1;
	unsigned labelColor : 1;
	unsigned labelDedupeRank : 1;
	unsigned labelFontExpansion : 1;
	unsigned labelFontExpansionLarge : 1;
	unsigned labelFontExpansionMedium : 1;
	unsigned labelFontExpansionSmall : 1;
	unsigned labelFontExpansionXLarge : 1;
	unsigned labelFontExpansionXXLarge : 1;
	unsigned labelHaloColor : 1;
	unsigned labelHaloSize : 1;
	unsigned labelHaloSizeLarge : 1;
	unsigned labelHaloSizeMedium : 1;
	unsigned labelHaloSizeSmall : 1;
	unsigned labelHaloSizeXLarge : 1;
	unsigned labelHaloSizeXXLarge : 1;
	unsigned labelHeight : 1;
	unsigned labelHeightCurve : 1;
	unsigned labelHeightCurveLimit : 1;
	unsigned labelHeightLarge : 1;
	unsigned labelHeightLargeCurve : 1;
	unsigned labelHeightLargeCurveLimit : 1;
	unsigned labelHeightMedium : 1;
	unsigned labelHeightMediumCurve : 1;
	unsigned labelHeightMediumCurveLimit : 1;
	unsigned labelHeightSmall : 1;
	unsigned labelHeightSmallCurve : 1;
	unsigned labelHeightSmallCurveLimit : 1;
	unsigned labelHeightXLarge : 1;
	unsigned labelHeightXLargeCurve : 1;
	unsigned labelHeightXLargeCurveLimit : 1;
	unsigned labelHeightXXLarge : 1;
	unsigned labelHeightXXLargeCurve : 1;
	unsigned labelHeightXXLargeCurveLimit : 1;
	unsigned labelIconBadgeColor : 1;
	unsigned labelIconBadgeLightBlendMode : 1;
	unsigned labelIconBadgeLightColor : 1;
	unsigned labelIconBevelAmount : 1;
	unsigned labelIconCornerRadius : 1;
	unsigned labelIconDropShadowColor : 1;
	unsigned labelIconDropShadowSize : 1;
	unsigned labelIconGlowBlendMode : 1;
	unsigned labelIconGlyphBlendMode : 1;
	unsigned labelIconGlyphColor : 1;
	unsigned labelIconGlyphStyle : 1;
	unsigned labelIconHaloColor : 1;
	unsigned labelIconHaloSize : 1;
	unsigned labelIconSource : 1;
	unsigned labelIconStyle : 1;
	unsigned labelLayer : 1;
	unsigned labelLineWrap : 1;
	unsigned labelOffsetLarge : 1;
	unsigned labelOffsetMedium : 1;
	unsigned labelOffsetSmall : 1;
	unsigned labelOffsetXLarge : 1;
	unsigned labelOffsetXXLarge : 1;
	unsigned labelParallaxHeight : 1;
	unsigned labelRoadRank : 1;
	unsigned labelShieldRank : 1;
	unsigned labelSpacing : 1;
	unsigned labelSpacingLarge : 1;
	unsigned labelSpacingMedium : 1;
	unsigned labelSpacingSmall : 1;
	unsigned labelSpacingXLarge : 1;
	unsigned labelSpacingXXLarge : 1;
	unsigned labelTextVisibility : 1;
	unsigned labelTiltLimit : 1;
	unsigned layerShadowsRamp : 1;
	unsigned layerShadowsTaper : 1;
	unsigned layerShadowsWidth : 1;
	unsigned lineColor : 1;
	unsigned lineDrawStyle : 1;
	unsigned margin : 1;
	unsigned marginBottom : 1;
	unsigned marginLeft : 1;
	unsigned marginRight : 1;
	unsigned marginTop : 1;
	unsigned maxScale : 1;
	unsigned navLabelSignBrightness : 1;
	unsigned outerStrokeColor : 1;
	unsigned outerStrokeWidth : 1;
	unsigned patternScaler : 1;
	unsigned patternScalerQuantizationFactor : 1;
	unsigned polygonType : 1;
	unsigned puckArrowBrightness : 1;
	unsigned puckArrowColor : 1;
	unsigned puckArrowColorStale : 1;
	unsigned puckArrowShadowBrightness : 1;
	unsigned puckCircleBrightness : 1;
	unsigned puckDomeBrightness : 1;
	unsigned puckRimBrightness : 1;
	unsigned railroadPattern : 1;
	unsigned routeEnlargementScale : 1;
	unsigned routeEnlargementStartZoom : 1;
	unsigned secondFillTextureBlendMode : 1;
	unsigned secondFillTextureOpacity : 1;
	unsigned shieldCollisionOrder : 1;
	unsigned shieldCollisionRank : 1;
	unsigned shieldSize : 1;
	unsigned shieldTiltLimit : 1;
	unsigned strokeColor : 1;
	unsigned strokeWidth : 1;
	unsigned strokeWidthCurve : 1;
	unsigned strokeWidthCurveLimit : 1;
	unsigned thirdFillTextureBlendMode : 1;
	unsigned thirdFillTextureOpacity : 1;
	unsigned trafficAnimationBaseSpeed : 1;
	unsigned trafficAnitialiasingOffset : 1;
	unsigned trafficAnitialiasingSlope : 1;
	unsigned trafficGlowFadingEnd : 1;
	unsigned trafficGlowFadingStart : 1;
	unsigned trafficIncidentAccidentMinZ : 1;
	unsigned trafficIncidentBrightness : 1;
	unsigned trafficIncidentConstructionMinZ : 1;
	unsigned trafficIncidentEventMinZ : 1;
	unsigned trafficIncidentHazardMinZ : 1;
	unsigned trafficIncidentLaneClosureMinZ : 1;
	unsigned trafficIncidentRampClosureMinZ : 1;
	unsigned trafficIncidentRoadClosureMinZ : 1;
	unsigned trafficIncidentUnknownMinZ : 1;
	unsigned trafficShiftEnd : 1;
	unsigned trafficShiftStart : 1;
	unsigned trafficWidth : 1;
	unsigned travelledColor : 1;
	unsigned width : 1;
	unsigned widthCurve : 1;
	unsigned widthCurveLimit : 1;
	unsigned widthDropoff : 1;
	unsigned zIndex : 1;
	unsigned arrowVisible : 1;
	unsigned buildingOutlineVisible : 1;
	unsigned casingsVisible : 1;
	unsigned fancyCasingsVisible : 1;
	unsigned fillColorInterpolate : 1;
	unsigned labelRaisedInitial : 1;
	unsigned labelSelectable : 1;
	unsigned labelSmallCaps : 1;
	unsigned labelUpcase : 1;
	unsigned layerShadowsVisible : 1;
	unsigned navLabelShieldVisible : 1;
	unsigned navLabelSignVisible : 1;
	unsigned navLabelSuppressSignIfHaveShield : 1;
	unsigned onlyShowIfTappable : 1;
	unsigned poiDisabledLabelIconVisible : 1;
	unsigned poiDisabledLabelTextVisible : 1;
	unsigned renderEndCaps : 1;
	unsigned shieldVisible : 1;
	unsigned showLabelAsShield : 1;
	unsigned showShieldTextAsLabel : 1;
	unsigned simpleLine : 1;
	unsigned strokeColorInterpolate : 1;
	unsigned trafficVisible : 1;
	unsigned visible : 1;
	unsigned yieldsToOnscreenLabels : 1;
} SCD_Struct_VK60;

typedef struct {
	double latitude;
	double longitude;
} SCD_Struct_VK61;

typedef struct {
	id field1;
	char* field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	unsigned field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	id field12;
	int field13;
} SCD_Struct_VK62;

typedef struct CGImage* CGImageRef;

typedef struct CGImageBlockSet* CGImageBlockSetRef;

typedef struct shared_ptr<vk::LabelManager> {
	LabelManager __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::LabelManager>;

typedef struct _compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > {
	shared_ptr<vk::InfoMapTile> __first_;
} compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > >;

typedef struct vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > {
	shared_ptr<vk::InfoMapTile> __begin_;
	shared_ptr<vk::InfoMapTile> __end_;
	compressed_pair<std::__1::shared_ptr<vk::InfoMapTile> *, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > > __end_cap_;
} vector<std::__1::shared_ptr<vk::InfoMapTile>, vk_allocator<std::__1::shared_ptr<vk::InfoMapTile> > >;

typedef struct __CTFont* CTFontRef;

typedef struct {
	SCD_Struct_VK61 origin;
	SCD_Struct_VK61 size;
} SCD_Struct_VK69;

typedef struct {
	unsigned buildingChangeoverZ : 1;
	unsigned globeLODScale : 1;
	unsigned lodOffset : 1;
	unsigned minLineTriangleWidth : 1;
	unsigned minTrafficTypeAccidentZ : 1;
	unsigned minTrafficTypeConstructionZ : 1;
	unsigned minTrafficTypeEventZ : 1;
	unsigned minTrafficTypeHazardZ : 1;
	unsigned minTrafficTypeLaneClosureZ : 1;
	unsigned minTrafficTypeRampClosureZ : 1;
	unsigned minTrafficTypeRoadClosureZ : 1;
	unsigned minTrafficTypeUnknownZ : 1;
	unsigned rasterPolygonChangeoverZ : 1;
	unsigned realisticNightBrightness : 1;
	unsigned realisticShieldNightBrightness : 1;
	unsigned shieldNightBrightness : 1;
	unsigned tiltLimitSatelliteScale : 1;
} SCD_Struct_VK70;

typedef struct {
	VKPoint position;
	double course;
	BOOL onRoute;
} SCD_Struct_VK71;

typedef struct SpringDamper {
	double _position;
	double _velocity;
	double _acceleration;
	double _kSpring;
	double _kDamper;
	double _restingPosition;
	bool _directionIsPositive;
} SpringDamper;

typedef struct AngularSpringDamper {
	double _position;
	double _velocity;
	double _acceleration;
	double _kSpring;
	double _kDamper;
	double _restingPosition;
	bool _directionIsPositive;
} AngularSpringDamper;

typedef struct State {
	double _course;
	double _referenceScreenOffset;
	double _pitch;
	double _boomLength;
} State;

typedef struct VKNavigationCameraModel {
	double _halfVerticalFov;
	double _horizontalFov;
	double _tanHalfHorizontalFov;
	SpringDamper _pitchSpring;
	AngularSpringDamper _courseSpring;
	SpringDamper _referenceScreenOffsetSpring;
	SpringDamper _boomLengthSpring;
	State _targetState;
	double _previousUpdateTime;
} VKNavigationCameraModel;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> {
	__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > {
	__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true>, vk_allocator<std::__1::pair<VKVectorTile *, OccluderGroupList> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKVectorTile *, OccluderGroupList>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true> > __p3_;
} hash_table<std::__1::pair<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true>, vk_allocator<std::__1::pair<VKVectorTile *, OccluderGroupList> > >;

typedef struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, vk_allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > {
	hash_table<std::__1::pair<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, OccluderGroupList, std::__1::equal_to<VKVectorTile *>, true>, vk_allocator<std::__1::pair<VKVectorTile *, OccluderGroupList> > > __table_;
} unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, vk_allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > >;

typedef struct _compressed_pair<PolygonRenderStep *, vk_allocator<PolygonRenderStep> > {
	/*function pointer*/ void* __first_;
} compressed_pair<PolygonRenderStep *, vk_allocator<PolygonRenderStep> >;

typedef struct vector<PolygonRenderStep, vk_allocator<PolygonRenderStep> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<PolygonRenderStep *, vk_allocator<PolygonRenderStep> > __end_cap_;
} vector<PolygonRenderStep, vk_allocator<PolygonRenderStep> >;

typedef struct RenderStepsSet {
	vector<PolygonRenderStep, vk_allocator<PolygonRenderStep> > renderSteps;
	vector<PolygonRenderStep, vk_allocator<PolygonRenderStep> > transparentRenderSteps;
} RenderStepsSet;

typedef struct _compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > {
	vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > __first_;
} compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > >;

typedef struct vector<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > {
	vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > __begin_;
	vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > __end_;
	compressed_pair<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > *, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > > __end_cap_;
} vector<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >, vk_allocator<std::__1::vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > > >;

typedef struct _compressed_pair<VGLMeshVendor **, vk_allocator<VGLMeshVendor *> > {
	id __first_;
} compressed_pair<VGLMeshVendor **, vk_allocator<VGLMeshVendor *> >;

typedef struct vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> > {
	id __begin_;
	id __end_;
	compressed_pair<VGLMeshVendor **, vk_allocator<VGLMeshVendor *> > __end_cap_;
} vector<VGLMeshVendor *, vk_allocator<VGLMeshVendor *> >;

typedef struct _compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > {
	/*function pointer*/ void* __first_;
} compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> >;

typedef struct vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<VKBuildingHeightMap *, vk_allocator<VKBuildingHeightMap> > __end_cap_;
} vector<VKBuildingHeightMap, vk_allocator<VKBuildingHeightMap> >;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> {
	__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > {
	__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > >;

typedef struct _hash_table<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true>, vk_allocator<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true>, vk_allocator<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > >;

typedef struct unordered_map<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<std::__1::pair<const int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > > {
	hash_table<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > >, std::__1::__unordered_map_hasher<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::equal_to<int>, true>, vk_allocator<std::__1::pair<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > > __table_;
} unordered_map<int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> >, std::__1::hash<int>, std::__1::equal_to<int>, vk_allocator<std::__1::pair<const int, std::__1::vector<const vk::DiscontinuityEdgeInfo *, vk_allocator<const vk::DiscontinuityEdgeInfo *> > > > >;

typedef struct {
	SCD_Struct_VK62 field1;
	char* field2;
	unsigned field3;
} SCD_Struct_VK105;

typedef struct {
	int field1;
	int field2;
} SCD_Struct_VK106;

typedef struct weak_ptr<vk::LabelManager> {
	LabelManager __ptr_;
	__shared_weak_count __cntrl_;
} weak_ptr<vk::LabelManager>;

typedef struct _compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> > >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::RoadLabelFeature>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::RoadLabelFeature>, void *> > >;

typedef struct _tree<std::__1::weak_ptr<vk::RoadLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::RoadLabelFeature> > > {
	__tree_node<std::__1::weak_ptr<vk::RoadLabelFeature>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::RoadLabelFeature>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> > > __pair3_;
} tree<std::__1::weak_ptr<vk::RoadLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::RoadLabelFeature> > >;

typedef struct set<std::__1::weak_ptr<vk::RoadLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::RoadLabelFeature> > > {
	tree<std::__1::weak_ptr<vk::RoadLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::RoadLabelFeature> > > __tree_;
} set<std::__1::weak_ptr<vk::RoadLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::RoadLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::RoadLabelFeature> > >;

typedef struct _compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::PointLabelFeature>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::PointLabelFeature>, void *> > >;

typedef struct _tree<std::__1::weak_ptr<vk::PointLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::PointLabelFeature> > > {
	__tree_node<std::__1::weak_ptr<vk::PointLabelFeature>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::weak_ptr<vk::PointLabelFeature>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> > > __pair3_;
} tree<std::__1::weak_ptr<vk::PointLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::PointLabelFeature> > >;

typedef struct set<std::__1::weak_ptr<vk::PointLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::PointLabelFeature> > > {
	tree<std::__1::weak_ptr<vk::PointLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::PointLabelFeature> > > __tree_;
} set<std::__1::weak_ptr<vk::PointLabelFeature>, std::__1::owner_less<std::__1::weak_ptr<vk::PointLabelFeature> >, vk_allocator<std::__1::weak_ptr<vk::PointLabelFeature> > >;

typedef struct PolylineCoordinate {
	unsigned index;
	float offset;
} PolylineCoordinate;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_VK118;

typedef struct {
	SCD_Struct_VK62 field1;
	unsigned field2;
	unsigned field3;
	int field4;
	int field5;
	int field6;
	unsigned field7;
	unsigned field8;
	bool field9;
	R field10;
	e field11;
	BOOL field12;
	t field13;
	unsigned field14;
	m field15;
	p field16;
	< field17;
	float field18;
	long field19;
	o field20;
	a field21;
	t field22;
	> field23;
	/*function pointer*/ void* field24;
	SCD_Struct_VK118 field25;
	unsigned char field26;
} SCD_Struct_VK119;

typedef struct {
	int field1;
	int field2;
	int field3;
} SCD_Struct_VG120;

typedef struct {
	int iconStyle;
	VGLColor iconBadgeColor;
	VGLColor iconGradientColor[2];
	VGLColor iconBadgeLightColor;
	int iconBadgeLightBlendMode;
	VGLColor iconGlyphColor;
	int iconGlyphStyle;
	int iconGlyphBlendMode;
	float iconHaloSize;
	VGLColor iconHaloColor;
	CGSize iconDropShadowOffset;
	float iconDropShadowSize;
	VGLColor iconDropShadowColor;
	float iconCornerRadius;
	float iconBrightness;
	float iconBevelAmount;
	unsigned iconSourceStyleAttributeKey;
} SCD_Struct_VK121;

typedef struct {
	int field1;
	_ field2;
	VGLColor field3;
	VGLColor field4[2_];
	_ field5;
	VGLColor field6;
	int field7;
	_ field8;
	VGLColor field9;
	int field10;
	int field11;
	float field12;
	_ field13;
	VGLColor field14;
	VGLColor field15;
	float field16;
	_ field17;
	CGSize field18;
	float field19;
	float field20;
	float field21;
	unsigned field22;
} SCD_Struct_VK122;

typedef struct {
	int from;
	int to;
	int fromDisplayStyle;
	int toDisplayStyle;
	float fraction;
} SCD_Struct_VK123;

typedef struct {
	SCD_Struct_VG29 field1;
	V field2;
	e field3;
	BOOL field4;
	2 field5;
	unsigned field6;
	m field7;
	p field8;
	< field9;
	float field10;
	long field11;
	o field12;
	a field13;
	t field14;
	> field15;
} SCD_Struct_VG124;

typedef struct {
	int list;
	unsigned count;
	unsigned size;
} SCD_Struct_VK125;

typedef struct SimpleBuffer<unsigned char> {
	unsigned _size;
	unsigned _capacity;
	char* _buf;
} SimpleBuffer<unsigned char>;

typedef struct SimpleBuffer<unsigned short> {
	unsigned _size;
	unsigned _capacity;
	unsigned short _buf;
} SimpleBuffer<unsigned short>;

typedef struct {
	unsigned char field1;
	unsigned short field2;
} SCD_Struct_VK128;

typedef struct {
	unsigned field1;
	int field2;
	float field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
	BOOL field7;
	BOOL field8;
	SCD_Struct_VK128 field9[16];
} SCD_Struct_VK129;

typedef struct {
	VKCacheKey field1;
	SCD_Struct_VK129 field2;
} SCD_Struct_VK130;

typedef struct {
	unsigned field1;
	double field2;
	SCD_Struct_VK61 field3;
	PolylineCoordinate field4;
} SCD_Struct_VK131;

typedef struct {
	double field1;
	VKPoint field2;
	PolylineCoordinate field3;
	double field4;
	double field5;
	unsigned field6;
	BOOL field7;
	SCD_Struct_VK131 field8;
} SCD_Struct_VK132;

typedef struct GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct _compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record __first_;
} compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> >;

typedef struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record __begin_;
	Record __end_;
	compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > __end_cap_;
} vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> >;

typedef struct TrafficSkeletonTile {
	vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > m_records;
} TrafficSkeletonTile;

typedef struct _compressed_pair<VKRibbonMultiPolylineSegment *, vk_allocator<VKRibbonMultiPolylineSegment> > {
	VKRibbonMultiPolylineSegment __first_;
} compressed_pair<VKRibbonMultiPolylineSegment *, vk_allocator<VKRibbonMultiPolylineSegment> >;

typedef struct vector<VKRibbonMultiPolylineSegment, vk_allocator<VKRibbonMultiPolylineSegment> > {
	VKRibbonMultiPolylineSegment __begin_;
	VKRibbonMultiPolylineSegment __end_;
	compressed_pair<VKRibbonMultiPolylineSegment *, vk_allocator<VKRibbonMultiPolylineSegment> > __end_cap_;
} vector<VKRibbonMultiPolylineSegment, vk_allocator<VKRibbonMultiPolylineSegment> >;

typedef struct _compressed_pair<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> *, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > > {
	pair<unsigned int, VKRibbonMultiPolylineSegment *> __first_;
} compressed_pair<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> *, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > >;

typedef struct vector<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > > {
	pair<unsigned int, VKRibbonMultiPolylineSegment *> __begin_;
	pair<unsigned int, VKRibbonMultiPolylineSegment *> __end_;
	compressed_pair<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> *, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > > __end_cap_;
} vector<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > >;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> {
	__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > > {
	__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true> > __p3_;
} hash_table<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > >;

typedef struct unordered_multimap<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, VKRibbonMultiPolylineSegment *> > > {
	hash_table<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *>, std::__1::__unordered_map_hasher<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::equal_to<unsigned int>, true>, vk_allocator<std::__1::pair<unsigned int, VKRibbonMultiPolylineSegment *> > > __table_;
} unordered_multimap<unsigned int, VKRibbonMultiPolylineSegment *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, vk_allocator<std::__1::pair<const unsigned int, VKRibbonMultiPolylineSegment *> > >;

typedef struct {
	SCD_Struct_VK42 arrowMatrix;
	SCD_Struct_VK42 circleMatrix;
	VGLColor arrowColor;
} SCD_Struct_VK151;

typedef struct opaque_pthread_mutex_t {
	long __sig;
	BOOL __opaque[40];
} opaque_pthread_mutex_t;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct shared_ptr<geo::MapEdge> {
	MapEdge __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<geo::MapEdge>;

typedef struct _compressed_pair<geo::Vec2Imp<float> *, vk_allocator<geo::Vec2Imp<float> > > {
	Vec2Imp<float> __first_;
} compressed_pair<geo::Vec2Imp<float> *, vk_allocator<geo::Vec2Imp<float> > >;

typedef struct vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > > {
	Vec2Imp<float> __begin_;
	Vec2Imp<float> __end_;
	compressed_pair<geo::Vec2Imp<float> *, vk_allocator<geo::Vec2Imp<float> > > __end_cap_;
} vector<geo::Vec2Imp<float>, vk_allocator<geo::Vec2Imp<float> > >;

typedef struct _compressed_pair<geo::PolylineCoordinate *, vk_allocator<geo::PolylineCoordinate> > {
	PolylineCoordinate __first_;
} compressed_pair<geo::PolylineCoordinate *, vk_allocator<geo::PolylineCoordinate> >;

typedef struct vector<geo::PolylineCoordinate, vk_allocator<geo::PolylineCoordinate> > {
	PolylineCoordinate __begin_;
	PolylineCoordinate __end_;
	compressed_pair<geo::PolylineCoordinate *, vk_allocator<geo::PolylineCoordinate> > __end_cap_;
} vector<geo::PolylineCoordinate, vk_allocator<geo::PolylineCoordinate> >;

typedef struct _compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData> > {
	_VKRealisticPolygonMetaData __first_;
} compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData> >;

typedef struct vector<_VKRealisticPolygonMetaData, vk_allocator<_VKRealisticPolygonMetaData> > {
	_VKRealisticPolygonMetaData __begin_;
	_VKRealisticPolygonMetaData __end_;
	compressed_pair<_VKRealisticPolygonMetaData *, vk_allocator<_VKRealisticPolygonMetaData> > __end_cap_;
} vector<_VKRealisticPolygonMetaData, vk_allocator<_VKRealisticPolygonMetaData> >;

typedef struct Vec2Imp<float> {
	float x;
	float y;
} Vec2Imp<float>;

typedef struct RouteLineStyle {
	float strokeWidthRegularPoints;
	double halfWidthRegularPoints;
	double halfWidthRegularUnselectedScale;
	double halfWidthRealisticMeters;
	VGLColor travelledRegularRouteLineColor;
	VGLColor inverseBaseColorSelected;
	VGLColor inverseBaseColorUnselected;
	NSString* selectedTextureNameRealistic;
	NSString* obscuredTextureNameRealistic;
	NSString* travelledTextureNameRealistic;
	double widthEnlargementStartZoom;
	double widthEnlargementScale;
	double maxEnlargement;
	float arrowMinZoom;
	float selectedArrowMinZoom;
	float brightnessRealistic;
} RouteLineStyle;

typedef struct __CFSet* CFSetRef;

typedef struct {
	SCD_Struct_VG29 field1;
	SCD_Struct_VG29 field2;
	Vec2Imp<float> field3;
} SCD_Struct_VG164;

typedef struct {
	float x;
	float y;
	float z;
} SCD_Struct_VG165;

typedef struct shared_ptr<vk::InfoLabel> {
	InfoLabel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::InfoLabel>;

typedef struct {
	unsigned anchorPointX : 1;
	unsigned anchorPointY : 1;
	unsigned iconRectHeight : 1;
	unsigned iconRectWidth : 1;
	unsigned iconRectX : 1;
	unsigned iconRectY : 1;
	unsigned matchingStyleAttributeKey : 1;
	unsigned matchingStyleAttributeValue : 1;
} SCD_Struct_VK167;

typedef struct __IOSurface* IOSurfaceRef;

typedef struct {
	VKPoint position;
	Vec3Imp<double> tangent;
	BOOL tangentValid;
} SCD_Struct_VK169;

typedef struct {
	double mb[4][3];
} SCD_Struct_VK170;

typedef struct {
	VKPoint field1;
	Vec3Imp<double> field2;
	BOOL field3;
} SCD_Struct_VK171;

typedef struct shared_ptr<VGLMeshNode> {
	VGLMeshNode __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<VGLMeshNode>;

typedef struct _compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode> > {
	VGLMeshLeafNode __first_;
} compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode> >;

typedef struct vector<VGLMeshLeafNode, vk_allocator<VGLMeshLeafNode> > {
	VGLMeshLeafNode __begin_;
	VGLMeshLeafNode __end_;
	compressed_pair<VGLMeshLeafNode *, vk_allocator<VGLMeshLeafNode> > __end_cap_;
} vector<VGLMeshLeafNode, vk_allocator<VGLMeshLeafNode> >;

typedef struct bitset<32> {
	unsigned __first_;
} bitset<32>;

typedef struct {
	float _a;
	unsigned _b;
	unsigned _g;
	unsigned _r;
} SCD_Struct_VK176;

typedef struct {
	unsigned offsetX : 1;
	unsigned offsetY : 1;
} SCD_Struct_VK177;

typedef struct {
	SCD_Struct_VK176 _color;
	float _offsetX;
	float _offsetY;
	float _size;
	SCD_Struct_VK177 _has;
} SCD_Struct_VK178;

typedef struct {
	SCD_Struct_VK176 _color;
	float _width;
} SCD_Struct_VK179;

typedef struct {
	unsigned textShadow : 1;
	unsigned textStroke : 1;
	unsigned fontColor : 1;
	unsigned centerOffsetX : 1;
	unsigned fontSize : 1;
	unsigned maxDigits : 1;
	unsigned minDigits : 1;
	unsigned nonDigitFontSize : 1;
	unsigned textBaseLine : 1;
} SCD_Struct_VK180;

typedef struct {
	SCD_Struct_VK176 field1;
	float field2;
} SCD_Struct_VK181;

typedef struct {
	SCD_Struct_VK176 field1;
	float field2;
	float field3;
	float field4;
	SCD_Struct_VK177 field5;
} SCD_Struct_VK182;

typedef struct _compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> > {
	TileExclusionArea __first_;
} compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> >;

typedef struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea> > {
	TileExclusionArea __begin_;
	TileExclusionArea __end_;
	compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> > __end_cap_;
} vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea> >;

typedef struct shared_ptr<vk::InfoMapTile> {
	InfoMapTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::InfoMapTile>;

typedef struct __CTLine* CTLineRef;

typedef struct shared_ptr<vk::Anchor> {
	Anchor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::Anchor>;

typedef struct shared_ptr<vk::ViewTransform> {
	ViewTransform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::ViewTransform>;

typedef struct _compressed_pair<vk::RouteLineSection *, vk_allocator<vk::RouteLineSection> > {
	RouteLineSection __first_;
} compressed_pair<vk::RouteLineSection *, vk_allocator<vk::RouteLineSection> >;

typedef struct vector<vk::RouteLineSection, vk_allocator<vk::RouteLineSection> > {
	RouteLineSection __begin_;
	RouteLineSection __end_;
	compressed_pair<vk::RouteLineSection *, vk_allocator<vk::RouteLineSection> > __end_cap_;
} vector<vk::RouteLineSection, vk_allocator<vk::RouteLineSection> >;

typedef struct _compressed_pair<VGLArrowMeshInfo *, vk_allocator<VGLArrowMeshInfo> > {
	/*function pointer*/ void* __first_;
} compressed_pair<VGLArrowMeshInfo *, vk_allocator<VGLArrowMeshInfo> >;

typedef struct vector<VGLArrowMeshInfo, vk_allocator<VGLArrowMeshInfo> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<VGLArrowMeshInfo *, vk_allocator<VGLArrowMeshInfo> > __end_cap_;
} vector<VGLArrowMeshInfo, vk_allocator<VGLArrowMeshInfo> >;

typedef struct _compressed_pair<routelineTrafficSegment *, vk_allocator<routelineTrafficSegment> > {
	const outelineTrafficSegment __first_;
} compressed_pair<routelineTrafficSegment *, vk_allocator<routelineTrafficSegment> >;

typedef struct vector<routelineTrafficSegment, vk_allocator<routelineTrafficSegment> > {
	const outelineTrafficSegment __begin_;
	const outelineTrafficSegment __end_;
	compressed_pair<routelineTrafficSegment *, vk_allocator<routelineTrafficSegment> > __end_cap_;
} vector<routelineTrafficSegment, vk_allocator<routelineTrafficSegment> >;

typedef struct {
	int field1;
	int field2;
	float field3;
	int field4;
	float field5;
} SCD_Struct_VG195;

typedef struct shared_ptr<vk::AnchorContext> {
	AnchorContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::AnchorContext>;

typedef struct shared_ptr<vk::AnchorFactory> {
	AnchorFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::AnchorFactory>;

typedef struct shared_ptr<vk::VKGlobeStylesheet> {
	VKGlobeStylesheet __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::VKGlobeStylesheet>;

typedef struct AltitudeDebugSettings {
	BOOL altitudePauseLoading;
	BOOL altitudeShowTileBounds;
	BOOL altitudeThreadDrawing;
	BOOL altitudeHighResSatellite;
	BOOL altitudeMipmapSatellite;
	BOOL altitudeMipmapFlyover;
	BOOL altitudeShowNightLight;
	float lodScale;
	float animationSpinTime;
	float tileQualityThreshold;
	float forceGridTime;
	float tourAnimationAltitude;
	float tourAnimationStepDuration;
	float tourAnimationCameraOffset;
	float tourAnimationTilt;
} AltitudeDebugSettings;

typedef struct shared_ptr<bool> {
	bool __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<bool>;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> {
	__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > > {
	__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > >;

typedef struct _hash_table<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true>, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true> > __p3_;
} hash_table<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true>, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > > > >;

typedef struct unordered_map<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, std::__1::equal_to<VKPolylineOverlaySection *>, vk_allocator<std::__1::pair<VKPolylineOverlaySection *const, std::__1::vector<VGLRect, vk_allocator<VGLRect> > > > > {
	hash_table<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > >, std::__1::__unordered_map_hasher<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, true>, std::__1::__unordered_map_equal<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::equal_to<VKPolylineOverlaySection *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> > > > > __table_;
} unordered_map<VKPolylineOverlaySection *, std::__1::vector<VGLRect, vk_allocator<VGLRect> >, std::__1::hash<VKPolylineOverlaySection *>, std::__1::equal_to<VKPolylineOverlaySection *>, vk_allocator<std::__1::pair<VKPolylineOverlaySection *const, std::__1::vector<VGLRect, vk_allocator<VGLRect> > > > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > >;

typedef struct _tree<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	__tree_node<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, vk_allocator<std::__1::__tree_node<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true> > __pair3_;
} tree<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, vk_allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	tree<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, true>, vk_allocator<std::__1::pair<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > __tree_;
} map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, vk_allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	/*function pointer*/ void* field5;
} SCD_Struct_VK215;

typedef struct _compressed_pair<geo::Vec2Imp<double> *, vk_allocator<geo::Vec2Imp<double> > > {
	Vec2Imp<double> __first_;
} compressed_pair<geo::Vec2Imp<double> *, vk_allocator<geo::Vec2Imp<double> > >;

typedef struct vector<geo::Vec2Imp<double>, vk_allocator<geo::Vec2Imp<double> > > {
	Vec2Imp<double> __begin_;
	Vec2Imp<double> __end_;
	compressed_pair<geo::Vec2Imp<double> *, vk_allocator<geo::Vec2Imp<double> > > __end_cap_;
} vector<geo::Vec2Imp<double>, vk_allocator<geo::Vec2Imp<double> > >;

typedef struct {
	/*function pointer*/ void* field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	unsigned field5;
	/*function pointer*/ void* field6;
	/*function pointer*/ void* field7;
} SCD_Struct_VK218;

typedef struct _compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > {
	shared_ptr<vk::NavLabel> __first_;
} compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > >;

typedef struct vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > {
	shared_ptr<vk::NavLabel> __begin_;
	shared_ptr<vk::NavLabel> __end_;
	compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > > __end_cap_;
} vector<std::__1::shared_ptr<vk::NavLabel>, vk_allocator<std::__1::shared_ptr<vk::NavLabel> > >;

typedef struct shared_ptr<zilch::TrafficDynamicTile> {
	TrafficDynamicTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<zilch::TrafficDynamicTile>;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> {
	__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > {
	__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > >;

typedef struct _hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *> > >;

typedef struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, vk_allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *> > > {
	hash_table<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::equal_to<long long>, true>, vk_allocator<std::__1::pair<long long, const zilch::TrafficDynamicTile::Flow *> > > __table_;
} unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, vk_allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *> > >;

typedef struct _compressed_pair<VKMapTile **, vk_allocator<VKMapTile *> > {
	id __first_;
} compressed_pair<VKMapTile **, vk_allocator<VKMapTile *> >;

typedef struct vector<VKMapTile *, vk_allocator<VKMapTile *> > {
	id __begin_;
	id __end_;
	compressed_pair<VKMapTile **, vk_allocator<VKMapTile *> > __end_cap_;
} vector<VKMapTile *, vk_allocator<VKMapTile *> >;

typedef struct _compressed_pair<VGLRect *, vk_allocator<VGLRect> > {
	/*function pointer*/ void* __first_;
} compressed_pair<VGLRect *, vk_allocator<VGLRect> >;

typedef struct vector<VGLRect, vk_allocator<VGLRect> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<VGLRect *, vk_allocator<VGLRect> > __end_cap_;
} vector<VGLRect, vk_allocator<VGLRect> >;

typedef struct Vector2i {
	int _x;
	int _y;
} Vector2i;

typedef struct Position3d {
	double _latitude;
	double _longitude;
	double _height;
} Position3d;

typedef struct PositionGeo3d {
	double _x;
	double _y;
	double _z;
} PositionGeo3d;

typedef struct Vector3d {
	double _x;
	double _y;
	double _z;
} Vector3d;

typedef struct CameraManager {
	/*function pointer*/ void* _vptr$CameraManager;
	bool _panBegin;
	bool _panInProgress;
	bool _panEnd;
	Vector2i _panCurrentCursor;
	Vector2i _panPreviousCursor;
	Position3d _panStartPosition;
	double _panDistance;
	bool _rotateBegin;
	bool _rotateInProgress;
	bool _rotateEnd;
	Position3d _rotateStartPosition;
	Vector2i _rotateCurrentCursor;
	double _rotateAngle;
	bool _tiltBegin;
	bool _tiltInProgress;
	bool _tiltEnd;
	Position3d _tiltStartPosition;
	Vector2i _tiltCurrentCursor;
	double _tiltAngle;
	bool _zoomBegin;
	bool _zoomInProgress;
	bool _zoomEnd;
	Position3d _zoomStartPosition;
	Vector2i _zoomCurrentCursor;
	double _zoomFactor;
	bool _zoomRotateToNorth;
	bool _useTiltLimit;
	int _tiltLimitMode;
	bool _tiltLimitTransferInProgress;
	bool _tiltLimitPushDown;
	double _startPushDownTilt;
	double _tiltLimitTransferFraction;
	double _startTiltLimitTilt;
	PositionGeo3d _startTiltLimitPosition;
	Vector3d _startTiltLimitDirection;
	double _fullZoomTiltLimitFactor;
} CameraManager;

typedef struct {
	int blendMode;
	float opacity;
} SCD_Struct_VG241;

typedef struct {
	SCD_Struct_VK62 field1;
	Vec2Imp<float> field2;
	unsigned char field3;
	BOOL field4;
	BOOL field5;
	/*function pointer*/ void* field6;
} SCD_Struct_VK242;

typedef const struct vector<unsigned int, vk_allocator<unsigned int> >* vector<unsigned int, vk_allocator<unsigned int> >Ref;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<vk::Anchor *, float>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<vk::Anchor *, float>, void *> > >;

typedef struct _tree<std::__1::pair<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::pair<vk::Anchor *, float> > > {
	__tree_node<std::__1::pair<vk::Anchor *, float>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<vk::Anchor *, float>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true> > __pair3_;
} tree<std::__1::pair<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::pair<vk::Anchor *, float> > >;

typedef struct map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float> > > {
	tree<std::__1::pair<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, float, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::pair<vk::Anchor *, float> > > __tree_;
} map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float> > >;

typedef struct _compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment> > {
	TrafficSegment __first_;
} compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment> >;

typedef struct vector<TrafficSegment, vk_allocator<TrafficSegment> > {
	TrafficSegment __begin_;
	TrafficSegment __end_;
	compressed_pair<TrafficSegment *, vk_allocator<TrafficSegment> > __end_cap_;
} vector<TrafficSegment, vk_allocator<TrafficSegment> >;

typedef struct shared_ptr<vk::NavLabel> {
	NavLabel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::NavLabel>;

typedef struct _compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo __first_;
} compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo> >;

typedef struct vector<LabelNavJunctionInfo, vk_allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo __begin_;
	LabelNavJunctionInfo __end_;
	compressed_pair<LabelNavJunctionInfo *, vk_allocator<LabelNavJunctionInfo> > __end_cap_;
} vector<LabelNavJunctionInfo, vk_allocator<LabelNavJunctionInfo> >;

typedef struct Vec2Imp<double> {
	double x;
	double y;
} Vec2Imp<double>;

typedef struct BRectImp<double> {
	Vec2Imp<double> p0;
	Vec2Imp<double> p1;
} BRectImp<double>;

typedef struct _compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > {
	unsigned long __first_;
} compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> {
	__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > >;

typedef struct _bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > {
	compressed_pair<unsigned long, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > __data_;
} bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > {
	__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> __first_;
	bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > >;

typedef struct _hash_table<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true>, vk_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, vk_allocator<std::__1::__hash_node<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true>, vk_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, vk_allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > {
	hash_table<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::equal_to<std::__1::basic_string<char> >, true>, vk_allocator<std::__1::pair<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, vk_allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >;

typedef struct _compressed_pair<RouteSegment *, vk_allocator<RouteSegment> > {
	RouteSegment __first_;
} compressed_pair<RouteSegment *, vk_allocator<RouteSegment> >;

typedef struct vector<RouteSegment, vk_allocator<RouteSegment> > {
	RouteSegment __begin_;
	RouteSegment __end_;
	compressed_pair<RouteSegment *, vk_allocator<RouteSegment> > __end_cap_;
} vector<RouteSegment, vk_allocator<RouteSegment> >;

typedef struct {
	unsigned field1;
	int field2;
	int field3;
	int field4;
	int field5;
} SCD_Struct_VK267;

typedef struct VKProfileSparseRampValue {
	float value;
	unsigned char hi;
} VKProfileSparseRampValue;

typedef struct VKProfileSparseRamp<float> {
	_u u;
	VKProfileSparseRampValue v[2];
	f) extra;
	unsigned char count;
} VKProfileSparseRamp<float>;

typedef struct VKProfileSparseRamp<_VGLColor> {
	_u u;
	VKProfileSparseRampValue v[2];
	_VGLColor) extra;
	unsigned char count;
} VKProfileSparseRamp<_VGLColor>;

typedef struct VKProfileSparseRamp<signed char> {
	_u u;
	VKProfileSparseRampValue v[2];
	*) extra;
	unsigned char count;
} VKProfileSparseRamp<signed char>;

typedef struct VKProfileSparseRamp<int> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<int>;

typedef struct {
	VKProfileSparseRamp<_VGLColor> fillColor;
	VKProfileSparseRamp<_VGLColor> secondaryColor;
	3f pattern;
	2f fadingFactor;
} SCD_Struct_VK273;

typedef struct VKProfileSparseRamp<unsigned int> {
	_u u;
	VKProfileSparseRampValue v[2];
	I) extra;
	unsigned char count;
} VKProfileSparseRamp<unsigned int>;

typedef struct VKProfileSparseRamp<VKLabelTextVisibility> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<VKLabelTextVisibility>;

typedef struct VKProfileSparseRamp<VKBlendMode> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<VKBlendMode>;

typedef struct VKProfileSparseRamp<VKIconGlyphStyle> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<VKIconGlyphStyle>;

typedef struct VKProfileSparseRamp<CGSize> {
	_u u;
	VKProfileSparseRampValue v[2];
	CGSize) extra;
	unsigned char count;
} VKProfileSparseRamp<CGSize>;

typedef struct VKProfileSparseRamp<VKPStyleProperties_GenericShieldStyle> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<VKPStyleProperties_GenericShieldStyle>;

typedef struct VKProfileSparseRamp<VKPStyleProperties_ShieldSize> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<VKPStyleProperties_ShieldSize>;

typedef struct {
	BOOL field1;
	float field2;
	float field3;
} SCD_Struct_VK281;

typedef struct _compressed_pair<LineDash *, vk_allocator<LineDash> > {
	LineDash __first_;
} compressed_pair<LineDash *, vk_allocator<LineDash> >;

typedef struct vector<LineDash, vk_allocator<LineDash> > {
	LineDash __begin_;
	LineDash __end_;
	compressed_pair<LineDash *, vk_allocator<LineDash> > __end_cap_;
} vector<LineDash, vk_allocator<LineDash> >;

typedef struct _compressed_pair<LineStipple *, vk_allocator<LineStipple> > {
	LineStipple __first_;
} compressed_pair<LineStipple *, vk_allocator<LineStipple> >;

typedef struct vector<LineStipple, vk_allocator<LineStipple> > {
	LineStipple __begin_;
	LineStipple __end_;
	compressed_pair<LineStipple *, vk_allocator<LineStipple> > __end_cap_;
} vector<LineStipple, vk_allocator<LineStipple> >;

typedef struct VKProfileSparseRamp<geo::Vec2Imp<float> > {
	_u u;
	VKProfileSparseRampValue v[2];
	Vec2Imp<float>) extra;
	unsigned char count;
} VKProfileSparseRamp<geo::Vec2Imp<float> >;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	unsigned field3 : 1;
	unsigned field4 : 1;
	unsigned field5 : 1;
} SCD_Struct_VK287;

typedef struct {
	unsigned field1;
	float field2;
	unsigned field3;
	unsigned field4;
	int field5;
	SCD_Struct_VK287 field6;
} SCD_Struct_VK288;

typedef struct VKRasterTileKey {
	unsigned x;
	unsigned y;
	unsigned z;
	unsigned pointSize;
} VKRasterTileKey;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct _compressed_pair<vk::SnappedPathMapMatchingSection *, std::__1::default_delete<vk::SnappedPathMapMatchingSection> > {
	SnappedPathMapMatchingSection __first_;
} compressed_pair<vk::SnappedPathMapMatchingSection *, std::__1::default_delete<vk::SnappedPathMapMatchingSection> >;

typedef struct unique_ptr<vk::SnappedPathMapMatchingSection, std::__1::default_delete<vk::SnappedPathMapMatchingSection> > {
	compressed_pair<vk::SnappedPathMapMatchingSection *, std::__1::default_delete<vk::SnappedPathMapMatchingSection> > __ptr_;
} unique_ptr<vk::SnappedPathMapMatchingSection, std::__1::default_delete<vk::SnappedPathMapMatchingSection> >;

typedef struct _compressed_pair<GEOLocationCoordinate2D *, vk_allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/ void* __first_;
} compressed_pair<GEOLocationCoordinate2D *, vk_allocator<GEOLocationCoordinate2D> >;

typedef struct vector<GEOLocationCoordinate2D, vk_allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/ void* __begin_;
	/*function pointer*/ void* __end_;
	compressed_pair<GEOLocationCoordinate2D *, vk_allocator<GEOLocationCoordinate2D> > __end_cap_;
} vector<GEOLocationCoordinate2D, vk_allocator<GEOLocationCoordinate2D> >;

