/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 4:09:31 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSCH3DGeometry.h>

@class TSCH3DNormalDirectionMapper;

@interface TSCH3DPieWedgeGeometry : TSCH3DGeometry {

	float mStartAngle;
	float mEndAngle;
	int mAngleSteps;
	int mRadiusSteps;
	int mBevelEdgeSteps;
	float mRadius;
	float mBottomZ;
	float mTopZ;
	int mCapOffset;
	int mCapCount;
	TSCH3DNormalDirectionMapper* mNormalDirectionMapper;

}

@property (assign,nonatomic) float startAngle; 
@property (assign,nonatomic) float endAngle; 
@property (assign,nonatomic) int angleSteps; 
@property (assign,nonatomic) int radiusSteps; 
@property (assign,nonatomic) int bevelEdgeSteps; 
@property (assign,nonatomic) float radius; 
@property (assign,nonatomic) float bottomZ; 
@property (assign,nonatomic) float topZ; 
@property (nonatomic,readonly) int capOffset; 
@property (nonatomic,readonly) int capCount; 
@property (nonatomic,readonly) TSCH3DNormalDirectionMapper * normalDirectionMapper; 
-(int)capOffset;
-(void)generateArrays;
-(void)setAngleSteps:(int)arg1 ;
-(void)setRadiusSteps:(int)arg1 ;
-(void)setBevelEdgeSteps:(int)arg1 ;
-(void)setBottomZ:(float)arg1 ;
-(void)setTopZ:(float)arg1 ;
-(id)normalDirectionMapper;
-(int)capCount;
-(id)selectionKnobPositions;
-(float)bevelHeight;
-(void)generateRoundedTop:(vector<float, std::__1::allocator<float> >*)arg1 radiusArray:(vector<float, std::__1::allocator<float> >*)arg2 ;
-(void)p_generateBevelCoordinates:(vector<glm::detail::tvec3<float>, std::__1::allocator<glm::detail::tvec3<float> > >*)arg1 andAngles:(vector<float, std::__1::allocator<float> >*)arg2 radiusArray:(const vector<float, std::__1::allocator<float> >*)arg3 topArray:(const vector<float, std::__1::allocator<float> >*)arg4 ;
-(void)p_generateAngles:(vector<float, std::__1::allocator<float> >*)arg1 ;
-(BOOL)isFullCircle;
-(float)topZ;
-(int)angleSteps;
-(int)radiusSteps;
-(float)bottomZ;
-(int)bevelEdgeSteps;
-(float)endAngle;
-(void)setEndAngle:(float)arg1 ;
-(void)dealloc;
-(id)init;
-(void)setStartAngle:(float)arg1 ;
-(float)startAngle;
-(void)setRadius:(float)arg1 ;
-(float)radius;
-(int)geometryCount;
@end

