/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 4:09:48 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDMediaRep.h>
#import <iWorkImport/TSDMagicMoveMatching.h>
#import <iWorkImport/TSDShapeControlRep.h>

@protocol OS_dispatch_queue, OS_dispatch_semaphore;
@class TSDLayoutGeometry, CALayer, CAShapeLayer, TSDInstantAlphaTracker, NSRecursiveLock, TSDImageRepSizingState, NSObject, NSCache, NSMutableArray;

@interface TSDImageRep : TSDMediaRep <TSDMagicMoveMatching, TSDShapeControlRep> {

	TSDLayoutGeometry* mLastImageGeometryInRoot;
	TSDLayoutGeometry* mLastMaskGeometryInRoot;
	CGAffineTransform mLastLayoutToImageTransform;
	CGRect mFrameInUnscaledCanvasRelativeToSuper;
	BOOL mFrameInUnscaledCanvasIsValid;
	CALayer* mContentsLayer;
	CAShapeLayer* mMaskPathLayer;
	CAShapeLayer* mIAMaskLayer;
	CAShapeLayer* mMaskSublayer;
	CGAffineTransform mLastPictureFrameLayerTransform;
	BOOL mDirectlyManagesLayerContent;
	BOOL mShowImageHighlight;
	BOOL mInInstantAlphaMode;
	TSDInstantAlphaTracker* mInstantAlphaTracker;
	CGImageRef mInstantAlphaImage;
	CGAffineTransform mBaseMaskLayoutTransform;
	NSRecursiveLock* mLayerUpdateAndSizingStateLock;
	TSDImageRepSizingState* mSizingState;
	BOOL mSizingStateReady;
	NSObject<OS_dispatch_queue>* mSizedImageAccessQueue;
	CGImageRef mSizedImage;
	CGSize mSizedImageSize;
	int mSizedImageOrientation;
	BOOL mSizedImageHasMaskBakedIn;
	BOOL mSizedImageHasAdjustmentsBakedIn;
	CGPathRef mSizedImageMaskPath;
	NSCache* mHitTestCache;
	long mHitTestCacheOnce;
	NSMutableArray* mUpdateFromLayoutBlocks;
	NSObject<OS_dispatch_semaphore>* mUpdateFromLayoutBlocksLock;

}

@property (nonatomic,readonly) TSDInstantAlphaTracker * instantAlphaTracker; 
+(float)magicMoveAttributeMatchPercentBetweenOutgoingObject:(id)arg1 incomingObject:(id)arg2 ;
+(CGPathRef)p_newPathToBakeIntoSizedImageForSize:(CGSize)arg1 withImageLayout:(id)arg2 orientation:(int)arg3 ;
-(void)processChanges:(id)arg1 ;
-(id)initWithLayout:(id)arg1 canvas:(id)arg2 ;
-(void)layoutInRootChangedFrom:(id)arg1 to:(id)arg2 translatedOnly:(BOOL)arg3 ;
-(void)willBeRemoved;
-(CGRect)frameInUnscaledCanvas;
-(void)willUpdateLayer:(id)arg1 ;
-(void)didUpdateLayer:(id)arg1 ;
-(void)becameNotSelected;
-(BOOL)shouldShowSelectionHighlight;
-(void)dynamicDragDidBegin;
-(void)dynamicDragDidEnd;
-(id)dynamicResizeDidBegin;
-(void)dynamicResizeDidEndWithTracker:(id)arg1 ;
-(void)viewScaleDidChange;
-(CGRect)boundsForStandardKnobs;
-(void)updatePositionsOfKnobs:(id)arg1 ;
-(id)newTrackerForKnob:(id)arg1 ;
-(BOOL)directlyManagesLayerContent;
-(BOOL)canDrawInParallel;
-(BOOL)shouldShowDragHUD;
-(id)textureForContext:(id)arg1 ;
-(void)updateFromLayout;
-(id)overlayLayers;
-(CGPoint)centerForRotation;
-(int)dragTypeAtCanvasPoint:(CGPoint)arg1 ;
-(void)addKnobsToArray:(id)arg1 ;
-(CGRect)snapRectForDynamicDragWithOffset:(CGPoint)arg1 ;
-(void)processChangedProperty:(int)arg1 ;
-(void)drawInLayerContext:(CGContextRef)arg1 ;
-(id)imageLayout;
-(float)maskScale;
-(void)beginDynamicallyChangingMaskScale;
-(id)resizedGeometryForTransform:(CGAffineTransform)arg1 ;
-(id)maskLayout;
-(id)maskInfo;
-(void)endDynamicallyChangingMaskScale:(float)arg1 ;
-(void)editMaskWithHUD:(BOOL)arg1 ;
-(void)beginEditingImageInMaskEditMode;
-(void)beginEditingMaskInMaskEditMode;
-(void)willBeginReadMode;
-(BOOL)handleDoubleTapAtPoint:(CGPoint)arg1 ;
-(void)i_willEnterForeground;
-(void)updateLayerGeometryFromLayout:(id)arg1 ;
-(id)additionalLayersOverLayer;
-(id)hitRepChrome:(CGPoint)arg1 ;
-(BOOL)shouldCreateSelectionKnobs;
-(CGPoint)positionOfStandardKnob:(id)arg1 forBounds:(CGRect)arg2 ;
-(CGRect)boundsForHighlightLayer;
-(CGAffineTransform)transformForHighlightLayer;
-(CGPoint)i_dragOffset;
-(BOOL)allowDragDelegate;
-(void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(CGContextRef)arg2 ;
-(float)additionalRotationForKnobOrientation;
-(BOOL)providesGuidesWhileAligning;
-(BOOL)exclusivelyProvidesGuidesWhileAligning;
-(BOOL)resetGuidesAfterDragAfterReset;
-(BOOL)demandsExclusiveSelection;
-(float)angleForRotation;
-(CGPoint)unscaledGuidePosition;
-(void)dynamicallyRotatingWithTracker:(id)arg1 ;
-(void)dynamicRotateDidEndWithTracker:(id)arg1 ;
-(CGRect)targetRectForEditMenu;
-(id)infoForTransforming;
-(BOOL)wantsGuidesWhileResizing;
-(BOOL)wantsToDistortWithImagerContext;
-(void)dynamicMoveSmartShapeKnobDidBegin;
-(void)dynamicallyMovedSmartShapeKnobTo:(CGPoint)arg1 withTracker:(id)arg2 ;
-(BOOL)shouldShowShadow;
-(void)dynamicMoveSmartShapeKnobDidEndWithTracker:(id)arg1 ;
-(void)drawInContextWithoutEffects:(CGContextRef)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(BOOL)arg4 forAlphaOnly:(BOOL)arg5 drawChildren:(BOOL)arg6 ;
-(id)imageOfStroke:(CGRect*)arg1 ;
-(id)pathSourceForSelectionHighlightBehavior;
-(BOOL)canDrawShadowInOneStepWithChildren:(BOOL)arg1 ;
-(void)p_updateDirectlyManagesLayerContentForLayer:(id)arg1 ;
-(void)p_disposeStrokeLayer;
-(void)p_disposeMaskLayer;
-(void)p_setDefaultMaskWithActionString:(id)arg1 ;
-(void)p_endEditingMask;
-(BOOL)p_shouldBakeMaskIntoSizedImage;
-(void)p_invalidateSizedImage;
-(void)p_setUpMaskModeUI;
-(void)p_updateHUD;
-(void)endInstantAlphaMode;
-(void)endEditingMask;
-(BOOL)p_hitCacheGetCachedValue:(BOOL*)arg1 forPoint:(CGPoint)arg2 ;
-(void)p_drawInContext:(CGContextRef)arg1 withContent:(BOOL)arg2 withStroke:(BOOL)arg3 withOpacity:(float)arg4 withMask:(BOOL)arg5 withIAMask:(BOOL)arg6 forLayer:(BOOL)arg7 forShadowOrHitTest:(BOOL)arg8 ;
-(void)p_hitCacheSetCachedValue:(BOOL)arg1 forPoint:(CGPoint)arg2 ;
-(void)maskWithHUD:(BOOL)arg1 ;
-(BOOL)shouldShowSmartMaskKnobs;
-(id)p_validatedBitmapImageProvider;
-(void)p_invalidateSizedImageFromQueue;
-(void)p_invalidateHitTestCache;
-(BOOL)shouldShowMediaReplaceUI;
-(BOOL)shouldAllowReplacementFromPaste;
-(id)commandToResetToSize:(CGSize)arg1 ;
-(void)beginInstantAlphaMode;
-(id)p_validatedImageProvider;
-(void)p_cleanUpMaskModeUI;
-(CGImageRef)p_newImageByApplyingAdjustmentsToImage:(CGImageRef)arg1 alreadyEnhanced:(BOOL)arg2 ;
-(id)p_validatedThumbnailImageProvider;
-(id)p_imageData;
-(CGSize)p_desiredSizedImageSize;
-(BOOL)p_directlyManagesContentForLayer:(id)arg1 ;
-(CGImageRef)p_imageForDirectlyManagedLayer:(id)arg1 ;
-(BOOL)p_shouldRenderWithMaskToBounds;
-(void)p_getAliasedValuesForMaskToBoundsDirectLayerFrame:(out CGRect*)arg1 transform:(out CGAffineTransform*)arg2 ;
-(int)p_orientationForDirectlyManagedLayer;
-(void)p_takeSizedImageFromStateIfReady;
-(void)p_generateSizedImageIfNecessary;
-(void)p_createMaskLayerForLayer:(id)arg1 ;
-(void)p_updateStrokeLayerForStroke:(id)arg1 repLayer:(id)arg2 ;
-(BOOL)p_shouldMaskWithFrameLayers;
-(void)p_updateMaskSublayersForMaskEditMode;
-(void)p_updateMaskLayer:(id)arg1 forRepLayer:(id)arg2 shouldIncludeMask:(BOOL)arg3 shouldIncludeInstantAlpha:(BOOL)arg4 ;
-(void)setMagicMoveTextureAttributes:(id)arg1 ;
-(id)p_imageProvider;
-(BOOL)p_drawsInOneStep;
-(BOOL)shouldShowReflection;
-(BOOL)p_okayToGenerateSizedImage;
-(void)p_startSizing;
-(void)p_generateSizedImageInBackground:(id)arg1 ;
-(void)p_generateSizedImage:(id)arg1 ;
-(void)p_didGenerateSizedImageInBackground;
-(void)p_takeSizedImageFromState;
-(void)unhighlightImage;
-(void)maskScaleLimitsReturningMin:(float*)arg1 max:(float*)arg2 ;
-(void)dynamicallySetMaskScale:(float)arg1 ;
-(void)resetMask;
-(void)p_canvasSelectionDidChange:(id)arg1 ;
-(CGImageRef)imageForInstantAlpha;
-(void)p_popoverViewPresented:(id)arg1 ;
-(id)instantAlphaTracker;
-(void)dealloc;
-(BOOL)containsPoint:(CGPoint)arg1 ;
-(void)highlightImage;
-(id)imageInfo;
-(BOOL)isDraggable;
-(int)tilingMode;
@end

