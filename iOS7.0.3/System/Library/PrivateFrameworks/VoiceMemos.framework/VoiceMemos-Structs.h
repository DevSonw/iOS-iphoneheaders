/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:58:22 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/VoiceMemos.framework/VoiceMemos
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct {
	double field1;
	double field2;
} SCD_Struct_RC0;

typedef struct {
	double beginTime;
	double endTime;
} SCD_Struct_RC1;

typedef struct CGPoint {
	float x;
	float y;
} CGPoint;

typedef struct AudioUnitMeterClipping {
	float peakValueSinceLastCall;
	unsigned char sawInfinity;
	unsigned char sawNotANumber;
} AudioUnitMeterClipping;

typedef struct PowerMeter {
	bool mInstantaneousMode;
	double mSampleRate;
	double mPeakDecay1;
	double mPeakDecay;
	double mDecay1;
	double mDecay;
	int mPrevBlockSize;
	int mPeakHoldCount;
	double mPeak;
	double mAveragePowerPeak;
	double mMaxPeak;
	AudioUnitMeterClipping mClipping;
	double mAveragePowerF;
	float m_vAvePower[16];
	int mAveragePowerI;
} PowerMeter;

typedef struct _compressed_pair<float *, std::__1::allocator<float> > {
	float __first_;
} compressed_pair<float *, std::__1::allocator<float> >;

typedef struct vector<float, std::__1::allocator<float> > {
	float __begin_;
	float __end_;
	compressed_pair<float *, std::__1::allocator<float> > __end_cap_;
} vector<float, std::__1::allocator<float> >;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct CGSize {
	float width;
	float height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct UIEdgeInsets {
	float top;
	float left;
	float bottom;
	float right;
} UIEdgeInsets;

typedef struct CGContext* CGContextRef;

typedef struct CGGradient* CGGradientRef;

