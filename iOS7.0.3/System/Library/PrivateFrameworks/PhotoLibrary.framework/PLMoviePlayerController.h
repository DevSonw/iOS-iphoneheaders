/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:56:32 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


@protocol PLMoviePlayerControllerDelegate;
@class AVAsset, AVAudioMix, AVPlayerItem, AVPlayer, PLMoviePlayerView, UIAlertView, PLTVOutWindow, NSString;

@interface PLMoviePlayerController : NSObject {

	AVAsset* _asset;
	AVAudioMix* _audioMix;
	AVPlayerItem* _playerItem;
	AVPlayer* _player;
	PLMoviePlayerView* _view;
	UIAlertView* _alertView;
	PLTVOutWindow* _tvOutWindow;
	BOOL _hasPendingTime;
	double _pendingTime;
	unsigned _pendingTimeSnapOption;
	BOOL _forceUpdateCurrentTime;
	BOOL _isExternalPlayback;
	BOOL _exited;
	double _lastSetCurrentTimeTime;
	BOOL _isSeeking;
	unsigned _backgroundTaskId;
	BOOL _audioSessionActive;
	NSString* _originalAudioCategory;
	BOOL _TVOutEnabled;
	BOOL _forceDisableTVOut;
	BOOL _isPreparedForPlayback;
	BOOL _isActiveController;
	<PLMoviePlayerControllerDelegate>* _delegate;
	unsigned _bufferingState;
	unsigned _playbackState;
	NSString* _audioTimePitchAlgorithm;

}

@property (assign,nonatomic) <PLMoviePlayerControllerDelegate> * delegate;                      //@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,readonly) AVPlayer * player;                                               //@synthesize player=_player - In the implementation block
@property (nonatomic,readonly) PLMoviePlayerView * view;                                        //@synthesize view=_view - In the implementation block
@property (nonatomic,copy) NSString * audioTimePitchAlgorithm;                                  //@synthesize audioTimePitchAlgorithm=_audioTimePitchAlgorithm - In the implementation block
@property (nonatomic,readonly) float playbackRate; 
@property (nonatomic,readonly) unsigned playbackState;                                          //@synthesize playbackState=_playbackState - In the implementation block
@property (nonatomic,readonly) double duration; 
@property (assign,nonatomic) double currentTime; 
@property (nonatomic,readonly) unsigned bufferingState;                                         //@synthesize bufferingState=_bufferingState - In the implementation block
@property (nonatomic,readonly) BOOL isPreparedForPlayback;                                      //@synthesize isPreparedForPlayback=_isPreparedForPlayback - In the implementation block
@property (assign,nonatomic) BOOL TVOutEnabled;                                                 //@synthesize TVOutEnabled=_TVOutEnabled - In the implementation block
@property (assign,setter=_setForceDisableTVOut:,nonatomic) BOOL forceDisableTVOut;              //@synthesize forceDisableTVOut=_forceDisableTVOut - In the implementation block
@property (assign,nonatomic) BOOL isActiveController;                                           //@synthesize isActiveController=_isActiveController - In the implementation block
+(BOOL)_isStreamableAsset:(id)arg1 ;
+(BOOL)_isNetworkSupportedPath:(id)arg1 ;
-(BOOL)_allowsExternalPlayback;
-(id)audioTimePitchAlgorithm;
-(void)_unregisterForNotifications;
-(double)currentTime;
-(unsigned)playbackState;
-(void)play;
-(void)_simpleRemoteNotification:(id)arg1 ;
-(unsigned)bufferingState;
-(BOOL)TVOutEnabled;
-(void)setTVOutEnabled:(BOOL)arg1 ;
-(void)setCurrentTime:(double)arg1 ;
-(void)_willEnterForegroundNotification:(id)arg1 ;
-(void)_didEnterBackgroundNotification:(id)arg1 ;
-(BOOL)videoOutActive;
-(void)setCurrentTime:(double)arg1 timeSnapOption:(unsigned)arg2 ;
-(void)_exitPlayer:(int)arg1 ;
-(void)_registerForNotifications;
-(void)_willSuspendNotification:(id)arg1 ;
-(void)_willBeginSuspendAnimationNotification:(id)arg1 ;
-(void)_willResignNotification:(id)arg1 ;
-(BOOL)isPreparedForPlayback;
-(float)playbackRate;
-(void)_setBufferingState:(unsigned)arg1 ;
-(void)_serverConnectionDidDie:(id)arg1 ;
-(id)_playerKeysToObserve;
-(void)_screenDidConnect:(id)arg1 ;
-(void)_screenDidDisconnect:(id)arg1 ;
-(void)tearDownTVOutWindow;
-(void)playFromBeginning;
-(void)_updateBackgroundViewInformation;
-(void)_updateDisableAirPlayMirroringDuringPlayback;
-(void)_setupTVOutWindow;
-(void)_updateTVOutEnabled;
-(void)_tearDownTVOutWindow;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)delegate;
-(id)view;
-(double)duration;
-(void)alertView:(id)arg1 clickedButtonAtIndex:(int)arg2 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(void)setAsset:(id)arg1 ;
-(void)stop;
-(void)pause;
-(void)willResignAsActiveController;
-(void)didBecomeActiveController;
-(void)requestToResignAsActiveController;
-(id)assetForMovieWithPath:(id)arg1 options:(id)arg2 ;
-(void)setAsset:(id)arg1 audioMix:(id)arg2 startTime:(double)arg3 ;
-(void)playDueToEnoughData;
-(BOOL)isExternalPlayback;
-(void)requestToBecomeActiveController;
-(void)_setupPlayer;
-(void)_setPlayerItem:(id)arg1 ;
-(void)_tearDownPlayer;
-(void)_updateAudioSession;
-(void)_setPlaybackState:(unsigned)arg1 ;
-(void)_loadAsset:(id)arg1 ;
-(void)_playerItemDidReachEndNotification:(id)arg1 ;
-(void)_playerItemFailedToPlayToEndNotification:(id)arg1 ;
-(void)_updateFromPendingTime;
-(void)_didLoadValueOfKey:(id)arg1 forAsset:(id)arg2 ;
-(void)_playerItemFailedToPlayToEnd:(id)arg1 ;
-(void)_streamRanDry;
-(void)_streamBufferFull;
-(void)_streamLikelyToKeepUp;
-(void)_streamUnlikelyToKeepUp;
-(void)_dispatchOnMainThreadWithBlock:(/*^block*/ id)arg1 ;
-(void)_playerRateDidChange:(id)arg1 ;
-(void)setCurrentTime:(double)arg1 timeSnapOption:(unsigned)arg2 forceUpdate:(BOOL)arg3 ;
-(void)_delayedUpdateFromPendingTime;
-(void)_setPlayerAudioSessionActive:(BOOL)arg1 ;
-(void)_restoreTVOutVideoIfNecessary;
-(void)_pausePlaybackForNotification;
-(void)_setForceDisableTVOut:(BOOL)arg1 ;
-(void)_displayVideoView;
-(BOOL)isActiveController;
-(void)setIsActiveController:(BOOL)arg1 ;
-(void)_playbackFailedWithError:(id)arg1 ;
-(void)pauseDueToInsufficientData;
-(BOOL)forceDisableTVOut;
-(void)setAudioTimePitchAlgorithm:(id)arg1 ;
-(id)player;
@end

