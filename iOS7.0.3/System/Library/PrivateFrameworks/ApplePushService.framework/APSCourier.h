/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 4:06:39 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/ApplePushService.framework/apsd
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <apsd/apsd-Structs.h>
#import <apsd/APSTopicManagerDelegate.h>
#import <apsd/APSNetworkMonitorDelegate.h>
#import <apsd/APSCourierConnectionDelegate.h>
#import <apsd/APSConnectionServerDelegate.h>
#import <apsd/APSOutgoingMessageQueueDelegate.h>
#import <apsd/APSSystemMonitorListener.h>
#import <PersistentConnection/PCInterfaceMonitorDelegate.h>
#import <apsd/APSAppLaunchStatsDelegate.h>

@protocol APSCourierDelegate;
@class APSEnvironment, NSMutableArray, APSPushHistory, APSCourierConnection, APSProtocolParser, NSData, NSTimer, NSDate, PCPersistentTimer, APSNetworkMonitor, NSString, NSMutableDictionary, APSTopicManager, APSOutgoingMessageQueue, APSOutgoingQueue;

@interface APSCourier : NSObject <APSTopicManagerDelegate, APSNetworkMonitorDelegate, APSCourierConnectionDelegate, APSConnectionServerDelegate, APSOutgoingMessageQueueDelegate, APSSystemMonitorListener, PCInterfaceMonitorDelegate, APSAppLaunchStatsDelegate> {

	<APSCourierDelegate>* _delegate;
	APSEnvironment* _environment;
	NSMutableArray* _connections;
	SecIdentityRef _clientIdentity;
	APSPushHistory* _pushHistory;
	APSCourierConnection* _courierConnection;
	APSProtocolParser* _protocolParser;
	NSData* _cachedPublicToken;
	BOOL _shouldRun;
	BOOL _enabled;
	BOOL _enableCriticalReliability;
	NSTimer* _criticalFlushTimer;
	BOOL _isConnectedToService;
	BOOL _useAlternatePort;
	unsigned _consecutiveConnectionFailureCount;
	NSDate* _lastConnectionAttempt;
	PCPersistentTimer* _pendingMessageReconnectTimer;
	double _lastClientRequestedKeepaliveTime;
	double _lastLateCriticalOutgoingMessageAcknowledgmentReconnectTime;
	APSNetworkMonitor* _networkMonitor;
	NSString* _lastPushRAT;
	int _lastPushLQ;
	NSMutableDictionary* _connectionPortNamesToConnections;
	NSMutableDictionary* _hashesToEnabledTopics;
	NSMutableDictionary* _hashesToIgnoredTopics;
	NSMutableDictionary* _hashesToOpportunisticTopics;
	APSTopicManager* _topicManager;
	PCPersistentTimer* _criticalReliabilityTimer;
	void* _criticalReliabilityPowerAssertion;
	APSOutgoingMessageQueue* _outgoingMessageQueue;
	APSOutgoingQueue* _tokenRequestQueue;
	double _slowReceiveThreshold;

}

@property (nonatomic,readonly) BOOL hasIdentity; 
@property (assign,nonatomic) BOOL isConnectedToService;                               //@synthesize isConnectedToService=_isConnectedToService - In the implementation block
@property (nonatomic,readonly) APSEnvironment * environment;                          //@synthesize environment=_environment - In the implementation block
@property (nonatomic,@dynamic,readonly) NSData * publicToken; 
@property (nonatomic,readonly) NSString * ifname; 
@property (nonatomic,@dynamic,readonly) unsigned messageSize; 
@property (nonatomic,@dynamic,readonly) double currentKeepAliveInterval; 
@property (nonatomic,readonly) BOOL shouldRun; 
-(SecIdentityRef)_getClientIdentity;
-(void)_disconnectAllStreams;
-(void)_recreateCacheDictionaries;
-(void)connectionWasClosed:(id)arg1 ;
-(void)_recalculateCriticalReliability;
-(void)_criticalReliabilityTimerFired;
-(void)_criticalReliabilityFlushTimerFired;
-(BOOL)isConnectedToService;
-(void)_sendOutgoingMessage:(id)arg1 ;
-(void)_adjustConnection;
-(void)_notePush;
-(void)_processLowPriorityIncomingMessage:(id)arg1 ;
-(void)_notifyForIncomingMessage:(id)arg1 ;
-(void)_schedulePendingWorkUpdate;
-(void)_performKeepAliveOnInterface:(int)arg1 ;
-(BOOL)_adjustConnectionWithInterfacePreference:(int)arg1 ;
-(void)_requestKeepAlive:(BOOL)arg1 orConnection:(BOOL)arg2 onInterface:(int)arg3 ;
-(void)_performFlushWithPaddingLength:(unsigned)arg1 ;
-(void)_requestKeepAlive:(BOOL)arg1 orConnection:(BOOL)arg2 ;
-(void)_processInvalidIdentity;
-(void)_processPendingWorkForTopic:(id)arg1 ;
-(void)_setTopicsForCategory:(int)arg1 ;
-(void)_processShouldRunChangeIfNecessary;
-(id)ifname;
-(void)setPublicToken:(id)arg1 fromServer:(BOOL)arg2 ;
-(void)_processStoredIncomingMessages;
-(void)_processStoredOutgoingMessages;
-(BOOL)shouldRun;
-(BOOL)_connectStreamWithInterfacePreference:(int)arg1 ;
-(void)_disconnectStreamForInterface:(int)arg1 ;
-(BOOL)_isWiFiLinkQualityBetter;
-(void)_startConnectionEstablishTimerOnInterface:(int)arg1 ;
-(int)linkQualityForInterface:(int)arg1 ;
-(void)_handleConnectionFailureOnInterface:(int)arg1 forceDelayedReconnect:(BOOL)arg2 ;
-(void)_processIsPowerEfficientToSendChange;
-(void)_sendQueuedOutgoingMessages;
-(void)_clearKeepAliveResponseTimerOnInterface:(int)arg1 ;
-(void)_clearConnectionEstablishTimerOnInterface:(int)arg1 ;
-(void)setIsConnectedToService:(BOOL)arg1 ;
-(void)__dumpLogsForInconsistencyIfNecessary;
-(void)_updatePendingWork;
-(void)_logTopics;
-(void)_sendFilterMessageOnInterface:(int)arg1 ;
-(void)_dumpLogsForInconsistencyIfNecessary;
-(BOOL)isInternetReachableOnInterface:(int)arg1 ;
-(unsigned)connectionTypeForInterface:(int)arg1 ;
-(void)_handleConnectedMessage:(id)arg1 onInterface:(int)arg2 ;
-(void)_handleMessageMessage:(id)arg1 onInterface:(int)arg2 ;
-(void)_handleOutgoingMessageAcknowledgment:(id)arg1 onInterface:(int)arg2 ;
-(void)_handleKeepAliveResponseMessage:(id)arg1 onInterface:(int)arg2 ;
-(void)_handleFlushMessage:(id)arg1 onInterface:(int)arg2 ;
-(void)_handleAppTokenGenerateResponse:(id)arg1 onInterface:(int)arg2 ;
-(void)_pendingMessageReconnectTimerFired;
-(void)_deleteClientIdentityRequestingReplacement;
-(void)connection:(id)arg1 handleAckIncomingMessageWithGuid:(id)arg2 ;
-(id)_copyParsedPayload:(id)arg1 messageId:(id*)arg2 errorString:(id*)arg3 ;
-(void)_startKeepAliveResponseTimerOnInterface:(int)arg1 ;
-(void)topicManagerRequestToSendFilter:(id)arg1 ;
-(void)networkMonitor:(id)arg1 shouldUseDualModeChanged:(BOOL)arg2 ;
-(void)networkMonitorWiFiBecameAssociated:(id)arg1 ;
-(void)courierConnection:(id)arg1 connectionManager:(id)arg2 handleEvent:(int)arg3 onInterface:(int)arg4 ;
-(void)courierConnection:(id)arg1 disconnectStreamOnInterface:(int)arg2 ;
-(unsigned)courierConnection:(id)arg1 dataReceived:(id)arg2 onInterface:(int)arg3 ;
-(void)courierConnection:(id)arg1 streamEndedOnInterface:(int)arg2 ;
-(void)courierConnection:(id)arg1 errorOccured:(id)arg2 onInterface:(int)arg3 ;
-(void)courierConnection:(id)arg1 receivedServerBag:(id)arg2 ;
-(void)courierConnection:(id)arg1 hasDeterminedServerHostname:(id)arg2 onInterface:(int)arg3 ;
-(void)courierConnectionHasConnected:(id)arg1 onInterface:(int)arg2 ;
-(void)courierConnection:(id)arg1 keepAliveResponseTimerFiredOnInterface:(int)arg2 ;
-(void)courierConnection:(id)arg1 connectionEstablishTimerFiredOnInterface:(int)arg2 ;
-(void)connectionTopicsChanged:(id)arg1 ;
-(BOOL)connectionDelegateHasIdentity:(id)arg1 ;
-(BOOL)connectionDelegateIsConnectedToService:(id)arg1 ;
-(void)connectionChangedCriticalReliability:(id)arg1 ;
-(void)connection:(id)arg1 didReceiveOutgoingMessageToSend:(id)arg2 ;
-(void)connection:(id)arg1 didReceiveCancellationForOutgoingMessageWithID:(unsigned)arg2 ;
-(void)connection:(id)arg1 didReceiveFakeMessageToSend:(id)arg2 ;
-(void)connection:(id)arg1 didRequestPublicTokenForTopic:(id)arg2 identifier:(id)arg3 ;
-(void)connection:(id)arg1 didInvalidatePublicTokenForTopic:(id)arg2 identifier:(id)arg3 ;
-(void)outgoingMessageQueue:(id)arg1 lateAcknowledgmentForCriticalOutgoingMessage:(id)arg2 ;
-(void)outgoingMessageQueue:(id)arg1 requestCriticalMessageFlushWithPaddingLength:(unsigned)arg2 ;
-(void)outgoingMessageQueue:(id)arg1 requestToSendLowPriorityMessages:(id)arg2 ;
-(void)outgoingMessageQueueShortMessageTimeoutExceeded:(id)arg1 ;
-(BOOL)shouldForceShortTimeouts;
-(id)initWithEnvironment:(id)arg1 delegate:(id)arg2 ;
-(id)connectionForConnectionPortName:(id)arg1 ;
-(void)removeConnectionForConnectionPortName:(id)arg1 ;
-(void)requestConnectionIfNeeded;
-(void)periodicSignalFired;
-(void)addConnection:(id)arg1 ;
-(void)dealloc;
-(id)debugDescription;
-(id)environment;
-(void)setEnabled:(BOOL)arg1 ;
-(void)resourceUpdate:(unsigned)arg1 withStatus:(unsigned)arg2 ;
-(void)pendingWorkCanProcess:(id)arg1 ;
-(void)invalidateDeviceIdentity;
-(BOOL)hasIdentity;
-(id)publicToken;
-(double)currentKeepAliveInterval;
-(void)systemDidLock;
-(void)systemDidUnlock;
-(unsigned)messageSize;
-(void)setMessageSize:(unsigned)arg1 ;
-(void)interfaceLinkQualityChanged:(id)arg1 previousLinkQuality:(int)arg2 ;
-(void)interfaceReachabilityChanged:(id)arg1 ;
-(void)interfaceRadioHotnessChanged:(id)arg1 ;
@end

