/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:55:51 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


#import <MusicLibrary/MusicLibrary-Structs.h>
@class ML3DatabaseConnection, MLMediaLibraryServiceStatementAccumulator, ML3SortMap, ML3PersistentIDGenerator, NSCache, ML3MusicLibrary, NSDictionary;

@interface MLImportSession : NSObject {

	ML3DatabaseConnection* _readerConnection;
	MLMediaLibraryServiceStatementAccumulator* _accumulator;
	ML3SortMap* _sortMap;
	unordered_map<long long, CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, CollectionPIDSet> > >* collectionPIDSetForTrackPID;
	SCD_Struct_ML51 _stats;
	int _sourceType;
	BOOL _rebuildIndexes;
	BOOL _rebuildCollections;
	ML3PersistentIDGenerator* _persistentIDGenerator;
	NSCache* _artistPIDsForGroupingKeys;
	NSCache* _albumArtistPIDsForGroupingKeys;
	NSCache* _composerPIDsForGroupingKeys;
	NSCache* _genrePIDsForGroupingKeys;
	NSCache* _albumDataForGroupingIdentifier;
	vector<MLRowDataSource *, std::__1::allocator<MLRowDataSource *> >* _rowDataSources;
	ML3MusicLibrary* _library;
	ML3DatabaseConnection* _connection;
	NSDictionary* _cachedNameOrders;

}

@property (nonatomic,retain) ML3MusicLibrary * library;                       //@synthesize library=_library - In the implementation block
@property (nonatomic,retain) ML3DatabaseConnection * connection;              //@synthesize connection=_connection - In the implementation block
@property (nonatomic,retain) NSDictionary * cachedNameOrders;                 //@synthesize cachedNameOrders=_cachedNameOrders - In the implementation block
-(void)dealloc;
-(BOOL)begin;
-(id).cxx_construct;
-(id)connection;
-(BOOL)finish;
-(void)setConnection:(id)arg1 ;
-(id)library;
-(void)setLibrary:(id)arg1 ;
-(BOOL)removeSource:(int)arg1 fromTracksWithPersistentIDs:(id)arg2 ;
-(BOOL)begin:(unsigned)arg1 ;
-(int)importLogLevel;
-(BOOL)_updateTrackData:(id)arg1 isUpdate:(BOOL)arg2 ;
-(long long)persistentIdentifierForItem:(id)arg1 existing:(BOOL*)arg2 ;
-(BOOL)_prepareSortDataForTrack:(id)arg1 isUpdate:(BOOL)arg2 ;
-(BOOL)_prepareCollectionsForTrack:(id)arg1 isUpdate:(BOOL)arg2 ;
-(long long)_artistPIDForTrack:(id)arg1 ;
-(long long)_albumArtistPIDForTrack:(id)arg1 ;
-(long long)_composerPIDForTrack:(id)arg1 ;
-(long long)_genrePIDForTrack:(id)arg1 ;
-(long long)_locationKindPIDForTrack:(id)arg1 ;
-(long long)_albumPIDForTrack:(id)arg1 albumArtistPID:(long long)arg2 isUpdate:(BOOL)arg3 ;
-(BOOL)updateCollectionRepresentativePIDs;
-(BOOL)updateEntityRevisionTable;
-(id)_generateInsertionSQLWithInsertPart:(id)arg1 numberOfValues:(unsigned)arg2 ;
-(id)_existingCollectionPidForTable:(id)arg1 groupingKey:(id)arg2 ;
-(id)_insertIntoItemArtistSQL;
-(id)_insertIntoAlbumArtistSQL;
-(id)_albumGroupingIdentifierWithAlbumArtistPersistentID:(long long)arg1 withTrack:(id)arg2 ;
-(id)_existingAlbumStateForGroupingIdentifier:(id)arg1 ;
-(BOOL)_updateAlbumEntry:(id)arg1 albumArtistPID:(long long)arg2 albumPid:(long long)arg3 ;
-(id)_insertIntoAlbumSQL;
-(id)_insertIntoComposerSQL;
-(id)_insertIntoGenreSQL;
-(id)initWithLibrary:(id)arg1 onConnection:(id)arg2 ;
-(SCD_Struct_ML54)collectionPIDSetForTrackPID:(long long)arg1 ;
-(BOOL)addTrack:(id)arg1 ;
-(BOOL)updateTrack:(id)arg1 ;
-(BOOL)removeTrack:(id)arg1 ;
-(id)_artistGroupingNameFromDataSource:(id)arg1 ;
-(id)_albumArtistGroupingNameFromDataSource:(id)arg1 ;
-(id)_composerGroupingNameFromDataSource:(id)arg1 ;
-(id)_genreGroupingNameFromDataSource:(id)arg1 ;
-(void)_populateNameOrderWithNameOrderForPIDMap:(unordered_map<long long, ML3NameOrder, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3NameOrder> > >*)arg1 tableName:(id)arg2 nameSQL:(id)arg3 ;
-(id)cachedNameOrders;
-(void)setCachedNameOrders:(id)arg1 ;
-(void).cxx_destruct;
@end

