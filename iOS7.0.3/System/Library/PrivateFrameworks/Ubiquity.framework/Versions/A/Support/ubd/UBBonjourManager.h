/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 4:08:34 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/Ubiquity.framework/Versions/A/Support/ubd
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <ubd/ubd-Structs.h>
#import <AirTraffic/NSNetServiceDelegate.h>
#import <AirTraffic/NSNetServiceBrowserDelegate.h>
#import <IDSFoundation/APSConnectionDelegate.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NSString, NSSet, APSConnection;

@interface UBBonjourManager : NSObject <NSNetServiceDelegate, NSNetServiceBrowserDelegate, APSConnectionDelegate> {

	bool _suspended;
	bool _invalidated;
	bool _setupComplete;
	bool _use_ssl;
	bool _previously_suspended;
	bool _bonjourDisabled;
	bool _srvBonjourDisabled;
	NSObject<OS_dispatch_queue>* _notifyQueue;
	CFRunLoopRef _runloop;
	unsigned char _uuid[16];
	unsigned _sessionId;
	int _port;
	/*function pointer*/ void* _network_change_cb;
	/*function pointer*/ void* _http_timeout_change_cb;
	/*function pointer*/ void* _notify_cb;
	/*function pointer*/ void* _mme_set_token_cb;
	/*function pointer*/ void* _mme_push_cb;
	void* _notify_ctx;
	NSString* _domain;
	NSString* _mmeUUID;
	NSString* _pushEnvironment;
	NSSet* _vlans;
	NSString* _identity;
	int _periodicPushInterval;
	unsigned long long _refetchMMeConfigTime;
	NSObject<OS_dispatch_source>* _periodicPushTimer;
	APSConnection* _pushConnection;
	APSConnection* _persistentPushConnection;
	SCD_Struct_UB1 _browserState;
	SCD_Struct_UB2 _publishedState;
	SCD_Struct_UB4 _serviceState;
	SCNetworkReachabilityRef _reachabilityRef;

}
+(void)ignorePushNotifications:(id)arg1 ;
-(void)_runBlockOnRL:(/*^block*/ id)arg1 ;
-(id)anonymousSubtype;
-(void)_rearmPeriodicPushTimer;
-(void)_deallocBrowserState;
-(void)_deallocPublishedState;
-(void)_deallocServiceState;
-(void)_deallocPushState:(int)arg1 ;
-(void)_deallocReachability;
-(void)_initBrowserState;
-(void)_initPublishedState;
-(void)_initServiceState;
-(void)_initPushState:(int)arg1 ;
-(void)_initReachability;
-(void)_deallocNetworkState;
-(void)_refetchMMeConfig;
-(bool)_splitNetServiceName:(id)arg1 rnd:(unsigned*)arg2 hashedID:(id*)arg3 ;
-(id)_serviceDataForIdentity:(id)arg1 prependedID:(id)arg2 ;
-(void)_parseHTTPTimeoutFromMMeConfig:(id)arg1 ;
-(void)sendMMePush:(id)arg1 ;
-(void)_restartBrowsers;
-(void)_updateServicesForIdentity:(id)arg1 ;
-(void)_initNetworkState;
-(id)_fqdnForNetService:(id)arg1 ;
-(id)_getIdentityForNetService:(id)arg1 rnd:(unsigned*)arg2 ;
-(id)_endPointForServiceDict:(id)arg1 ;
-(id)_fqdnForServiceDict:(id)arg1 ;
-(bool)_havePreferredFQDN:(id)arg1 ;
-(void)_processNetService:(id)arg1 type:(int)arg2 ;
-(bool)_isValid;
-(void)_setNetworkReachable:(BOOL)arg1 ;
-(void)setupClient:(unsigned char)arg1 sessionId:(unsigned)arg2 port:(int)arg3 use_ssl:(bool)arg4 notify_cb:(/*function pointer*/ void*)arg5 notify_ctx:(void*)arg6 domain:(id)arg7 vlans:(id)arg8 unit_test_mode:(bool)arg9 ;
-(void)setupMMeEnvironment:(id)arg1 mme_set_token_cb:(/*function pointer*/ void*)arg2 mme_push_cb:(/*function pointer*/ void*)arg3 network_change_cb:(/*function pointer*/ void*)arg4 http_timeout_change_cb:(/*function pointer*/ void*)arg5 ctx:(void*)arg6 ;
-(void)setMMeUUID:(unsigned char)arg1 ;
-(void)setPreferredFQDN:(id)arg1 forUUID:(unsigned char)arg2 ;
-(void)resumeWithPort:(unsigned short)arg1 ;
-(void)pushSuspend;
-(void)pushResume;
-(void)netServiceDidResolveAddress:(id)arg1 ;
-(void)netService:(id)arg1 didNotResolve:(id)arg2 ;
-(void)netServiceBrowser:(id)arg1 didFindService:(id)arg2 moreComing:(BOOL)arg3 ;
-(void)netServiceBrowser:(id)arg1 didRemoveService:(id)arg2 moreComing:(BOOL)arg3 ;
-(void)netService:(id)arg1 didUpdateTXTRecordData:(id)arg2 ;
-(void)dealloc;
-(id)init;
-(void)invalidate;
-(void)suspend;
-(void)setIdentity:(id)arg1 ;
-(void)connection:(id)arg1 didReceivePublicToken:(id)arg2 ;
-(void)connection:(id)arg1 didReceiveMessageForTopic:(id)arg2 userInfo:(id)arg3 ;
@end

