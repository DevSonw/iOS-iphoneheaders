/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:56:05 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

#import <OfficeImport/EDProcessor.h>

@class EDSheet, EDFormula, EDName, EDRowBlocks;

@interface EPFormulaCleaner : EDProcessor {

	EDSheet* mCurrentSheet;
	EDFormula* mFormula;
	EDFormula* mTokensToClean;
	EDName* mParentName;
	int mRowOffset;
	int mColumnOffset;
	EDRowBlocks* mBaseFormulaRowBlocks;

}
-(void)dealloc;
-(void)reset;
-(bool)isObjectSupported:(id)arg1 ;
-(void)applyProcessorToObject:(id)arg1 sheet:(id)arg2 ;
-(void)reportWarning:(int)arg1 ;
-(void)cleanFormula:(id)arg1 sheet:(id)arg2 ;
-(void)cleanFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3 ;
-(void)cleanFormula:(id)arg1 name:(id)arg2 ;
-(void)prepareToProcessFormula:(id)arg1 sheet:(id)arg2 name:(id)arg3 ;
-(id)newFormulaToCleanFromSharedFormula:(id)arg1 ;
-(bool)cleanTokenAtIndex:(unsigned)arg1 removedTokenCount:(unsigned*)arg2 ;
-(bool)cleanArray:(unsigned)arg1 ;
-(bool)cleanRef:(unsigned)arg1 updateSheet:(BOOL)arg2 ;
-(bool)cleanArea:(unsigned)arg1 updateSheet:(BOOL)arg2 ;
-(bool)cleanName:(unsigned)arg1 ;
-(bool)cleanNameX:(unsigned)arg1 ;
-(bool)cleanRef3D:(unsigned)arg1 ;
-(bool)cleanArea3D:(unsigned)arg1 ;
-(bool)cleanFunc:(unsigned)arg1 ;
-(bool)cleanFuncVar:(unsigned)arg1 ;
-(bool)cleanUnion:(unsigned)arg1 ;
-(bool)cleanRange:(unsigned)arg1 removedTokenCount:(unsigned*)arg2 ;
-(void)addOffsetsToRow:(int*)arg1 rowRelative:(bool)arg2 column:(int*)arg3 columnRelative:(bool)arg4 ;
-(bool)isThereContentOutsideOfLassoBoundsForSheet:(id)arg1 rowMin:(int)arg2 rowMax:(int)arg3 columnMin:(int)arg4 columnMax:(int)arg5 ;
-(bool)isReferenceValidInLassoForRow:(int)arg1 rowRelative:(bool)arg2 column:(int)arg3 columnRelative:(bool)arg4 ;
-(void)updateWorksheet:(id)arg1 row:(int)arg2 column:(int)arg3 inDictionary:(id)arg4 ;
-(void)updateSheet:(id)arg1 row:(int)arg2 rowRelative:(bool)arg3 column:(int)arg4 columnRelative:(bool)arg5 ;
-(bool)isReferenceValidInLassoForSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(bool)arg3 rowMax:(int)arg4 rowMaxRelative:(bool)arg5 columnMin:(int)arg6 columnMinRelative:(bool)arg7 columnMax:(int)arg8 columnMaxRelative:(bool)arg9 ;
-(void)updateSheet:(id)arg1 rowMin:(int)arg2 rowMinRelative:(bool)arg3 rowMax:(int)arg4 rowMaxRelative:(bool)arg5 columnMin:(int)arg6 columnMinRelative:(bool)arg7 columnMax:(int)arg8 columnMaxRelative:(bool)arg9 ;
-(bool)isLinkReferenceIndexSupported:(unsigned)arg1 allowExternal:(bool)arg2 ;
-(id)worksheetFromLinkReferenceIndex:(unsigned)arg1 loadIfNeeded:(bool)arg2 ;
-(bool)cleanName:(unsigned)arg1 nameIndex:(unsigned)arg2 sheetIndex:(unsigned)arg3 ;
-(bool)checkSupportedAddInName:(id)arg1 externalLink:(bool)arg2 ;
-(bool)checkFunctionId:(int)arg1 tokenIndex:(unsigned)arg2 ;
-(unsigned)useEvaluationStackToGetParameter:(unsigned)arg1 tokenIndex:(unsigned)arg2 ;
-(bool)combineCellReferences:(unsigned)arg1 removedTokenCount:(unsigned*)arg2 ;
-(void)reportWarning:(int)arg1 parameter:(id)arg2 ;
-(void)applyMaxCellsInName:(id)arg1 ;
-(bool)useEvaluationStackToCheckFunctionId:(int)arg1 functionName:(id)arg2 tokenIndex:(unsigned)arg3 ;
-(id)useEvaluationStackToGetParameter:(unsigned)arg1 tokenIndex:(unsigned)arg2 allReferencesAllowed:(bool)arg3 success:(bool*)arg4 ;
-(bool)checkCustomFunction:(unsigned)arg1 ;
@end

