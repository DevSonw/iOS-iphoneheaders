/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:56:36 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/PrivateFrameworks/PhotoLibraryServices.framework/PhotoLibraryServices
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


@protocol PLThumbPersistenceManager;
#import <PhotoLibraryServices/PhotoLibraryServices-Structs.h>
@class PLPhotoLibrary, NSLock, NSIndexSet, NSDictionary, NSArray, NSMutableDictionary, PLLargeImageLoader, NSMutableSet;

@interface PLThumbnailManager : NSObject {

	PLPhotoLibrary* _photoLibrary;
	NSLock* _lock;
	NSIndexSet* _occupiedIndexes;
	NSDictionary* _changedPhotosMap;
	NSArray* _changedPhotos;
	NSMutableDictionary* _thumbManagersByFormat;
	<PLThumbPersistenceManager>* _lastUsedThumbManager;
	int _lastUsedThumbManagerFormat;
	PLLargeImageLoader* _largeImageLoaderFullSize;
	PLLargeImageLoader* _largeImageLoaderFullScreen;
	PLLargeImageLoader* _largeImageLoaderFilledScreen;
	PLLargeImageLoader* _largeImageLoaderFilledHalfScreen;
	NSMutableSet* _previouslyRequestedThumbnailFixOIDs;
	NSMutableSet* _requestedThumbnailFixAssets;
	FigCascadeContextRef _unicornContextPortrait;
	FigCascadeContextRef _unicornContextLandscape;
	id _observerToken;

}

@property (assign,nonatomic) PLPhotoLibrary * photoLibrary;                              //@synthesize photoLibrary=_photoLibrary - In the implementation block
@property (nonatomic,readonly) NSMutableDictionary * thumbManagersByFormat;              //@synthesize thumbManagersByFormat=_thumbManagersByFormat - In the implementation block
@property (nonatomic,retain) id observerToken;                                           //@synthesize observerToken=_observerToken - In the implementation block
+(BOOL)isMissingThumbnailTables;
+(BOOL)hasObsoleteThumbnailTables;
+(void)removeObsoleteMetadata;
+(id)defaultThumbnailsDirectoryV2;
+(id)defaultThumbnailsDirectory;
+(BOOL)hasRebuildThumbnailsRequest;
+(int)thumbnailFormat;
+(id)_allPossibleThumbnailFormats;
+(int)thumbnailVersion;
+(id)supportedThumbnailFormats;
+(BOOL)useImageTableForFormat:(int)arg1 ;
+(void)removeRebuildThumbnailsRequest:(const char*)arg1 ;
+(void)resetThumbnails;
+(void)saveCameraPreviewWellImageForAsset:(id)arg1 ;
+(id)cameraPreviewWellImageFileURL;
+(void)saveCameraPreviewWellImage:(CGImageRef)arg1 uuid:(id)arg2 ;
+(id)cameraPreviewWellImageQueue;
+(void)addRebuildThumbnailsRequest;
+(void)rebuildAllMissingThumbnails;
+(BOOL)isRebuildingThumbnails;
+(BOOL)hasExceededRebuildThumbnailRequestLimit;
+(void)handleRebuildThumbnailRequestPersistentFailure;
+(id)cameraPreviewWellImage;
+(id)cameraPreviewWellAssetUUID;
-(void)dealloc;
-(id)initWithWeakPhotoLibrary:(id)arg1 ;
-(void)clearPhotoLibrary;
-(id)photoLibrary;
-(id)dataForPhoto:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 allowPlaceholder:(BOOL)arg9 ;
-(id)newImageForPhoto:(id)arg1 withFormat:(int)arg2 outImageProperties:(const _CFDictionary*)arg3 allowPlaceholder:(BOOL)arg4 ;
-(int)_rebuildAssetThumbnailsWithLimit:(int)arg1 error:(id*)arg2 ;
-(void)setObserverToken:(id)arg1 ;
-(id)observerToken;
-(void)setPhotoLibrary:(id)arg1 ;
-(id)_thumbManagerForFormat:(int*)arg1 ;
-(id)_dataForAsset:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 imageDataFormat:(int*)arg9 ;
-(void)_unicorn_setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2 ;
-(void)_horse_setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2 ;
-(id)_anyImageTable;
-(id)_dataForInFlightAsset:(id)arg1 format:(int)arg2 width:(int*)arg3 height:(int*)arg4 bytesPerRow:(int*)arg5 dataWidth:(int*)arg6 dataHeight:(int*)arg7 imageDataOffset:(int*)arg8 imageDataFormat:(int*)arg9 ;
-(void)setThumbnails:(CFDictionaryRef)arg1 forPhoto:(id)arg2 ;
-(CFDictionaryRef)placeholderThumbnailDataByFormatID;
-(BOOL)copyThumbnailsFromAsset:(id)arg1 toAsset:(id)arg2 ;
-(void)setThumbnailsForPhoto:(id)arg1 withImage:(id)arg2 ;
-(void)deleteThumbnailsWithIdentifier:(id)arg1 orIndex:(unsigned)arg2 uuid:(id)arg3 ;
-(id)preflightImageTableCompactionForPhotos:(id)arg1 ;
-(id)compactImageTables;
-(id)_tableDescriptions;
-(id)preheatItemSourceForFormat:(int)arg1 ;
-(id)thumbnailJPEGPathForPhoto:(id)arg1 ;
-(id)thumbManagersByFormat;
@end

