/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:52:02 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/

typedef struct _compressed_pair<unsigned long, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> >;

typedef struct _compressed_pair<<anonymous>::CMMotionActivityManagerQuery **, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > {
	CMMotionActivityManagerQuery __first_;
} compressed_pair<<anonymous>::CMMotionActivityManagerQuery **, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> >;

typedef struct _split_buffer<<anonymous>::CMMotionActivityManagerQuery *, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > {
	CMMotionActivityManagerQuery __first_;
	CMMotionActivityManagerQuery __begin_;
	CMMotionActivityManagerQuery __end_;
	compressed_pair<<anonymous>::CMMotionActivityManagerQuery **, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > __end_cap_;
} split_buffer<<anonymous>::CMMotionActivityManagerQuery *, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> >;

typedef struct deque<<anonymous>::CMMotionActivityManagerQuery, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > {
	split_buffer<<anonymous>::CMMotionActivityManagerQuery *, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> > __size_;
} deque<<anonymous>::CMMotionActivityManagerQuery, std::__1::allocator<<anonymous>::CMMotionActivityManagerQuery> >;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	float x;
	float y;
	float z;
} SCD_Struct_CM5;

typedef struct {
	double field1;
	double field2;
	double field3;
} SCD_Struct_CM6;

typedef struct {
	double x;
	double y;
	double z;
} SCD_Struct_CM7;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_CM8;

typedef struct {
	SCD_Struct_CM5 field1;
	SCD_Struct_CM5 field2;
	SCD_Struct_CM5 field3;
	SCD_Struct_CM8 field4;
	int field5;
	bool field6;
	bool field7;
	bool field8;
} SCD_Struct_CM9;

typedef struct {
	SCD_Struct_CM7 field1;
	int field2;
} SCD_Struct_CM10;

typedef struct {
	double w;
	double x;
	double y;
	double z;
} SCD_Struct_CM11;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
} SCD_Struct_CM12;

typedef struct Sample {
	double timestamp;
	SCD_Struct_CM5 acceleration;
} Sample;

typedef struct {
	SCD_Struct_CM11 quaternion;
	SCD_Struct_CM5 userAcceleration;
	SCD_Struct_CM5 rotationRate;
	SCD_Struct_CM5 magneticField;
	int magneticFieldCalibrationLevel;
	bool doingYawCorrection;
	bool doingBiasEstimation;
	bool isInitialized;
} SCD_Struct_CM14;

typedef struct _compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > {
	Client __first_;
} compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >;

typedef struct unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > {
	compressed_pair<CLGeomagneticModelProvider_Type::Client *, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> > __ptr_;
} unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >;

typedef struct {
	double x;
	double y;
	double z;
	double magnitude;
	double horizontal;
	double declination;
	double inclination;
	double timestamp;
} SCD_Struct_CM17;

typedef struct CLMotionActivity {
	int type;
	int confidence;
	int mountedState;
	int mountedConfidence;
	float tilt;
	double timestamp;
	int exitState;
	double estExitTime;
	double startTime;
} CLMotionActivity;

typedef struct {
	int type;
} SCD_Struct_CM19;

typedef struct __CFRunLoop* CFRunLoopRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> > > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> > >;

typedef struct _compressed_pair<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> **, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> > {
	pair<NSOperationQueue *, void ()(int, NSError *)> __first_;
} compressed_pair<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> **, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> >;

typedef struct _split_buffer<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> > {
	pair<NSOperationQueue *, void ()(int, NSError *)> __first_;
	pair<NSOperationQueue *, void ()(int, NSError *)> __begin_;
	pair<NSOperationQueue *, void ()(int, NSError *)> __end_;
	compressed_pair<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> **, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> > __end_cap_;
} split_buffer<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> >;

typedef struct deque<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)>, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> > > {
	split_buffer<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> *> > __map_;
	unsigned __start_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> > > __size_;
} deque<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)>, std::__1::allocator<std::__1::pair<NSOperationQueue *, void ()(int, NSError *)> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > >;

typedef struct _tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > {
	__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true> > __pair3_;
} tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > > {
	tree<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *>, std::__1::__map_value_compare<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, true>, std::__1::allocator<std::__1::pair<SEL *, CLIntersiloInterfaceSelectorInfo *> > > __tree_;
} map<SEL *, CLIntersiloInterfaceSelectorInfo *, std::__1::less<SEL *>, std::__1::allocator<std::__1::pair<SEL *const, CLIntersiloInterfaceSelectorInfo *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > {
	unsigned long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > >;

typedef struct _tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > {
	__tree_node<std::__1::pair<unsigned long, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned long, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true> > __pair3_;
} tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > >;

typedef struct map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > > {
	tree<std::__1::pair<unsigned long, int>, std::__1::__map_value_compare<unsigned long, int, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::pair<unsigned long, int> > > __tree_;
} map<unsigned long, int, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, int> > >;

