/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:52:01 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/Frameworks/CoreMotion.framework/CoreMotion
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


#import <CoreMotion/CoreMotion-Structs.h>
@class NSOperationQueue;

@interface CMMotionManagerInternal : NSObject {

	int fSampleLock;
	Dispatcher* fAccelerometerDispatcher;
	double fAccelerometerUpdateInterval;
	/*^block*/ id fAccelerometerHandler;
	NSOperationQueue* fAccelerometerQueue;
	double fLastAccelerometerNotificationTimestamp;
	Sample fLatestAccelerometerSample;
	Dispatcher* fGyroDispatcher;
	double fGyroUpdateInterval;
	/*^block*/ id fGyroHandler;
	NSOperationQueue* fGyroQueue;
	double fLastGyroNotificationTimestamp;
	Sample fLatestGyroSample;
	Dispatcher* fDeviceMotionDispatcher;
	double fDeviceMotionUpdateInterval;
	/*^block*/ id fDeviceMotionHandler;
	NSOperationQueue* fDeviceMotionQueue;
	double fLastDeviceMotionNotificationTimestamp;
	Sample fLatestDeviceMotionSample;
	int fAttitudeReferenceFrame;
	bool fCompassCalibrationHud;
	bool fShowCompassCalibrationHudOnResume;
	bool fHaveSentDeviceRequiresMovementError;
	unique_ptr<CLGeomagneticModelProvider_Type::Client, std::__1::default_delete<CLGeomagneticModelProvider_Type::Client> >* fGeomagneticModelProviderClient;
	SCD_Struct_CM17 fGeomagneticModel;
	bool fHaveSentTrueNorthUnavailableError;
	double fDeviceMotionStartTimestamp;
	Dispatcher* fMagnetometerDispatcher;
	double fMagnetometerUpdateInterval;
	/*^block*/ id fMagnetometerHandler;
	NSOperationQueue* fMagnetometerQueue;
	double fLastMagnetometerNotificationTimestamp;
	Sample fLatestMagnetometerSample;
	bool fShowsDeviceMovementDisplay;
	Dispatcher* fPrivateAccelerometerDataDispatcher;
	/*function pointer*/ void* fPrivateAccelerometerDataCallback;
	void* fPrivateAccelerometerDataCallbackInfo;
	Dispatcher* fPrivateGyroDataDispatcher;
	/*function pointer*/ void* fPrivateGyroDataCallback;
	void* fPrivateGyroDataCallbackInfo;
	Dispatcher* fPrivateDeviceMotionDispatcher;
	/*function pointer*/ void* fPrivateDeviceMotionCallback;
	void* fPrivateDeviceMotionCallbackInfo;
	bool fPrivateDeviceMotionUse9Axis;
	bool fPrivateUseAccelerometer;
	bool fPrivateWantsPowerConservativeDeviceMotion;
	/*function pointer*/ void* fPrivateNotificationCallback;
	void* fPrivateNotificationCallbackInfo;
	Dispatcher* fPrivateDeviceMotionSensorStatusDispatcher;
	Dispatcher* fPrivateDeviceMotionAlgorithmDidResetDispatcher;
	bool fInactive;

}
-(id)initWithInfo:(id)arg1 ;
-(void)dealloc;
-(id).cxx_construct;
-(void).cxx_destruct;
@end

