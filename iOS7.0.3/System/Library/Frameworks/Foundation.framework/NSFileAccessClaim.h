/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:52:21 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/Frameworks/Foundation.framework/Foundation
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_xpc_object, OS_dispatch_semaphore;
@class NSObject, NSString, NSError, NSMutableOrderedSet, NSMutableSet, NSMutableDictionary, NSMutableArray;

@interface NSFileAccessClaim : NSObject {

	NSObject<OS_xpc_object>* _client;
	NSString* _claimID;
	NSString* _purposeIDOrNil;
	BOOL _cameFromSuperarbiter;
	unsigned _blockageCount;
	BOOL _didWait;
	BOOL _isRevoked;
	unsigned _claimerBlockageCount;
	NSError* _claimerError;
	NSMutableOrderedSet* _pendingClaims;
	NSMutableSet* _blockingClaims;
	NSMutableSet* _blockingReactorIDs;
	/*^block*/ id _providerCancellationProcedure;
	NSMutableDictionary* _reacquisitionProceduresByPresenterID;
	NSMutableArray* _revocationProcedures;
	id _claimerOrNil;
	NSObject<OS_dispatch_semaphore>* _claimerWaiterOrNull;
	id _sandboxToken;

}
+(BOOL)canReadingItemAtLocation:(id)arg1 options:(unsigned)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned)arg4 ;
+(BOOL)canWritingItemAtLocation:(id)arg1 options:(unsigned)arg2 safelyOverlapWritingItemAtLocation:(id)arg3 options:(unsigned)arg4 ;
-(BOOL)cameFromSuperarbiter;
-(BOOL)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(BOOL)arg2 ;
-(id)claimID;
-(void)forwardUsingMessageSender:(/*^block*/ id)arg1 crashHandler:(/*^block*/ id)arg2 ;
-(void)unblock;
-(void)revoked;
-(BOOL)isRevoked;
-(BOOL)isGranted;
-(void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2 ;
-(id)initWithClient:(id)arg1 messageParameters:(id)arg2 replySender:(/*^block*/ id)arg3 ;
-(void)setCameFromSuperarbiter;
-(id)pendingClaims;
-(id)newClaimerWaiter;
-(void)granted;
-(void)invokeClaimer;
-(BOOL)claimerInvokingIsBlockedByReactorWithID:(id)arg1 ;
-(id)purposeID;
-(BOOL)isBlockedByClaimWithPurposeID:(id)arg1 ;
-(void)blockClaimer;
-(void)unblockClaimer;
-(void)whenRevokedPerformProcedure:(/*^block*/ id)arg1 ;
-(void)addPendingClaim:(id)arg1 ;
-(void)setClaimerError:(id)arg1 ;
-(void)devalueSelf;
-(id)descriptionWithIndenting:(id)arg1 ;
-(id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3 ;
-(BOOL)didWait;
-(id)claimerError;
-(void)evaluateNewClaim:(id)arg1 ;
-(void)removePendingClaims:(id)arg1 ;
-(BOOL)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned)arg2 ;
-(BOOL)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned)arg2 ;
-(void)makeProviderOfItemAtLocation:(id)arg1 provideThenContinue:(/*^block*/ id)arg2 ;
-(void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(BOOL)arg2 relinquishUsingProcedureGetter:(/*^block*/ id)arg3 ;
-(void)devalueOldClaim:(id)arg1 ;
-(void)ifSymbolicLinkAtURL:(id)arg1 withResolutionCount:(int*)arg2 thenReevaluateSelf:(/*^block*/ id)arg3 elseInvokeClaimer:(/*^block*/ id)arg4 ;
-(id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2 ;
-(void)dealloc;
-(id)description;
-(void)cancelled;
-(void)block;
-(id)client;
-(void)finalize;
@end

