/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:53:43 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/Frameworks/UIKit.framework/UIKit
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


#import <UIKit/UIKit-Structs.h>
@class AFDictationConnection, AFDictationOptions, AFPreferences, NSArray, NSTimer, UIAlertView, UIDictationTestOps, NSString;

@interface UIDictationController : NSObject {

	AFDictationConnection* _connection;
	AFDictationOptions* _options;
	AFPreferences* _preferences;
	NSArray* _availableLanguages;
	NSTimer* _recordingLimitTimer;
	void* _callCenterFrameworkFileHandle;
	id _callCenter;
	void* _facetimeCallFrameworkFileHandle;
	id _facetimeCallManager;
	BOOL _wasDisabledDueToTelephonyActivity;
	UIAlertView* _dictationAvailableSoonAlert;
	BOOL _connectionWasAlreadyAliveForStatisticsLogging;
	UIDictationTestOps* _dictationDebuggingOperations;
	NSString* _language;
	BOOL cancelledByWaitingForLocalResults;
	BOOL dictationStartedFromGesture;
	BOOL _performTestOperationForEditing;
	BOOL _discardNextHypothesis;
	BOOL _hasPreheated;
	NSString* _previousHypothesis;
	NSString* _inputModeThatInvokedDictation;
	NSRange _insertionRange;

}

@property (assign,nonatomic) BOOL performTestOperationForEditing;                   //@synthesize performTestOperationForEditing=_performTestOperationForEditing - In the implementation block
@property (nonatomic,copy) NSString * previousHypothesis;                           //@synthesize previousHypothesis=_previousHypothesis - In the implementation block
@property (assign,nonatomic) BOOL discardNextHypothesis;                            //@synthesize discardNextHypothesis=_discardNextHypothesis - In the implementation block
@property (assign,nonatomic) NSRange insertionRange;                                //@synthesize insertionRange=_insertionRange - In the implementation block
@property (assign,nonatomic) BOOL hasPreheated;                                     //@synthesize hasPreheated=_hasPreheated - In the implementation block
@property (assign,nonatomic) BOOL dictationStartedFromGesture; 
@property (nonatomic,retain) NSString * inputModeThatInvokedDictation;              //@synthesize inputModeThatInvokedDictation=_inputModeThatInvokedDictation - In the implementation block
+(id)sharedInstance;
+(id)activeInstance;
+(id)serializedDictationPhrases:(id)arg1 ;
+(id)metadataDictionaryForCorrectionIdentifier:(id)arg1 ;
+(id)bestInterpretationForDictationResult:(id)arg1 ;
+(void)keyboardDidSetInputMode;
+(void)keyboardWillChangeFromDelegate:(id)arg1 toDelegate:(id)arg2 ;
+(id)inputModeNameForDictation;
+(BOOL)shouldDeleteBackwardInInputDelegate:(id)arg1 ;
+(BOOL)shouldInsertText:(id)arg1 inInputDelegate:(id)arg2 ;
+(id)singleLineResultForResult:(id)arg1 ;
+(BOOL)fetchCurrentInputModeSupportsDictation;
+(id)stringForState:(int)arg1 ;
+(BOOL)dictationIsFunctional;
+(BOOL)isRunning;
+(int)viewMode;
+(void)didOneFingerTapInTextView:(id)arg1 ;
+(BOOL)shouldHideCursorForTextView:(id)arg1 ;
+(void)updateLandingView;
+(BOOL)shouldHideSelectionUIForTextView:(id)arg1 ;
+(void)keyboardDidUpdateOnScreenStatus;
+(void)poppedLastDebuggingOp;
+(BOOL)openAssistantFrameworkIfNecessary;
+(BOOL)setupForOpeningConnections;
+(BOOL)setupForPhraseSerialization;
+(void)applicationDidChangeStatusBarFrame;
+(void)applicationDidBecomeActive;
+(void)applicationWillResignActive;
+(void)siriPreferencesChanged;
+(id)serializedInterpretationFromTokens:(id)arg1 transform:(CFStringRef)arg2 ;
+(BOOL)shouldEnableGestureHandler;
+(void)disableGestureHandler;
+(id)activeConnection;
+(void)enableGestureHandlerIfNecessary;
+(void)logCorrectionStatisticsForDelegate:(id)arg1 ;
+(BOOL)isTextViewOnStarkScreen:(id)arg1 ;
+(BOOL)usingTypeAndTalk;
+(id)serializedDictationPhrasesFromTokenMatrix:(id)arg1 fromKeyboard:(BOOL)arg2 transform:(CFStringRef)arg3 ;
+(id)interpretation:(id)arg1 forPhraseIndex:(unsigned)arg2 isShiftLocked:(BOOL)arg3 autocapitalizationType:(int)arg4 ;
+(id)serializedDictationPhrases:(id)arg1 fromKeyboard:(BOOL)arg2 transform:(CFStringRef)arg3 ;
+(BOOL)starkScreenExists;
+(id)streamingHypothesisForPhrases:(id)arg1 ;
+(BOOL)takesPhysicalButtonsBegan:(id)arg1 forTextView:(id)arg2 ;
+(BOOL)takesPhysicalButtonsEnded:(id)arg1 forTextView:(id)arg2 ;
+(id)attributedStringForDictationResult:(id)arg1 andCorrectionIdentifier:(id)arg2 ;
+(void)didBeginEditingInTextView:(id)arg1 ;
+(void)logDictationString:(id)arg1 ;
+(id)stringForViewMode:(int)arg1 ;
-(void)dealloc;
-(id)init;
-(int)state;
-(void)proximityStateChanged:(id)arg1 ;
-(void)setState:(int)arg1 ;
-(void)cancelDictation;
-(void)stopDictation;
-(void)startDictation;
-(void)switchToDictationInputMode;
-(BOOL)supportsInputMode:(id)arg1 error:(id*)arg2 ;
-(void)startDictationForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2 ;
-(void)startConnectionForFileAtURL:(id)arg1 forInputModeIdentifier:(id)arg2 ;
-(id)inputModeThatInvokedDictation;
-(void)setPerformTestOperationForEditing:(BOOL)arg1 ;
-(void)delayedTelephonyCheckingSetup;
-(BOOL)disabledDueToTelephonyActivity;
-(id)language;
-(BOOL)dictationEnabled;
-(id)assistantCompatibleLanguageCodeForInputMode:(id)arg1 ;
-(id)connection;
-(id)connectionForStatisticsLogging;
-(void)releaseConnectionAfterStatisticsLogging;
-(void)disableAutorotation;
-(void)setInputModeThatInvokedDictation:(id)arg1 ;
-(void)reenableAutorotation;
-(BOOL)dictationStartedFromGesture;
-(void)startDictationForReason:(int)arg1 ;
-(void)setDictationStartedFromGesture:(BOOL)arg1 ;
-(void)setDictationInputmode;
-(void)enableProximity;
-(id)debuggingDictationOperations;
-(void)releaseConnection;
-(void)startDictationForStark;
-(BOOL)performTestOperationForEditing;
-(void)_restartDictation;
-(void)setDiscardNextHypothesis:(BOOL)arg1 ;
-(BOOL)_shouldDeleteBackwardInInputDelegate:(id)arg1 ;
-(BOOL)_shouldInsertText:(id)arg1 inInputDelegate:(id)arg2 ;
-(BOOL)wasDisabledDueToTelephonyActivity;
-(id)supportedDictationLanguages:(/*^block*/ id)arg1 ;
-(id)fieldIdentifierInputDelegate:(id)arg1 ;
-(id)prefixTextForInputDelegate:(id)arg1 ;
-(id)postfixTextForInputDelegate:(id)arg1 ;
-(id)selectedTextForInputDelegate:(id)arg1 ;
-(void)setupConnectionOptions;
-(void)setupForDictationStartForReason:(int)arg1 ;
-(void)endSessionIfNecessaryForTransitionFromState:(int)arg1 toState:(int)arg2 ;
-(void)releaseConnectionAfterDictationRequest;
-(BOOL)isInDebuggingMode;
-(void)cancelRecordingLimitTimer;
-(id)_connection;
-(void)setPreviousHypothesis:(id)arg1 ;
-(void)setInsertionRange:(NSRange)arg1 ;
-(id)languageCodeForAssistantLanguageCode:(id)arg1 ;
-(void)setLanguage:(id)arg1 ;
-(void)startRecordingLimitTimer;
-(void)setupForStreamingDictationStart;
-(void)startConnectionForReason:(int)arg1 ;
-(id)dictationPhraseArrayFromDictationResult:(id)arg1 ;
-(BOOL)needsTrailingSpaceForPhrases:(id)arg1 ;
-(BOOL)needsLeadingSpaceForPhrases:(id)arg1 ;
-(CFStringRef)resultTransformForLanguageModel:(id)arg1 ;
-(id)resultWithTrailingSpace:(id)arg1 ;
-(void)insertSerializedDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2 ;
-(void)finishDictationRecognition:(id)arg1 ;
-(id)previousHypothesis;
-(NSRange)insertionRange;
-(BOOL)discardNextHypothesis;
-(void)setupToInsertResultForNewHypothesis:(id)arg1 ;
-(BOOL)hasPreheated;
-(void)setHasPreheated:(BOOL)arg1 ;
-(float)audioLevel;
-(void)errorAnimationDidFinish;
-(void)dismissDictationView:(id)arg1 ;
-(void)restartDictationForTypeAndTalk;
-(void)dictationConnection:(id)arg1 didRecognizePhrases:(id)arg2 languageModel:(id)arg3 correctionIdentifier:(id)arg4 ;
-(void)dictationConnection:(id)arg1 didHypothesizePhrases:(id)arg2 languageModel:(id)arg3 ;
-(void)dictationConnectionSpeechRecordingWillBegin:(id)arg1 ;
-(void)dictationConnectionSpeechRecordingDidBegin:(id)arg1 ;
-(void)dictationConnectionSpeechRecordingDidEnd:(id)arg1 ;
-(void)dictationConnectionSpeechRecordingDidCancel:(id)arg1 ;
-(void)dictationConnection:(id)arg1 speechRecordingDidFail:(id)arg2 ;
-(void)dictationConnection:(id)arg1 speechRecognitionDidFail:(id)arg2 ;
-(void)dictationConnnectionDidChangeAvailability:(id)arg1 ;
-(void)preheatIfNecessary;
@end

