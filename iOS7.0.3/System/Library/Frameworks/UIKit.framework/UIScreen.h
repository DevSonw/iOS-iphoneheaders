/*
* This header is generated by classdump-dyld 0.1
* on Thursday, November 28, 2013 at 3:53:27 AM Eastern European Standard Time
* Operating System: Version 7.0.3 (Build 11B511)
* Image Source: /System/Library/Frameworks/UIKit.framework/UIKit
* classdump-dyld is free of use, Copyright Â© 2013 by Elias Limneos.
*/


#import <UIKit/UIKit-Structs.h>
@class NSDictionary, UIWindow, NSMutableArray, UISoftwareDimmingWindow, NSArray, UIScreenMode;

@interface UIScreen : NSObject {

	id _display;
	CGRect _bounds;
	float _scale;
	float _horizontalScale;
	int _userInterfaceIdiom;
	NSDictionary* _capabilities;
	int _workspaceCapableScreenType;
	UIWindow* _screenDisablingWindow;
	double _startedPausingWindows;
	NSMutableArray* _pausedWindows;
	struct {
		unsigned bitsPerComponent : 4;
		unsigned initialized : 1;
		unsigned connected : 1;
		unsigned overscanCompensation : 2;
		unsigned hasShownWindows : 1;
		unsigned canAccessDisplay : 1;
		unsigned canAccessDisplayValid : 1;
		unsigned screenUpdatesDisabled : 1;
	}  _screenFlags;
	BOOL _wantsSoftwareDimming;
	UISoftwareDimmingWindow* _softwareDimmingWindow;
	int _lastNotifiedBacklightLevel;

}

@property (nonatomic,readonly) CGRect bounds;                                                                                                       //@synthesize bounds=_bounds - In the implementation block
@property (nonatomic,readonly) CGRect applicationFrame; 
@property (nonatomic,readonly) float scale;                                                                                                         //@synthesize scale=_scale - In the implementation block
@property (nonatomic,readonly) NSArray * availableModes; 
@property (nonatomic,readonly) UIScreenMode * preferredMode; 
@property (nonatomic,retain) UIScreenMode * currentMode; 
@property (assign,nonatomic) int overscanCompensation; 
@property (nonatomic,readonly) UIScreen * mirroredScreen; 
@property (assign,nonatomic) float brightness; 
@property (assign,nonatomic) BOOL wantsSoftwareDimming;                                                                                             //@synthesize wantsSoftwareDimming=_wantsSoftwareDimming - In the implementation block
@property (setter=_setSoftwareDimmingWindow:,nonatomic,retain) UISoftwareDimmingWindow * _softwareDimmingWindow;                                    //@synthesize softwareDimmingWindow=_softwareDimmingWindow - In the implementation block
@property (assign,setter=_setLastNotifiedBacklightLevel:,nonatomic) int _lastNotifiedBacklightLevel;                                                //@synthesize lastNotifiedBacklightLevel=_lastNotifiedBacklightLevel - In the implementation block
@property (assign,setter=_setWorkspaceCapableScreenType:,getter=_workspaceCapableScreenType,nonatomic) int workspaceCapableScreenType;              //@synthesize workspaceCapableScreenType=_workspaceCapableScreenType - In the implementation block
+(id)sbs_launchImageInfoPlistKeyModifier:(int)arg1 ;
+(id)sbs_snapshotImagePathComponent:(int)arg1 ;
+(id)sbs_screenTypes;
+(id)mainScreen;
+(CGPoint)convertPoint:(CGPoint)arg1 fromView:(id)arg2 ;
+(id)_workspaceCapableScreens;
+(void)_prepareScreensForAppResume;
+(CGRect)convertRect:(CGRect)arg1 toView:(id)arg2 ;
+(void)initialize;
+(CGRect)convertRect:(CGRect)arg1 fromView:(id)arg2 ;
+(CGPoint)convertPoint:(CGPoint)arg1 toView:(id)arg2 ;
+(void)_beginDisableScreenUpdatesForSnapshot;
+(void)_endDisableScreenUpdates;
+(CGAffineTransform)transformToRotateScreen:(float)arg1 ;
+(id)screens;
+(id)_screenWithDisplayName:(id)arg1 ;
+(CGAffineTransform)transformForScreenOriginRotation:(float)arg1 ;
+(id)_screenWithDisplayID:(id)arg1 ;
+(void)_beginDisableScreenUpdatesForSnapshotUsingSnapshotCover:(BOOL)arg1 ;
+(BOOL)_shouldDisableJail;
+(void)_videoOutSettingsChanged;
+(id)_screenWithIntegerDisplayID:(unsigned)arg1 ;
-(id)_mapkit_display;
-(id)_display;
-(BOOL)sbs_isStarkScreen;
-(BOOL)sbs_isMainScreen;
-(BOOL)sbs_isCloned;
-(id)sbs_launchImageInfoPlistKeyModifier;
-(id)sbs_snapshotImagePathComponent;
-(void)dealloc;
-(CGRect)bounds;
-(id)description;
-(int)_userInterfaceIdiom;
-(CGRect)applicationFrame;
-(BOOL)_isMainScreen;
-(float)scale;
-(unsigned)_integerDisplayID;
-(int)_workspaceCapableScreenType;
-(void)_computeMetrics;
-(void)_setScale:(float)arg1 ;
-(BOOL)_areBoundsJailed;
-(float)_scale;
-(float)_pointsPerInch;
-(int)bitsPerComponent;
-(UIEdgeInsets)_jailedBoundsEdgeInsets;
-(CGRect)_realDisplayBounds;
-(float)_rotation;
-(float)_horizontalPixelScale;
-(id)_name;
-(void)_prepareForWindow;
-(int)_imageOrientation;
-(id)displayLinkWithTarget:(id)arg1 selector:(SEL)arg2 ;
-(id)snapshotView;
-(id)snapshotViewAfterScreenUpdates:(BOOL)arg1 ;
-(id)snapshot;
-(id)mirroredScreen;
-(id)_capabilityForKey:(id)arg1 ;
-(id)currentMode;
-(CGRect)_applicationFrameForInterfaceOrientation:(int)arg1 usingStatusbarHeight:(float)arg2 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(id)initWithDisplay:(id)arg1 ;
-(id)availableModes;
-(BOOL)_isWorkspaceCapable;
-(id)_displayID;
-(void)_updateOverscanCompensationAllowingBackgroundUpdate:(BOOL)arg1 ;
-(void)_disableScreenUpdates:(BOOL)arg1 ;
-(void)_enableScreenUpdates;
-(BOOL)_isExternal;
-(void)_connectScreen;
-(void)_beginObservingBacklightLevelNotifications;
-(void)_applicationDidBecomeActive:(id)arg1 ;
-(void)_applicationWillResignActive:(id)arg1 ;
-(void)_requestFocusIfNecessary;
-(void)_endObservingBacklightLevelNotifications;
-(void)_setSoftwareDimmingWindow:(id)arg1 ;
-(void)_disconnectScreen;
-(BOOL)_overscanAdjustmentNeedsUpdate;
-(BOOL)_isOverscanned;
-(BOOL)_hasStatusBar;
-(void)_updateWorkspaceCapableScreenType;
-(CGRect)_applicationFrameForInterfaceOrientation:(int)arg1 ;
-(BOOL)_hasWindows;
-(id)preferredMode;
-(void)setCurrentMode:(id)arg1 ;
-(void)_setWantsFocus:(BOOL)arg1 ;
-(void)_updateUserInterfaceIdiom;
-(void)_updateCapabilities;
-(void)_setUserInterfaceIdiom:(int)arg1 ;
-(id)_capabilities;
-(id)_softwareDimmingWindow;
-(int)_lastNotifiedBacklightLevel;
-(void)_setLastNotifiedBacklightLevel:(int)arg1 ;
-(void)_postBrightnessDidChangeNotificationIfAppropriate;
-(BOOL)_supportsBrightness;
-(float)rawBrightnessForBacklightLevel:(float)arg1 ;
-(id)_lazySoftwareDimmingWindow;
-(BOOL)_isRotatable;
-(CGRect)_boundsInPixels;
-(double)_refreshRate;
-(void)setBitsPerComponent:(int)arg1 ;
-(int)screenType;
-(int)overscanCompensation;
-(void)setOverscanCompensation:(int)arg1 ;
-(void)_setCapability:(id)arg1 forKey:(id)arg2 ;
-(void)setBrightness:(float)arg1 ;
-(float)brightness;
-(id)_snapshotExcludingWindows:(id)arg1 withRect:(CGRect)arg2 ;
-(void)_setWorkspaceCapableScreenType:(int)arg1 ;
-(BOOL)wantsSoftwareDimming;
-(void)setWantsSoftwareDimming:(BOOL)arg1 ;
-(void)_setSpeed:(float)arg1 forWindow:(id)arg2 ;
@end

