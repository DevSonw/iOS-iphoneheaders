/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:27:16 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/UserEventPlugins/com.apple.BackgroundTaskAgentPlugin.plugin/com.apple.BackgroundTaskAgentPlugin
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <com.apple.BackgroundTaskAgentPlugin/com.apple.BackgroundTaskAgentPlugin-Structs.h>
@class BackgroundTaskAgentMonitor, PCPersistentTimer, PCSimpleTimer;

@interface BackgroundTaskAgentJobManager : NSObject {

	CFDictionaryRef _jobList;
	BackgroundTaskAgentMonitor* _monitor;
	void* _userEventAgentProvider;
	double _batteryLevelNotificationThreshold;
	double _nextHardDeadlineTime;
	double _nextSoftDeadlineTime;
	void* _nextHardDeadlineJob;
	void* _nextSoftDeadlineJob;
	PCPersistentTimer* _hardTimer;
	PCSimpleTimer* _softTimer;
	bool _shouldScheduleConditionTimer;
	bool _hasPendingJobs;

}

@property (nonatomic,readonly) void* userEventAgentProvider;                      //@synthesize userEventAgentProvider=_userEventAgentProvider - In the implementation block
@property (nonatomic,readonly) CFDictionaryRef jobList;                           //@synthesize jobList=_jobList - In the implementation block
@property (nonatomic,readonly) BackgroundTaskAgentMonitor * monitor;              //@synthesize monitor=_monitor - In the implementation block
@property (assign,nonatomic) bool hasPendingJobs;                                 //@synthesize hasPendingJobs=_hasPendingJobs - In the implementation block
-(void)cancelTimer;
-(void)scheduleTimerIfNecessary;
-(void)setHasPendingJobs:(bool)arg1 ;
-(void)cancelJobWithToken:(unsigned long long)arg1 ;
-(void)processJobListImmediately;
-(void)newJob:(void*)arg1 withToken:(unsigned long long)arg2 ;
-(id)initWithUserEventAgentProvider:(void*)arg1 ;
-(void)printCurrentDeviceState:(SCD_Struct_Ba1*)arg1 ;
-(void)removeJob:(void*)arg1 withToken:(CFNumberRef)arg2 ;
-(void)getCurrentDeviceState:(SCD_Struct_Ba1*)arg1 ;
-(void*)userEventAgentProvider;
-(void)addJobToQueue:(void*)arg1 withToken:(CFNumberRef)arg2 ;
-(void)BackgroundTaskAgentMonitoredConditionChangedWithTimeChange:(double*)arg1 ;
-(bool)hasPendingJobs;
-(void)processJobList;
-(void)processPendingJobs:(id)arg1 ;
-(void)adjustTime:(double)arg1 ;
-(bool)validateAndAddDefaults:(void*)arg1 ;
-(void)postClientNotificationForJob:(void*)arg1 withToken:(CFNumberRef)arg2 ;
-(CFDictionaryRef)jobList;
-(void)printJobListwithPrefix:(const char*)arg1 withLogLevel:(int)arg2 withJobStatus:(bool)arg3 ;
-(void)pcTimerFired:(id)arg1 ;
-(void)hasJobStatusChanged:(void*)arg1 withToken:(CFNumberRef)arg2 withCurrentDeviceState:(SCD_Struct_Ba1*)arg3 withPointerToExpiredJobs:(_CFDictionary*)arg4 ;
-(void)evalJobConditions:(void*)arg1 withCurrentDeviceState:(SCD_Struct_Ba1*)arg2 andStoreJobStatusIn:(SCD_Struct_Ba3*)arg3 ;
-(void)printJob:(void*)arg1 withToken:(CFNumberRef)arg2 withPrefix:(const char*)arg3 withLogLevel:(int)arg4 withJobStatus:(bool)arg5 ;
-(bool)areNetworkingRequirementsMetForJob:(void*)arg1 withCurrentDeviceState:(SCD_Struct_Ba1*)arg2 ;
-(id)monitor;
-(void)dealloc;
@end

