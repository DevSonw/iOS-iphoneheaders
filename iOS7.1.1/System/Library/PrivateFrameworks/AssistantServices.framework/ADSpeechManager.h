/*
* This header is generated by classdump-dyld 0.2
* on Saturday, June 28, 2014 at 3:35:06 AM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/ADSpeechCapturingDelegate.h>
#import <assistantd/ADSpeechCapturingPowerDelegate.h>

@protocol OS_dispatch_queue, ADSpeechManagerDelegate, ADSpeechCapturing;
@class NSObject, NSError, ADSpeechLog, ADSpeechRecorder, ADSpeechPlaybackSimulator, NSString, AFDictationOptions;

@interface ADSpeechManager : NSObject <ADSpeechCapturingDelegate, ADSpeechCapturingPowerDelegate> {

	NSObject<OS_dispatch_queue>* _queue;
	int _speechState;
	BOOL _shouldTalkToDelegate;
	NSError* _recordingError;
	BOOL _isCapturingForDictation;
	BOOL _isInitialRequest;
	double _requestStartTimestamp;
	<ADSpeechManagerDelegate>* _delegate;
	NSObject<OS_dispatch_queue>* _targetQueue;
	/*^block*/ id _recordStartedCompletion;
	/*^block*/ id _recordStoppedCompletion;
	ADSpeechLog* _speechLog;
	<ADSpeechCapturing>* _currentCapturing;
	ADSpeechRecorder* _speechRecorder;
	ADSpeechPlaybackSimulator* _playbackSimulator;
	NSString* _dictationLanguage;
	AFDictationOptions* _dictationOptions;
	id _context;

}

@property (nonatomic,retain) NSString * dictationLanguage;                       //@synthesize dictationLanguage=_dictationLanguage - In the implementation block
@property (nonatomic,retain) AFDictationOptions * dictationOptions;              //@synthesize dictationOptions=_dictationOptions - In the implementation block
@property (nonatomic,retain) id context;                                         //@synthesize context=_context - In the implementation block
+(id)_speechCodecError;
+(id)_speechStartFailureError;
+(id)_badStateError;
-(void)setDelegate:(id)arg1 andTargetQueue:(id)arg2 ;
-(BOOL)isCapturing;
-(void)cancelSpeechCaptureSuppressingAlert:(BOOL)arg1 ;
-(void)stopSpeechCaptureWithOptions:(id)arg1 ;
-(id)dictationLanguage;
-(id)dictationOptions;
-(void)prepareAudioSystemWithOptions:(id)arg1 ;
-(void)startSpeechCaptureForRequestWithOptions:(id)arg1 ;
-(void)startSpeechCaptureWithURL:(id)arg1 isNarrowBand:(BOOL)arg2 isDictation:(BOOL)arg3 ;
-(void)setDictationLanguage:(id)arg1 ;
-(void)setDictationOptions:(id)arg1 ;
-(void)startSpeechCaptureForDictationWithOptions:(id)arg1 ;
-(id)_currentSpeechCaptureSource;
-(id)_speechRecorder;
-(void)_cleanUpDelegateInfo;
-(void)_tellDelegateSpeechFailedWithError:(id)arg1 ;
-(void)_tellDelegateSpeechCanceled;
-(void)_tellDelegateSpeechFinishedWithPacketCount:(int)arg1 endpointMode:(int)arg2 ;
-(void)_tellDelegateSpeechStartedWithRecordingInfo:(id)arg1 ;
-(void)_cancelRecordingWithError:(id)arg1 ;
-(void)_recordingStoppedWithError:(id)arg1 endpointMode:(int)arg2 totalPacketCount:(int)arg3 ;
-(void)_tellDelegateAboutSpeechPackets:(id)arg1 count:(int)arg2 ;
-(void)_tellDelegateAboutAveragePower:(float)arg1 peak:(float)arg2 ;
-(void)_updateCapturingStateWithOptions:(id)arg1 ;
-(void)_startCaptureForMode:(int)arg1 options:(id)arg2 ;
-(void)_tellDelegateSpeechShouldPreheatWithRecordingInfo:(id)arg1 ;
-(void)_tellDelegateSpeechWillBeginWithTimestamp:(double)arg1 ;
-(void)_releaseSession;
-(void)speechCapturingDidStartRecordingSuccessfully:(BOOL)arg1 withInfo:(id)arg2 ;
-(void)speechCapturingDidRecordSpeechPackets:(id)arg1 totalPacketCount:(int)arg2 ;
-(void)speechCapturingWillStopRecording:(BOOL)arg1 ;
-(void)speechCapturingDidStopRecordingWithError:(id)arg1 endpointMode:(int)arg2 totalPacketCount:(int)arg3 ;
-(void)speechCapturingDidUpdateAveragePower:(float)arg1 peakPower:(float)arg2 ;
-(id)init;
-(id)context;
-(void)setContext:(id)arg1 ;
-(void).cxx_destruct;
-(void)endSession;
-(void)preheat;
-(void)updateSpeechOptions:(id)arg1 ;
@end

