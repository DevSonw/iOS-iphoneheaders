/*
* This header is generated by classdump-dyld 0.2
* on Saturday, June 28, 2014 at 3:35:06 AM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/AssistantServices.framework/assistantd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <assistantd/assistantd-Structs.h>
#import <CoreFoundation/NSStreamDelegate.h>

@protocol ADSiriBackgroundConnectionDelegate;
@class ADSiriConnectionInfo, NSInputStream, NSOutputStream, NSMutableData, ADDataDecompressor, ADDataCompressor, NSTimer, ADPingInfo, ADConnectionType;

@interface ADSiriBackgroundConnection : NSObject <NSStreamDelegate> {

	ADSiriConnectionInfo* _connectionInfo;
	NSInputStream* _inputStream;
	NSOutputStream* _outputStream;
	NSMutableData* _bufferedInputData;
	NSMutableData* _bufferedOutputData;
	unsigned char _readBuffer[10240];
	ADDataDecompressor* _inputDecompressor;
	ADDataCompressor* _outputCompressor;
	CFHTTPMessageRef _httpResponseHeader;
	BOOL _isOpened;
	BOOL _isCanceled;
	BOOL _hasFoundTrust;
	NSTimer* _aceHeaderTimeoutTimer;
	NSTimer* _pingTimer;
	unsigned _currentPingIndex;
	ADPingInfo* _pingInfo;
	int _interfaceIndex;
	ADConnectionType* _connectionType;
	double _connectionStartUptime;
	<ADSiriBackgroundConnectionDelegate>* _delegate;

}

@property (assign,nonatomic,__weak) <ADSiriBackgroundConnectionDelegate> * delegate;              //@synthesize delegate=_delegate - In the implementation block
+(id)_resolveHost:(id)arg1 withResolver:(id)arg2 port:(short)arg3 timeout:(double)arg4 forceTCP:(BOOL)arg5 ;
-(id)pingInfo;
-(void)setSendPings:(BOOL)arg1 ;
-(void)sendCommand:(id)arg1 errorHandler:(/*^block*/ id)arg2 ;
-(void)_handleAceObject:(id)arg1 ;
-(void)startWithConnectionInfo:(id)arg1 ;
-(id)analysisInfo;
-(id)mptcpInfo;
-(void)_scheduleAceHeaderTimeoutTimerWithInterval:(double)arg1 ;
-(void)_sendHTTPHeader;
-(void)_sendAceHeader;
-(void)_configureStreamPairForURL:(id)arg1 connectionPolicyRoute:(id)arg2 preferWWAN:(BOOL)arg3 completionHandler:(/*^block*/ id)arg4 ;
-(void)_connectionDidBecomeUnviable;
-(void)_resolveHostForURL:(id)arg1 connectionPolicyRoute:(id)arg2 completionHandler:(/*^block*/ id)arg3 ;
-(void)_schedulePingTimer;
-(void)_aceHeaderTimeoutFired:(id)arg1 ;
-(BOOL)_hasReadACEHeader;
-(void)_timeoutWithError:(id)arg1 ;
-(void)_pingTimerFired;
-(void)_pingInfoChanged;
-(BOOL)_shouldDeferAcePingTimer;
-(void)_sendAcePingWithId:(unsigned)arg1 ;
-(BOOL)_hasBufferedDataOrOutstandingPings;
-(void)_validateTrustForStream:(id)arg1 ;
-(void)_inputStreamEvent:(unsigned)arg1 ;
-(void)_outputStreamEvent:(unsigned)arg1 ;
-(void)_inputStreamHasBytesAvailable;
-(void)_inputStreamErrorOccurred;
-(void)_inputStreamEndEncountered;
-(void)_outputStreamDidOpen;
-(void)_outputStreamHasSpaceAvailable;
-(void)_outputStreamErrorOccurred;
-(void)_outputStreamEndEncountered;
-(BOOL)_tryReadingHTTPHeaderData:(id)arg1 withMessage:(CFHTTPMessageRef)arg2 remainingData:(id*)arg3 error:(id*)arg4 ;
-(id)_tryReadingAceHeaderFromData:(id)arg1 bytesParsed:(unsigned*)arg2 error:(id*)arg3 ;
-(id)_tryReadingParsedDataFromData:(id)arg1 bytesParsed:(unsigned*)arg2 error:(id*)arg3 ;
-(void)_handleParsedData:(id)arg1 ;
-(id)_readDataFromInputStream:(id)arg1 ;
-(BOOL)_hasReadHTTPHeader;
-(BOOL)_handleHTTPHeaderWithData:(id)arg1 remainingData:(id*)arg2 error:(id*)arg3 ;
-(BOOL)_handleAceHeaderWithData:(id)arg1 remainingData:(id*)arg2 error:(id*)arg3 ;
-(BOOL)_handleAceDataWithData:(id)arg1 remainingData:(id*)arg2 error:(id*)arg3 ;
-(void)_handleOpenedSocketForStream:(id)arg1 ;
-(void)_tryToWriteBufferedOutputData;
-(id)_userAgent;
-(id)_headerDataForURL:(id)arg1 aceHost:(id)arg2 languageCode:(id)arg3 ;
-(BOOL)_tryParsingHTTPHeaderData:(id)arg1 partialMessage:(CFHTTPMessageRef)arg2 statusCode:(int*)arg3 remainingBody:(id*)arg4 error:(id*)arg5 ;
-(void)_handleAceNop;
-(void)_handleAcePing:(unsigned)arg1 ;
-(void)_handleAcePong:(unsigned)arg1 ;
-(void)_handleAceEnd;
-(void)_sendAcePongWithId:(unsigned)arg1 ;
-(void)_acknowledgePing:(unsigned)arg1 ;
-(void)_cancelForExtendedValidationFailureWithTrustInfo:(id)arg1 ;
-(void)_validateTrustInfo:(id)arg1 ;
-(void)_closeConnection;
-(void)stream:(id)arg1 handleEvent:(unsigned)arg2 ;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)description;
-(id)delegate;
-(void)cancel;
-(void).cxx_destruct;
-(void)_sendData:(id)arg1 ;
@end

