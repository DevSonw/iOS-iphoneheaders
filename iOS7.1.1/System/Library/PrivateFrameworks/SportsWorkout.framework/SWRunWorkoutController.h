/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:25:07 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/SportsWorkout.framework/SportsWorkout
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <WebKit/CLLocationManagerDelegate.h>

@class SWRunSensor, SWRemote, SWRunWorkout, NSString, SWRunWorkoutPreset, NSMutableArray, CLLocationManager, NSTimer, CLLocation, SWIntervalSnapshotObserver, SWFastestDistanceWindowObserver, SWDataControllerSnapshotObserver, SWUserInteractionSnapshotObserver, SWDataController, NSDictionary;

@interface SWRunWorkoutController : NSObject <CLLocationManagerDelegate> {

	SWRunSensor* _sensor;
	SWRemote* _remote;
	SWRunWorkout* _workout;
	NSString* _workoutState;
	bool _hasEverStarted;
	bool _hasFiredBeginningWorkoutPrompt;
	bool _sensorBatteryIsLowNotificationSent;
	SWRunWorkoutPreset* _preset;
	bool _isWalk;
	NSMutableArray* _workoutObservers;
	CLLocationManager* _locationManager;
	NSTimer* _workoutObserverTimer;
	unsigned long long _previousObservedElapsedTimeInSeconds;
	float _previousObservedPaceInSecondsPerMile;
	float _previousObservedDistanceInMiles;
	float _previousObservedCalories;
	CLLocation* _previousObservedLocation;
	SWIntervalSnapshotObserver* _mileSnapshotObserver;
	SWIntervalSnapshotObserver* _kmSnapshotObserver;
	SWIntervalSnapshotObserver* _tenSecondSnapshotObserver;
	SWFastestDistanceWindowObserver* _fastestMileObserver;
	SWFastestDistanceWindowObserver* _fastestKilometerObserver;
	SWDataControllerSnapshotObserver* _dataControllerSnapshotObserver;
	SWUserInteractionSnapshotObserver* _userInteractionSnapshotObserver;
	SWDataController* _dataController;

}

@property (nonatomic,readonly) SWRunSensor * sensor;                                    //@synthesize sensor=_sensor - In the implementation block
@property (nonatomic,readonly) SWRemote * remote;                                       //@synthesize remote=_remote - In the implementation block
@property (nonatomic,readonly) NSString * workoutState;                                 //@synthesize workoutState=_workoutState - In the implementation block
@property (nonatomic,@dynamic,readonly) NSDictionary * workoutData; 
@property (nonatomic,readonly) bool hasEverStarted;                                     //@synthesize hasEverStarted=_hasEverStarted - In the implementation block
@property (nonatomic,readonly) SWDataController * dataController;                       //@synthesize dataController=_dataController - In the implementation block
@property (nonatomic,@dynamic,retain) SWRunWorkoutPreset * preset; 
@property (assign,nonatomic,@dynamic) bool isCalibration; 
@property (nonatomic,@dynamic,readonly) bool isCalibratedForWalk; 
@property (nonatomic,@dynamic,readonly) bool isCalibratedForRun; 
@property (nonatomic,@dynamic,readonly) bool canBeUsedForRunCalibration; 
@property (nonatomic,@dynamic,readonly) bool canBeUsedForWalkCalibration; 
@property (nonatomic,@dynamic,readonly) float minCalibrationDistanceMiles; 
@property (nonatomic,@dynamic,readonly) float maxCalibrationDistanceMiles; 
@property (nonatomic,@dynamic,readonly) bool hasPowerSong; 
@property (nonatomic,@dynamic,readonly) NSString * powerSongName; 
+(bool)isWorkoutInProgressOnSystem;
+(void)resetDefaultController;
+(bool)__takeWorkoutInProgressFileLock;
+(void)__releaseWorkoutInProgressFileLock;
+(void)enableSDA;
+(void)disableSDA;
+(float)kmToMiles:(float)arg1 ;
+(id)__systemVersion;
+(id)__uniqueIdentifier;
+(id)defaultController;
+(bool)shouldUseKilometersForPaceWithWorkoutSummary:(id)arg1 ;
+(bool)shouldUseKilometersForDistanceWithWorkoutSummary:(id)arg1 ;
+(float)milesToKm:(float)arg1 ;
+(float)secondsPerMileToSecondsPerKm:(float)arg1 ;
+(float)secondsPerKmToSecondsPerMile:(float)arg1 ;
+(float)lbsToKgs:(float)arg1 ;
+(float)kgsToLbs:(float)arg1 ;
+(id)goalTypeForString:(id)arg1 ;
+(id)distanceUnitForString:(id)arg1 ;
+(id)distanceDisplayUnitsForPreferences;
-(void)unlinkRemote;
-(bool)canBeUsedForWalkCalibration;
-(bool)canBeUsedForRunCalibration;
-(void)resetCalibration;
-(id)workoutData;
-(void)activateWorkout;
-(void)pauseWorkout;
-(id)sensor;
-(bool)isCalibration;
-(void)setIsCalibration:(bool)arg1 ;
-(id)initWithSensor:(id)arg1 remote:(id)arg2 ;
-(bool)_shouldRecordLocation;
-(void)registerWorkoutObserver:(id)arg1 ;
-(void)refreshSettings;
-(void)togglePauseResumeWorkoutFromHeadset;
-(void)playPowerSong;
-(void)playOnDemandPrompt;
-(void)endWorkout;
-(void)_updateWorkoutObserversForOldState:(id)arg1 newState:(id)arg2 ;
-(void)_setWorkoutState:(id)arg1 ;
-(void)_beginSearchingForSensorAfterLink;
-(void)_remoteCommandIssued:(id)arg1 ;
-(void)_linkStateChangedNotification:(id)arg1 ;
-(void)_searchStateChangedNotification:(id)arg1 ;
-(void)_updateWorkoutObserversForUserEvent:(id)arg1 ;
-(void)_startWorkoutObserverTimer;
-(void)_cancelWorkoutObserverTimer;
-(void)_updateWorkoutObserversForTimer:(id)arg1 ;
-(id)_powerSongPersistentUIDString;
-(id)powerSongName;
-(void)prepareToActivateWorkout;
-(void)stopVoicePrompts;
-(bool)isCalibratedForWalk;
-(bool)isCalibratedForRun;
-(float)minCalibrationDistanceMiles;
-(float)maxCalibrationDistanceMiles;
-(bool)saveCalibrationData;
-(bool)saveCalibrationDataWithAdjustedDistanceInMiles:(float)arg1 ;
-(void)unregisterWorkoutObserver:(id)arg1 ;
-(bool)hasPowerSong;
-(id)workoutState;
-(bool)hasEverStarted;
-(id)dataController;
-(id)preset;
-(void)setPreset:(id)arg1 ;
-(void)_postNotificationName:(id)arg1 userInfo:(id)arg2 ;
-(void)dealloc;
-(void)_postNotificationName:(id)arg1 ;
-(id)remote;
@end

