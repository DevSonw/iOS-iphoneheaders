/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:28 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <iWorkImport/iWorkImport-Structs.h>
@class TSCH3DShaderVariable, NSMutableSet;

@interface TSCH3DShaderVariableLinkage : NSObject {

	TSCH3DShaderVariable* mVariable;
	TSCH3DShaderType mLinked;
	TSCH3DShaderVariableScopes mScope;
	TSCH3DShaderVariableScopes mDeclaredScope;
	bool mIsUsed;
	NSMutableSet* mDependees;

}

@property (nonatomic,readonly) TSCH3DShaderVariable * variable; 
@property (nonatomic,readonly) NSMutableSet * dependees; 
@property (nonatomic,readonly) TSCH3DShaderType shaderType; 
@property (nonatomic,readonly) TSCH3DShaderType linked; 
@property (nonatomic,readonly) TSCH3DShaderVariableScopes scope; 
@property (nonatomic,readonly) bool isLinked; 
@property (nonatomic,readonly) bool notLinked; 
@property (nonatomic,readonly) TSCH3DShaderVariableScopes declaredScope; 
@property (assign,nonatomic) bool isUsed; 
@property (nonatomic,readonly) bool isSpecial; 
@property (nonatomic,readonly) bool isUniform; 
@property (nonatomic,readonly) bool hasAttribute; 
@property (nonatomic,readonly) bool isAttribute; 
@property (nonatomic,readonly) bool isVertexVarying; 
@property (nonatomic,readonly) bool isFragment; 
@property (nonatomic,readonly) bool hasFragment; 
@property (nonatomic,readonly) bool canHaveFragment; 
@property (nonatomic,readonly) bool isVertex; 
@property (nonatomic,readonly) bool hasVertex; 
@property (nonatomic,readonly) bool scopeHasFragment; 
@property (nonatomic,readonly) bool scopedInAll; 
@property (nonatomic,readonly) bool isFragmentLinkable; 
@property (nonatomic,readonly) bool isVertexLinkable; 
@property (nonatomic,readonly) unsigned long long hasGlobal; 
+(id)linkageWithVariable:(id)arg1 ;
-(void)unlink;
-(TSCH3DShaderType)shaderType;
-(bool)isSpecial;
-(TSCH3DShaderVariableScopes)declaredScope;
-(bool)hasBody:(TSCH3DShaderType)arg1 ;
-(void)addShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)addLinkage:(TSCH3DShaderType)arg1 ;
-(void)addDeclaredShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)setIsUsed:(bool)arg1 ;
-(bool)notLinked;
-(bool)isUniform;
-(bool)hasFragment;
-(bool)canHaveFragment;
-(bool)isVarying:(TSCH3DShaderType)arg1 ;
-(bool)hasVertex;
-(bool)hasAttribute;
-(bool)scopedInAll;
-(bool)isFragmentLinkable;
-(bool)isVertexLinkable;
-(TSCH3DShaderType)linked;
-(bool)updateLinkage:(TSCH3DShaderType)arg1 ;
-(void)addBodyScope:(TSCH3DShaderType)arg1 ;
-(id)nameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)variableDeclarationInShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)dependees;
-(void)setShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)setLinkage:(TSCH3DShaderType)arg1 ;
-(id)globalNameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)variableQualifiersWithStorageQualifier:(id)arg1 ;
-(bool)isUsed;
-(id)initWithVariable:(id)arg1 ;
-(bool)isVertexVarying;
-(bool)scopeHasFragment;
-(bool)isVertex;
-(bool)isFragment;
-(bool)isGlobalScope:(TSCH3DShaderVariableScopeType)arg1 ;
-(unsigned long long)hasGlobal;
-(bool)hasShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(id)resolveGlobalNameForShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 defaultTo:(id)arg3 ;
-(bool)hasVarying;
-(bool)updateShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)removeShader:(TSCH3DShaderType)arg1 scope:(TSCH3DShaderVariableScopeType)arg2 ;
-(void)removeLinkage:(TSCH3DShaderType)arg1 ;
-(bool)hasLinkage:(TSCH3DShaderType)arg1 ;
-(bool)isAttribute;
-(void)dealloc;
-(id)description;
-(id).cxx_construct;
-(id)variable;
-(bool)isLinked;
-(TSCH3DShaderVariableScopes)scope;
@end

