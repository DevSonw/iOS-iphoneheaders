/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:36 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSCH3DSceneObjectDelegator.h>
#import <iWorkImport/TSCH3DSceneDelegate.h>
#import <iWorkImport/TSCH3DChartAllSceneObjectDelegate.h>
#import <iWorkImport/TSCHUnretainedParent.h>

@class TSCH3DChartRep, TSCH3DScene;

@interface TSCH3DChartRepAnimationTextureSceneDelegate : NSObject <TSCH3DSceneObjectDelegator, TSCH3DSceneDelegate, TSCH3DChartAllSceneObjectDelegate, TSCHUnretainedParent> {

	TSCH3DChartRep* mParent;
	TSCH3DScene* mScene;
	ChartRepRenderIndexSet mShouldRender;
	long long mChunkStage;

}
+(id)sceneDelegateWithRep:(id)arg1 scene:(id)arg2 finalElements:(bool)arg3 chunkStage:(long long)arg4 ;
-(void)clearParent;
-(ElementRenderPass)renderPassForSceneObject:(id)arg1 ;
-(id)makeDelegateWithScene:(id)arg1 ;
-(id)makeDelegateWithSceneObject:(id)arg1 scene:(id)arg2 ;
-(void)willRunForScene:(id)arg1 pipeline:(id)arg2 ;
-(void)didRunForScene:(id)arg1 pipeline:(id)arg2 ;
-(void)labelsResourcesSessionWillBeginForSceneObject:(id)arg1 pipeline:(id)arg2 ;
-(void)labelsResourcesSessionWillEndForSceneObject:(id)arg1 pipeline:(id)arg2 ;
-(void)setOffset:(const tvec3<float>*)arg1 labelType:(int)arg2 boundsIndex:(long long)arg3 forSceneObject:(id)arg4 ;
-(bool)willSubmitLabelType:(int)arg1 boundsIndex:(long long)arg2 alignment:(unsigned long long)arg3 elementIndex:(unsigned long long)arg4 forSceneObject:(id)arg5 ;
-(bool)willSubmitLabelForSceneObject:(id)arg1 labelRenderInfo:(const ChartLabelsContainingLabelRenderInfo*)arg2 ;
-(void)updateExternalLabelAttribute:(ExternalLabelAttributeRef)arg1 sceneObject:(id)arg2 labelRenderInfo:(const ChartLabelsContainingLabelRenderInfo*)arg3 ;
-(void)didGenerateShaderEffects:(id)arg1 sceneObject:(id)arg2 pipeline:(id)arg3 ;
-(bool)willSubmitSceneObject:(id)arg1 pipeline:(id)arg2 ;
-(void)didSubmitSceneObject:(id)arg1 pipeline:(id)arg2 ;
-(bool)willBeginProcessingSceneObject:(id)arg1 ;
-(void)didEndProcessingSceneObject:(id)arg1 ;
-(bool)renderPassDelayDisallowedForSceneObject:(id)arg1 pipeline:(id)arg2 ;
-(bool)willProcessSeries:(id)arg1 sceneObject:(id)arg2 pipeline:(id)arg3 ;
-(void)didGenerateShaderEffectsForSeriesAtIndex:(const tvec2<int>*)arg1 effects:(id)arg2 sceneObject:(id)arg3 pipeline:(id)arg4 ;
-(bool)willProcessElements:(id)arg1 sceneObject:(id)arg2 pipeline:(id)arg3 ;
-(void)didProcessElements:(id)arg1 sceneObject:(id)arg2 pipeline:(id)arg3 ;
-(bool)willProcessElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(ElementRenderPass)renderPassForElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(bool)willUpdateElementEffectsStatesForElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(void)didTransformElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(bool)willRenderElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(bool)willSubmitElement:(const RenderElementInfo*)arg1 sceneObject:(id)arg2 ;
-(id)initWithRep:(id)arg1 scene:(id)arg2 finalElements:(bool)arg3 chunkStage:(long long)arg4 ;
-(bool)p_shouldSkipIndex:(const tvec2<int>*)arg1 ;
-(void)dealloc;
-(id)description;
-(id).cxx_construct;
-(void).cxx_destruct;
@end

