/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:39 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDLayoutManipulatingTracker.h>

@class TSDRep, TSDKnob, TSDAutoscroll, TSDInteractiveCanvasController;

@interface TSDKnobTracker : NSObject <TSDLayoutManipulatingTracker> {

	TSDRep* mRep;
	TSDKnob* mKnob;
	CGPoint mCurrentPosition;
	CGPoint mKnobOffset;
	bool mDidBegin;
	bool mDidDrag;
	bool mDragEnding;
	bool mEndedOperationDueToESC;
	bool mIsInspectorDrivenTracking;
	TSDAutoscroll* mAutoscroll;

}

@property (nonatomic,readonly) TSDInteractiveCanvasController * icc; 
@property (nonatomic,retain) TSDRep * rep; 
@property (nonatomic,retain) TSDKnob * knob; 
@property (nonatomic,readonly) bool didBegin; 
@property (assign,nonatomic) bool didDrag; 
@property (assign,nonatomic) bool dragEnding; 
@property (nonatomic,readonly) double delay; 
@property (assign,nonatomic) CGPoint currentPosition; 
@property (nonatomic,readonly) bool endedOperationDueToESC; 
@property (assign,nonatomic) bool isInspectorDrivenTracking; 
@property (nonatomic,readonly) CGPoint knobOffset; 
@property (nonatomic,retain) TSDAutoscroll * autoscroll; 
-(id)initWithRep:(id)arg1 knob:(id)arg2 ;
-(id)rep;
-(void)beginMovingKnob;
-(bool)dragEnding;
-(void)endMovingKnob;
-(void)changeDynamicLayoutsForReps:(id)arg1 ;
-(void)moveKnobToCanvasPosition:(CGPoint)arg1 ;
-(bool)wantsAutoscroll;
-(bool)shouldOpenCommandGroupToCommitChangesForReps:(id)arg1 ;
-(bool)shouldHideSelectionHighlight;
-(void)moveKnobToRepPosition:(CGPoint)arg1 ;
-(bool)shouldHideOtherKnobs;
-(void)setCurrentPosition:(CGPoint)arg1 ;
-(bool)isInspectorDrivenTracking;
-(void)setIsInspectorDrivenTracking:(bool)arg1 ;
-(void)commitChangesForReps:(id)arg1 ;
-(bool)supportsAlignmentGuides;
-(bool)operationShouldBeDynamic;
-(unsigned long long)enabledKnobMask;
-(CGRect)currentBoundsForStandardKnobs;
-(CGAffineTransform)transformInRootForStandardKnobs;
-(CGPoint)convertKnobPositionToUnscaledCanvas:(CGPoint)arg1 ;
-(bool)didDrag;
-(void)setKnob:(id)arg1 ;
-(void)setRep:(id)arg1 ;
-(void)i_resetCurrentPositionToKnobPositionIfAppropriate;
-(void)setDidDrag:(bool)arg1 ;
-(id)icc;
-(bool)allowHUDToDisplay;
-(bool)shouldUseKnobOffset;
-(bool)shouldEndMovingKnobOnESC;
-(void)willEndMovingKnobDueToESC;
-(void)i_setKnobOffset:(CGPoint)arg1 ;
-(void)updateAfterAutoscroll:(id)arg1 ;
-(double)unscaledStartAutoscrollThreshold;
-(int)allowedAutoscrollDirections;
-(void)setDragEnding:(bool)arg1 ;
-(bool)endedOperationDueToESC;
-(CGPoint)knobOffset;
-(id)autoscroll;
-(void)setAutoscroll:(id)arg1 ;
-(void)dealloc;
-(void)autoscrollWillNotStart;
-(double)delay;
-(CGPoint)currentPosition;
-(bool)didBegin;
-(id)knob;
@end

