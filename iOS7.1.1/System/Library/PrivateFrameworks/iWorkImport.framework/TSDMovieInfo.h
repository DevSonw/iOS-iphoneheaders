/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:40 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDMediaInfo.h>
#import <iWorkImport/TSDMixing.h>

@class TSPData, NSURL, TSDMediaStyle;

@interface TSDMovieInfo : TSDMediaInfo <TSDMixing> {

	TSPData* mMovieData;
	NSURL* mMovieRemoteURL;
	TSPData* mImportedAuxiliaryMovieData;
	TSPData* mAudioOnlyImageData;
	double mStartTime;
	double mEndTime;
	double mPosterTime;
	TSPData* mPosterImageData;
	CGSize mNaturalSize;
	unsigned long long mLoopOption;
	float mVolume;
	bool mAudioOnly;
	bool mStreaming;
	TSDMediaStyle* mStyle;

}

@property (nonatomic,retain) TSPData * movieData; 
@property (nonatomic,retain) NSURL * movieRemoteURL; 
@property (nonatomic,retain) TSPData * importedAuxiliaryMovieData; 
@property (nonatomic,retain) TSPData * audioOnlyImageData; 
@property (assign,nonatomic) double startTime; 
@property (assign,nonatomic) double endTime; 
@property (assign,nonatomic) double posterTime; 
@property (nonatomic,retain) TSPData * posterImageData; 
@property (assign,nonatomic) unsigned long long loopOption; 
@property (assign,nonatomic) float volume; 
@property (assign,getter=isAudioOnly,nonatomic) bool audioOnly; 
@property (assign,getter=isStreaming,nonatomic) bool streaming; 
+(id)presetKinds;
+(double)defaultPosterTimeForDuration:(double)arg1 ;
-(id)titleForBuildChunk:(id)arg1 ;
-(id)initFromUnarchiver:(id)arg1 ;
-(void)saveToArchiver:(id)arg1 ;
-(void)saveToArchive:(MovieArchive*)arg1 archiver:(id)arg2 ;
-(void)loadFromArchive:(const MovieArchive*)arg1 unarchiver:(id)arg2 ;
-(id)subclassInitFromUnarchiver:(id)arg1 ;
-(id)copyWithContext:(id)arg1 ;
-(void)acceptVisitor:(id)arg1 ;
-(id)presetKind;
-(int)intValueForProperty:(int)arg1 ;
-(Class)styleClass;
-(float)floatValueForProperty:(int)arg1 ;
-(bool)containsProperty:(int)arg1 ;
-(Class)repClass;
-(id)animationFilters;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 ;
-(Class)editorClass;
-(id)objectForProperty:(int)arg1 ;
-(long long)mixingTypeWithObject:(id)arg1 ;
-(id)mixedObjectWithFraction:(double)arg1 ofObject:(id)arg2 ;
-(bool)supportsHyperlinks;
-(bool)supportsAttachedComments;
-(bool)canChangeWrapType;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3 ;
-(id)mediaDisplayName;
-(CGSize)rawDataSize;
-(void)p_setPropertiesFromLoadedAsset:(id)arg1 ;
-(id)movieData;
-(id)movieRemoteURL;
-(double)posterTime;
-(id)makeAVAssetWithOptions:(id)arg1 ;
-(id)makeAVAsset;
-(id)makePosterImageGeneratorWithAVAsset:(id)arg1 ;
-(id)generateEmptyPosterImageForContext:(id)arg1 ;
-(id)posterImageData;
-(double)doubleValueForProperty:(int)arg1 ;
-(unsigned long long)loopOption;
-(void)setMovieData:(id)arg1 ;
-(void)setMovieRemoteURL:(id)arg1 ;
-(id)importedAuxiliaryMovieData;
-(void)setImportedAuxiliaryMovieData:(id)arg1 ;
-(id)audioOnlyImageData;
-(void)setAudioOnlyImageData:(id)arg1 ;
-(void)setPosterTime:(double)arg1 ;
-(void)setLoopOption:(unsigned long long)arg1 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3 movieData:(id)arg4 loadedAsset:(id)arg5 ;
-(id)initWithContext:(id)arg1 geometry:(id)arg2 style:(id)arg3 movieRemoteURL:(id)arg4 loadedAsset:(id)arg5 ;
-(void)setPosterImageData:(id)arg1 ;
-(void)setStreaming:(bool)arg1 ;
-(id)synchronouslyGenerateDefaultPosterImageForContext:(id)arg1 ;
-(bool)isAudioOnly;
-(id)mediaFileType;
-(void)dealloc;
-(void)setStyle:(id)arg1 ;
-(void)setStartTime:(double)arg1 ;
-(id)style;
-(double)startTime;
-(bool)isStreaming;
-(void)setEndTime:(double)arg1 ;
-(void)setAudioOnly:(bool)arg1 ;
-(Class)layoutClass;
-(double)endTime;
-(float)volume;
-(void)setVolume:(float)arg1 ;
@end

