/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:54 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol TSDCanvasDelegate, KNPlaybackControllerDelegate, KNPlaybackConcealer;
#import <iWorkImport/iWorkImport-Structs.h>
@class KNShow, KNPlaybackSession, KNAnimatedSlideView, KNPlaybackAudioController, NSObject, CALayer, KNMovieRenderer, NSIndexSet, KNSlideNode, NSSet, NSArray;

@interface KNPlaybackController : NSObject {

	KNShow* mShow;
	<TSDCanvasDelegate>* mCanvasDelegate;
	<KNPlaybackControllerDelegate>* mDelegate;
	int mPlayMode;
	KNPlaybackSession* mSession;
	KNAnimatedSlideView* mAnimator;
	/*^block*/ id mEndShowHandler;
	KNPlaybackAudioController* mSoundtrackController;
	NSObject<KNPlaybackConcealer>* mPlaybackConcealer;
	CGColorSpaceRef mPlaybackColorSpace;
	CALayer* mBaseLayer;
	int mPlaybackState;
	bool mAllowsShowToEndInternally;
	bool mAutomaticallyPlaysSoundtrack;
	bool mPlaysAutomaticEvents;
	bool mAutomaticallyPlaysMovies;
	bool mRenderingSuspended;
	bool mIsCurrentEventNonAutomatic;
	bool mIsPaused;
	bool mIsHyperlinkInProgress;
	bool mIsUsingDiscreteGPU;
	KNMovieRenderer* mMovieRendererWithVisibleHUD;

}

@property (nonatomic,readonly) KNShow * show; 
@property (assign,nonatomic) <KNPlaybackControllerDelegate> * delegate; 
@property (nonatomic,readonly) <TSDCanvasDelegate> * canvasDelegate; 
@property (assign,nonatomic) int playMode; 
@property (nonatomic,readonly) CALayer * baseLayer; 
@property (assign,nonatomic) unsigned long long currentEventIndex; 
@property (nonatomic,copy) NSIndexSet * buildEventIndexesToAnimate; 
@property (nonatomic,readonly) double buildsToAnimateDuration; 
@property (nonatomic,copy) id endShowHandler; 
@property (getter=isAtBeginning,nonatomic,readonly) bool atBeginning; 
@property (nonatomic,readonly) KNSlideNode * currentSlideNode; 
@property (nonatomic,readonly) KNSlideNode * nextSlideNode; 
@property (nonatomic,readonly) unsigned long long eventCount; 
@property (nonatomic,readonly) unsigned long long visibleEventIndex; 
@property (nonatomic,readonly) unsigned long long nextEventIndex; 
@property (getter=isAnimating,nonatomic,readonly) bool animating; 
@property (getter=isNonMovieAnimationAnimating,nonatomic,readonly) bool nonMovieAnimationAnimating; 
@property (getter=isNonMovieAnimationActive,nonatomic,readonly) bool nonMovieAnimationActive; 
@property (getter=isPaused,nonatomic,readonly) bool paused; 
@property (nonatomic,readonly) long long pausedConcealingStyle; 
@property (nonatomic,retain) NSObject<KNPlaybackConcealer> * playbackConcealer; 
@property (nonatomic,readonly) NSSet * movieRenderers; 
@property (assign,nonatomic) KNMovieRenderer * movieRendererWithVisibleHUD; 
@property (assign,nonatomic) bool automaticallyPlaysMovies; 
@property (assign,nonatomic) CGColorSpaceRef playbackColorSpace; 
@property (nonatomic,readonly) int playbackState; 
@property (assign,nonatomic) bool allowsShowToEndInternally; 
@property (assign,nonatomic) bool automaticallyPlaysSoundtrack; 
@property (assign,nonatomic) bool playsAutomaticEvents; 
@property (assign,nonatomic) bool shouldAnimateTransitionOnLastSlide; 
@property (nonatomic,readonly) NSArray * currentlyVisibleInfos; 
@property (assign,nonatomic) bool shouldAnimateNullTransitions; 
@property (assign,nonatomic) bool isHyperlinkInProgress; 
+(id)keyPathsForValuesAffectingPausedConcealingStyle;
+(id)keyPathsForValuesAffectingMovieRenderers;
-(unsigned long long)eventCount;
-(id)baseLayer;
-(int)playMode;
-(bool)shouldAnimateNullTransitions;
-(id)currentSlideNode;
-(void)pauseAnimations;
-(void)resumeAnimationsIfPaused;
-(unsigned long long)currentEventIndex;
-(id)nextSlideNode;
-(id)movieRenderers;
-(void)setPlayMode:(int)arg1 ;
-(void)p_setAnimator:(id)arg1 ;
-(id)initWithShow:(id)arg1 canvasDelegate:(id)arg2 ;
-(void)gotoNextEvent;
-(id)canvasDelegate;
-(id)nextSlideNodeAfterSlideNode:(id)arg1 ;
-(id)breadCrumbTrail;
-(void)setBreadCrumbTrail:(id)arg1 ;
-(/*^block*/ id)endShowHandler;
-(void)setEndShowHandler:(/*^block*/ id)arg1 ;
-(bool)shouldAnimateTransitionOnLastSlide;
-(void)setShouldAnimateTransitionOnLastSlide:(bool)arg1 ;
-(void)setShouldAnimateNullTransitions:(bool)arg1 ;
-(void)applyMovieControl:(long long)arg1 ;
-(void)p_movieStarted:(id)arg1 ;
-(bool)isNonMovieAnimationActive;
-(bool)isNonMovieAnimationAnimating;
-(void)renderCurrentEvent;
-(void)playAutomaticEvents;
-(void)p_resetAnimatorAtEventIndex:(unsigned long long)arg1 ;
-(void)p_retainDiscreteGPUIfNeeded;
-(void)p_endShowFromAnimator;
-(bool)automaticallyPlaysMovies;
-(double)p_defaultViewScaleForBaseLayer:(id)arg1 ;
-(void)prepareOnLayer:(id)arg1 viewScale:(double)arg2 atSlideNode:(id)arg3 isBaseLayerVisible:(bool)arg4 ;
-(bool)playsAutomaticEvents;
-(void)endShow;
-(void)tearDownShow;
-(void)p_releaseDiscreteGPUIfRetained;
-(unsigned long long)visibleEventIndex;
-(bool)gotoSlideNode:(id)arg1 toEventIndex:(unsigned long long)arg2 shouldAnimate:(bool)arg3 ignoreDelays:(bool)arg4 ;
-(void)p_gotoPreviousAndJumpToFirstEvent:(bool)arg1 ;
-(void)gotoNextEventIgnoringDelay:(bool)arg1 ;
-(bool)gotoNextSlideWithAnimation:(bool)arg1 ignoreDelays:(bool)arg2 ;
-(void)p_resetAnimatorAndSetGoToFirstEvent:(bool)arg1 ;
-(id)playbackConcealer;
-(void)pauseAnimationsWithConcealingStyle:(long long)arg1 ;
-(void)pauseSoundtrack;
-(void)resumeSoundtrack;
-(unsigned long long)nextEventIndex;
-(void)setCurrentEventIndex:(unsigned long long)arg1 ;
-(id)p_animator;
-(id)p_topLevelRepsForHitTesting;
-(id)p_hyperlinkURLForTarget:(id)arg1 rep:(id)arg2 info:(id)arg3 ;
-(id)currentlyVisibleInfos;
-(bool)p_processHyperlinkURL:(id)arg1 ;
-(bool)gotoLastSlideWithAnimation:(bool)arg1 ignoreDelays:(bool)arg2 ;
-(bool)gotoFirstSlideWithAnimation:(bool)arg1 ignoreDelays:(bool)arg2 ;
-(bool)gotoPreviousSlideWithAnimation:(bool)arg1 ignoreDelays:(bool)arg2 ;
-(bool)gotoLastVisitedSlideWithAnimation:(bool)arg1 ignoreDelays:(bool)arg2 ;
-(id)p_currentBuildChunks;
-(void)p_movieEnded:(id)arg1 ;
-(void)p_eventStarted:(id)arg1 ;
-(void)p_eventAnimationBecameActive:(id)arg1 ;
-(void)p_eventEnded:(id)arg1 ;
-(void)prepareOnLayer:(id)arg1 atSlideNode:(id)arg2 isBaseLayerVisible:(bool)arg3 ;
-(double)buildsToAnimateDuration;
-(id)buildEventIndexesToAnimate;
-(void)setBuildEventIndexesToAnimate:(id)arg1 ;
-(void)playPreparedShow;
-(void)resizeShowToFitBaseLayer;
-(bool)isAtBeginning;
-(void)gotoPreviousEvent;
-(void)gotoFirstEvent;
-(void)gotoNextEventWithoutAnimation;
-(void)suspendRendering;
-(void)resumeRendering;
-(long long)pausedConcealingStyle;
-(void)stopAnimationsAndGotoCompletionOfEvent;
-(void)restartPlaybackIfNeeded;
-(void)startSoundtrackAtMediaIndex:(unsigned long long)arg1 time:(double)arg2 ;
-(void)stopSoundtrack;
-(id)movieRendererAtPoint:(CGPoint)arg1 ;
-(void)setAutomaticallyPlaysMovies:(bool)arg1 ;
-(void)setPlaybackColorSpace:(CGColorSpaceRef)arg1 ;
-(bool)isHyperlinkAtPoint:(CGPoint)arg1 hitObject:(id*)arg2 hitRep:(id*)arg3 hitInfo:(id*)arg4 ;
-(bool)processHyperlinkForTarget:(id)arg1 rep:(id)arg2 info:(id)arg3 ;
-(bool)isHyperlinkInProgress;
-(void)setIsHyperlinkInProgress:(bool)arg1 ;
-(id)movieRendererWithVisibleHUD;
-(void)setMovieRendererWithVisibleHUD:(id)arg1 ;
-(void)setPlaybackConcealer:(id)arg1 ;
-(bool)allowsShowToEndInternally;
-(void)setAllowsShowToEndInternally:(bool)arg1 ;
-(bool)automaticallyPlaysSoundtrack;
-(void)setAutomaticallyPlaysSoundtrack:(bool)arg1 ;
-(void)setPlaysAutomaticEvents:(bool)arg1 ;
-(CGColorSpaceRef)playbackColorSpace;
-(bool)isPaused;
-(int)playbackState;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)delegate;
-(id)show;
-(bool)isAnimating;
-(void)stopAnimations;
@end

