/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:37 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSCHChartRep.h>
#import <iWorkImport/TSCHChartMultiDataRendering.h>

@class CALayer, NSMutableDictionary, TSCHMultiDataChartRepElementIndex;

@interface TSCHMultiDataChartRep : TSCHChartRep <TSCHChartMultiDataRendering> {

	CALayer* mRootLayer;
	CALayer* mElementsContainerLayer;
	bool mRenderingBackgroundLayer;
	bool mRenderingElementShapeLayer;
	bool mRenderingElementLabelsLayer;
	bool mRenderingDataSetNameLayer;
	bool mAnimatedLayersNeedUpdate;
	bool mShouldAnimateLabelsQuickly;
	bool mIsAnimatingForBuilds;
	unsigned long long mElementLayersMultiDataSetIndex;
	int mGridDirection;
	NSMutableDictionary* mIndexedElements;
	TSCHMultiDataChartRepElementIndex* mCurrentRepElementIndex;
	CALayer* mDataSetNameLayer;

}

@property (nonatomic,copy) TSCHMultiDataChartRepElementIndex * currentRepElementIndex; 
-(bool)isHorizontalChart;
-(id)renderSeriesIndexSetForFinalElements:(bool)arg1 currentChunk:(long long)arg2 ;
-(id)renderValueIndexSetForSeries:(unsigned long long)arg1 finalElements:(bool)arg2 currentChunk:(long long)arg3 ;
-(void)processChanges:(id)arg1 ;
-(id)initWithLayout:(id)arg1 canvas:(id)arg2 ;
-(void)didUpdateLayer:(id)arg1 ;
-(void)clearDragHighlightAndPreviewState;
-(void)showHitFeedbackForSelectionPath:(id)arg1 ;
-(void)viewScaleDidChange;
-(void)updatePositionsOfKnobs:(id)arg1 ;
-(void)endCanvasTextEditing;
-(void)tswpTextEditingDidEndEditing:(id)arg1 ;
-(void)animationDidEndForChunkStage:(long long)arg1 ;
-(bool)shouldUseLegendLayerForLayerBasedRep;
-(bool)frameInUnscaledCanvasNeedsPaddingForShadows;
-(void)addAdditionalChildLayersToArray:(id)arg1 ;
-(bool)canDrawInBackgroundDuringScroll;
-(bool)canDrawInParallel;
-(id)textureForContext:(id)arg1 ;
-(bool)renderElements;
-(bool)renderLabels;
-(void)updateFromLayout;
-(bool)buildShouldUseRenderer:(id)arg1 ;
-(bool)shouldUseRenderer:(id)arg1 ;
-(bool)planeIsVisible:(int)arg1 ;
-(void)addKnobsToArray:(id)arg1 ;
-(bool)beginCanvasTextEditingForSelectionPath:(id)arg1 ;
-(CGAffineTransform)transformToConvertNaturalToRepElement;
-(id)newDataSetNameLayer;
-(void)p_updateAnimatedLayers;
-(id)p_dataSetNameLayoutItem;
-(id)currentRepElementIndex;
-(bool)p_isDataSetNameRenderer:(id)arg1 ;
-(CGRect)adjustedChartImageFrameFromFrame:(CGRect)arg1 ;
-(CGImageRef)newChartImageForFrame:(CGRect)arg1 originOffset:(CGPoint)arg2 returningAdjustedFrame:(CGRect*)arg3 ;
-(void)setCurrentRepElementIndex:(id)arg1 ;
-(id)createMultiDataElementShapeLayerForSeriesIndex:(unsigned long long)arg1 ;
-(void)updateAppearanceForElementLayer:(id)arg1 seriesIndex:(unsigned long long)arg2 ;
-(CGRect)currentRepElementBoundsInNaturalSpace;
-(CGRect)convertNaturalRectToRepElement:(CGRect)arg1 ;
-(unsigned long long)currentSeriesIndex;
-(void)updateElementFrame:(CGRect)arg1 forElementLayer:(id)arg2 series:(id)arg3 addingAnimationsToAnimationInfo:(id)arg4 ;
-(CGRect)p_dataSetNameNaturalSpaceRect;
-(id)p_createChartBitmapLayerForFrame:(CGRect)arg1 originOffset:(CGPoint)arg2 returningAdjustedFrame:(CGRect*)arg3 ;
-(id)p_createDataSetNameLayer;
-(id)p_labelsAnimationKeyTimes;
-(bool)needsAnimationForAnimationInfo:(id)arg1 ;
-(void)p_addAnimationsForLabelLayer:(id)arg1 contents:(id)arg2 frame:(CGRect)arg3 animationInfo:(id)arg4 ;
-(id)p_chartModel;
-(void)updateElementLayerLayoutForCurrentRepElementIndexAnimationInfo:(id)arg1 ;
-(void)updateElementLabelLayerLayoutForCurrentRepElementIndexAnimationInfo:(id)arg1 ;
-(void)p_updateDataSetNameLayerWithAnimationInfo:(id)arg1 ;
-(id)p_buildEngineAnimationDictionaryForAnimationInfos:(id)arg1 ;
-(id)p_elementLayers;
-(void)p_createElementLayerForSeriesIndex:(unsigned long long)arg1 valueIndex:(unsigned long long)arg2 removingReusableLayerFromPreviousElements:(id)arg3 ;
-(void)p_createElementLayersIfNecessary;
-(void)p_addElementLayersToLayerTreeIfNecessary;
-(void)p_updateElementLayerFills;
-(id)p_updateAnimatedLayerLayoutsWithAnimationDuration:(double)arg1 ;
-(void)p_applyAnimationsFromAnimationInfos:(id)arg1 ;
-(void)drawInLayerContext:(CGContextRef)arg1 ;
-(bool)directlyManagesVisibilityOfKnob:(id)arg1 ;
-(id)p_fadeAnimationInfosForLayers:(id)arg1 duration:(double)arg2 ;
-(id)p_createBackgroundLayer;
-(id)p_createAnimationInfosWithBuildStages:(id)arg1 animatedLayers:(id)arg2 ;
-(void)p_useNewTemporaryLayersWithAnimationDuration:(double)arg1 inBlock:(/*^block*/ id)arg2 ;
-(id)p_animationDictionaryForAnimationInfos:(id)arg1 ;
-(id)p_createAnimationInfosArrayWithBuildStages:(id)arg1 returningAnimatedLayers:(id*)arg2 ;
-(id)p_buildEngineAnimationDictionaryForAnimationInfosArray:(id)arg1 duration:(double)arg2 ;
-(unsigned long long)p_dataSetIndexForBuildStage:(unsigned long long)arg1 ;
-(id)createAnimatedLayersDictionaryWithScale:(double)arg1 forBuildStage:(unsigned long long)arg2 buildIn:(bool)arg3 duration:(double)arg4 returningAnimatedLayers:(id*)arg5 ;
-(CGAffineTransform)transformToConvertChartLayoutToRepElement;
-(id)imageFromFill:(id)arg1 forResolutionWithBounds:(CGRect)arg2 toRepElementTransform:(CGAffineTransform)arg3 skipIntegral:(bool)arg4 returningFillFrame:(CGRect*)arg5 ;
-(bool)hasCurrentRepElementIndex;
-(unsigned long long)currentGroupIndex;
-(void)dealloc;
-(id)actionForLayer:(id)arg1 forKey:(id)arg2 ;
@end

