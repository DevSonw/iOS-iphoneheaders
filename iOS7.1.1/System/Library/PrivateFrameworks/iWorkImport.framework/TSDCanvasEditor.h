/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:39 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDCanvasEditor.h>

@protocol TSDCanvasEditor <TSDEditor,TSDSubcommandProvider,TSDTextInput>
@property (nonatomic,readonly) TSDInteractiveCanvasController * interactiveCanvasController; 
@property (nonatomic,readonly) TSDCanvasEditorHelper * canvasEditorHelper; 
@property (nonatomic,readonly) TSKSelection<TSDCanvasSelection> * canvasSelection; 
@property (nonatomic,readonly) TSPObject * modelForSelection; 
@property (nonatomic,readonly) <TSDArrangeInspectorDelegate> * arrangeInspectorDelegate; 
@property (nonatomic,readonly) TSKPasteboardController * pasteboardController; 
@property (nonatomic,retain) TSKSelection * selection; 
@optional
-(id)exteriorTextWrapForInfos:(id)arg1;
-(void)setExteriorTextWrap:(id)arg1 forInfos:(id)arg2;
-(void)setExteriorTextWrapMargin:(double)arg1 forInfos:(id)arg2;

@required
+(id)canvasSelectionWithInfos:(id)arg1;
+(id)canvasSelectionWithInfos:(id)arg1 andContainer:(id)arg2;
-(id)interactiveCanvasController;
-(id)initWithInteractiveCanvasController:(id)arg1;
-(int)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2;
-(void)setSelection:(id)arg1 withFlags:(unsigned long long)arg2;
-(id)canvasSelection;
-(void)repWasCreated:(id)arg1;
-(void)canvasInfosDidChange;
-(id)canvasSelectionWithInfos:(id)arg1;
-(void)setSelectionToRep:(id)arg1;
-(void)setSelectionToInfo:(id)arg1;
-(id)editorToPopToOnEndEditing;
-(bool)isRepSelectable:(id)arg1;
-(bool)isSelectedInfo:(id)arg1;
-(id)canvasSelectionWithInfos:(id)arg1 andContainer:(id)arg2;
-(id)canvasEditorHelper;
-(void)lock:(id)arg1;
-(void)unlock:(id)arg1;
-(void)maskWithShape:(id)arg1;
-(void)mask:(id)arg1;
-(void)deleteGuide:(id)arg1;
-(void)clearGuides:(id)arg1;
-(void)copyUserDefinedGuides:(id)arg1;
-(void)pasteUserDefinedGuides:(id)arg1;
-(id)pasteboardController;
-(bool)canvasEditorCanDeleteWithSender:(id)arg1;
-(bool)canvasEditorCanCopyWithSender:(id)arg1;
-(bool)canvasEditorCanPasteWithSender:(id)arg1;
-(unsigned long long)countOfDrawables;
-(bool)canGroupDrawable:(id)arg1;
-(void)copyToPasteboard:(id)arg1 withSender:(id)arg2;
-(id)commandForDeletingDrawables:(id)arg1;
-(void)pasteValues:(id)arg1;
-(void)setSelectionToInfos:(id)arg1;
-(void)unmask:(id)arg1;
-(void)prepareGeometryForInsertingDrawables:(id)arg1 withInsertionContext:(id)arg2;
-(CGSize*)sizeForInsertingMediaOfSize:(CGSize)arg1;
-(void)insertDrawables:(id)arg1 withInsertionContext:(id)arg2;
-(id)commandForDelete;
-(id)selectionBehaviorForDelete;
-(void)pasteWithPasteboard:(id)arg1 selection:(id)arg2 forceMatchStyle:(bool)arg3 sender:(id)arg4 bakeFormulas:(bool)arg5;
-(id)pasteNativeInfosFromPasteboard:(id)arg1 allowImageReplacement:(bool)arg2;
-(void)connectWithConnectionLine:(id)arg1;
-(bool)shouldUseAlternateSelectionHighlight;
-(bool)canvasEditorCanCutWithSender:(id)arg1;
-(bool)canvasEditorCanPasteAsPlainTextWithSender:(id)arg1;
-(bool)canvasEditorCanPasteValuesWithSender:(id)arg1;
-(bool)canvasEditorCanDuplicateWithSender:(id)arg1;
-(bool)canvasEditorCanCopyStyleWithSender:(id)arg1;
-(bool)canvasEditorCanSelectAllWithSender:(id)arg1;
-(bool)canvasEditorCanGroupWithSender:(id)arg1;
-(bool)canvasEditorCanUngroupWithSender:(id)arg1;
-(bool)shouldPushNewEditorForNewSelection;
-(id)guidePasteboard;
-(id)modelForSelection;
-(id)arrangeInspectorDelegate;
-(id)selection;
-(void)setSelection:(id)arg1;
-(void)selectAll:(id)arg1;
-(void)cut:(id)arg1;
-(void)copy:(id)arg1;
-(void)paste:(id)arg1;
-(void)select:(id)arg1;
-(void)delete:(id)arg1;
-(id)drawables;
-(void)teardown;
-(void)pasteAsPlainText:(id)arg1;
@end


@protocol TSDArrangeInspectorDelegate, TSDInlineFloatingWrapInspectorDelegate;
@class TSDInteractiveCanvasController, TSDCanvasEditorHelper, TSPObject, TSKPasteboardController, TSKSelection, TSDCanvasSelection, NSObject, UIView, NSSet;

@interface TSDCanvasEditor : NSObject <TSDCanvasEditor> {

	TSDInteractiveCanvasController* mInteractiveCanvasController;
	TSDCanvasEditorHelper* mCanvasEditorHelper;
	TSDCanvasSelection* mSelection;
	NSObject<TSDArrangeInspectorDelegate>* mZOrderArranger;
	NSObject<TSDInlineFloatingWrapInspectorDelegate>* mInlineFloatingEditor;
	bool mPreventImageDataReplace;
	UIView* mInputView;

}

@property (nonatomic,readonly) NSSet * infosForSelectAllInRoot; 
@property (nonatomic,retain) TSKSelection * selection; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingFill; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingStroke; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingShadow; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingReflection; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingOpacity; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingTextInset; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingConnectionLineAttributes; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingEndpoints; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingSmartShapeAttributes; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingResize; 
@property (nonatomic,readonly) NSSet * selectedObjectsSupportingShrinkTextToFit; 
@property (nonatomic,readonly) TSKSelection<TSDTextSelection> * textInputSelection; 
@property (nonatomic,readonly) NSRange markedRange; 
@property (readonly) UIView * inputView; 
@property (readonly) UIView * inputAccessoryView; 
@property (readonly) bool wantsRawArrowKeyEvents; 
@property (nonatomic,retain) TSKSelection<TSDTextSelection> * selectionForArrowKeys; 
@property (nonatomic,readonly) TSDInteractiveCanvasController * interactiveCanvasController; 
@property (nonatomic,readonly) TSDCanvasEditorHelper * canvasEditorHelper; 
@property (nonatomic,readonly) TSKSelection<TSDCanvasSelection> * canvasSelection; 
@property (nonatomic,readonly) TSPObject * modelForSelection; 
@property (nonatomic,readonly) <TSDArrangeInspectorDelegate> * arrangeInspectorDelegate; 
@property (nonatomic,readonly) TSKPasteboardController * pasteboardController; 
+(id)canvasSelectionWithInfos:(id)arg1 ;
+(id)canvasSelectionWithInfos:(id)arg1 andContainer:(id)arg2 ;
+(Class)canvasEditorHelperClass;
+(bool)physicalKeyboardIsSender:(id)arg1 ;
+(/*^block*/ id)spatialInfoComparator;
-(id)selectionWithRange:(NSRange)arg1 ;
-(id)interactiveCanvasController;
-(id)initWithInteractiveCanvasController:(id)arg1 ;
-(int)canPerformEditorAction:(SEL)arg1 withSender:(id)arg2 ;
-(void)addOrShowComment:(id)arg1 ;
-(void)setSelection:(id)arg1 withFlags:(unsigned long long)arg2 ;
-(id)canvasSelection;
-(void)repWasCreated:(id)arg1 ;
-(void)canvasInfosDidChange;
-(id)canvasSelectionWithInfos:(id)arg1 ;
-(void)setSelectionToRep:(id)arg1 ;
-(void)setSelectionToInfo:(id)arg1 ;
-(id)editorToPopToOnEndEditing;
-(bool)isRepSelectable:(id)arg1 ;
-(bool)isSelectedInfo:(id)arg1 ;
-(id)canvasSelectionWithInfos:(id)arg1 andContainer:(id)arg2 ;
-(id)canvasEditorHelper;
-(void)lock:(id)arg1 ;
-(void)unlock:(id)arg1 ;
-(void)duplicate:(id)arg1 ;
-(void)maskWithShape:(id)arg1 ;
-(void)mask:(id)arg1 ;
-(void)maskWithShapeType:(id)arg1 ;
-(void)reduceDocumentFileSize:(id)arg1 ;
-(void)reduceFileSizeForSelectedImages:(id)arg1 ;
-(void)bringToFront:(id)arg1 ;
-(void)bringForward:(id)arg1 ;
-(void)sendBackward:(id)arg1 ;
-(void)sendToBack:(id)arg1 ;
-(void)arrowKeyReceivedInDirection:(int)arg1 withModifierKeys:(int)arg2 ;
-(bool)canDeleteComment;
-(void)deleteGuide:(id)arg1 ;
-(void)clearGuides:(id)arg1 ;
-(void)copyUserDefinedGuides:(id)arg1 ;
-(void)pasteUserDefinedGuides:(id)arg1 ;
-(id)p_filterNonDisplayedInfos:(id)arg1 ;
-(id)pasteboardController;
-(bool)canvasEditorCanDeleteWithSender:(id)arg1 ;
-(bool)canvasEditorCanCopyWithSender:(id)arg1 ;
-(bool)canCopyStyle;
-(bool)canvasEditorCanPasteWithSender:(id)arg1 ;
-(unsigned long long)countOfDrawables;
-(bool)canSelectAllWithSender:(id)arg1 ;
-(bool)canGroupDrawable:(id)arg1 ;
-(bool)canGroupWithSender:(id)arg1 ;
-(bool)canUngroupWithSender:(id)arg1 ;
-(bool)canAddOrShowComment;
-(void)copyToPasteboard:(id)arg1 withSender:(id)arg2 ;
-(id)commandForInsertingDrawable:(id)arg1 withInsertionContext:(id)arg2 ;
-(id)commandForDeletingDrawables:(id)arg1 ;
-(void)pasteValues:(id)arg1 ;
-(id)infosForSelectAllInRoot;
-(void)setSelectionToInfos:(id)arg1 ;
-(void)ungroup:(id)arg1 ;
-(id)p_spatiallySortedDrawables;
-(id)p_nextInfoInTabSequence:(int)arg1 ;
-(void)unmask:(id)arg1 ;
-(void)prepareGeometryForInsertingDrawables:(id)arg1 withInsertionContext:(id)arg2 ;
-(CGSize)sizeForInsertingMediaOfSize:(CGSize)arg1 ;
-(void)insertDrawables:(id)arg1 withInsertionContext:(id)arg2 ;
-(id)commandForDelete;
-(id)selectionBehaviorForDelete;
-(void)pasteWithPasteboard:(id)arg1 selection:(id)arg2 forceMatchStyle:(bool)arg3 sender:(id)arg4 bakeFormulas:(bool)arg5 ;
-(id)pasteNativeInfosFromPasteboard:(id)arg1 allowImageReplacement:(bool)arg2 ;
-(void)connectWithConnectionLine:(id)arg1 ;
-(bool)shouldUseAlternateSelectionHighlight;
-(bool)canvasEditorCanCutWithSender:(id)arg1 ;
-(bool)canvasEditorCanPasteAsPlainTextWithSender:(id)arg1 ;
-(bool)canvasEditorCanPasteValuesWithSender:(id)arg1 ;
-(bool)canvasEditorCanDuplicateWithSender:(id)arg1 ;
-(bool)canvasEditorCanCopyStyleWithSender:(id)arg1 ;
-(bool)canvasEditorCanSelectAllWithSender:(id)arg1 ;
-(bool)canvasEditorCanGroupWithSender:(id)arg1 ;
-(bool)canvasEditorCanUngroupWithSender:(id)arg1 ;
-(bool)shouldPushNewEditorForNewSelection;
-(id)guidePasteboard;
-(id)modelForSelection;
-(id)arrangeInspectorDelegate;
-(id)commandForInsertingDrawables:(id)arg1 below:(id)arg2 ;
-(bool)wantsKeyboard;
-(bool)textIsVerticalAtCharIndex:(unsigned long long)arg1 ;
-(void)deleteForward;
-(void)extendSelectionLeft;
-(void)extendSelectionRight;
-(id)textColorAtCharIndex:(unsigned long long)arg1 ;
-(id)textFontAtCharIndex:(unsigned long long)arg1 ;
-(void)setSelectionWithRange:(NSRange)arg1 endOfLine:(bool)arg2 ;
-(void)clearMarkedRange;
-(bool)isCharIndex:(unsigned long long)arg1 withEolAffinity:(bool)arg2 atBoundary:(long long)arg3 inDirection:(long long)arg4 ;
-(unsigned long long)charIndexByMovingPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3 preferPosition:(float*)arg4 ;
-(bool)isCharIndex:(unsigned long long)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3 ;
-(NSRange)rangeOfWordEnclosingCharIndex:(unsigned long long)arg1 backward:(bool)arg2 ;
-(id)textInputSelection;
-(bool)wantsRawArrowKeyEvents;
-(void)maskWithSelection:(id)arg1 ;
-(void)alignDrawablesByLeftEdge:(id)arg1 ;
-(void)alignDrawablesByRightEdge:(id)arg1 ;
-(void)alignDrawablesByVerticalCenter:(id)arg1 ;
-(void)alignDrawablesByTopEdge:(id)arg1 ;
-(void)alignDrawablesByBottomEdge:(id)arg1 ;
-(void)alignDrawablesByHorizontalCenter:(id)arg1 ;
-(void)distributeDrawablesHorizontally:(id)arg1 ;
-(void)distributeDrawablesVertically:(id)arg1 ;
-(void)distributeDrawablesEvenly:(id)arg1 ;
-(Class)editorClassForSelection;
-(bool)canPasteWithSender:(id)arg1 ;
-(void)insertText:(id)arg1 replacementRange:(NSRange)arg2 ;
-(void)setMarkedText:(id)arg1 selectedRange:(NSRange)arg2 replacementRange:(NSRange)arg3 ;
-(void)copyObject:(id)arg1 ;
-(void)cutObject:(id)arg1 ;
-(void)pasteObject:(id)arg1 ;
-(void)p_notifyRepsForSelectionChangeFrom:(id)arg1 to:(id)arg2 ;
-(void)group:(id)arg1 ;
-(void)dealloc;
-(id)keyCommands;
-(id)selection;
-(void)setSelection:(id)arg1 ;
-(void)endEditing;
-(id)textInRange:(NSRange)arg1 ;
-(void)insertText:(id)arg1 ;
-(void)deleteBackward;
-(void)replaceRange:(NSRange)arg1 withText:(id)arg2 ;
-(void)setMarkedText:(id)arg1 selectedRange:(NSRange)arg2 ;
-(CGRect)firstRectForRange:(NSRange)arg1 ;
-(id)selectionRectsForRange:(NSRange)arg1 ;
-(NSRange)markedRange;
-(long long)returnKeyType;
-(id)inputView;
-(id)inputAccessoryView;
-(void)selectAll:(id)arg1 ;
-(void)cut:(id)arg1 ;
-(void)copy:(id)arg1 ;
-(void)paste:(id)arg1 ;
-(void)select:(id)arg1 ;
-(void)deleteBackward:(id)arg1 ;
-(void)delete:(id)arg1 ;
-(NSRange)editRange;
-(id)drawables;
-(void)teardown;
-(id)documentRoot;
-(void)deleteObject:(id)arg1 ;
-(void)deleteComment:(id)arg1 ;
-(unsigned long long)textLength;
-(void)deleteForward:(id)arg1 ;
-(void)insertBacktab:(id)arg1 ;
-(void)insertTab:(id)arg1 ;
-(void)scrollToBeginningOfDocument:(id)arg1 ;
-(void)scrollToEndOfDocument:(id)arg1 ;
-(void)deleteToBeginningOfLine:(id)arg1 ;
-(void)deleteToEndOfLine:(id)arg1 ;
-(void)deleteWordBackward:(id)arg1 ;
-(void)deleteWordForward:(id)arg1 ;
-(void)pasteAsPlainText:(id)arg1 ;
@end

