/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:41 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol TSDCanvasDelegate;
#import <iWorkImport/iWorkImport-Structs.h>
@class TSDInteractiveCanvasController, NSArray, NSSet, TSDLayoutController, TSKDocumentRoot, TSPObjectContext, TSKChangeNotifier, TSKAccessController;

@interface TSDCanvas : NSObject {

	<TSDCanvasDelegate>* mDelegate;
	TSDInteractiveCanvasController* mCanvasController;
	NSArray* mInfos;
	NSArray* mTopLevelReps;
	NSSet* mAllReps;
	CFDictionaryRef mRepsByLayout;
	TSDLayoutController* mLayoutController;
	bool mIsTemporaryForLayout;
	CGSize mUnscaledSize;
	double mViewScale;
	double mContentsScale;
	struct {
		unsigned layout : 1;
		unsigned reps : 1;
		unsigned visibleBounds : 1;
		unsigned layers : 1;
	}  mInvalidFlags;
	bool mInLayout;
	NSArray* mPreviouslyVisibleLayouts;
	CGColorRef mBackgroundColor;
	UIEdgeInsets mContentInset;
	bool mClipToCanvas;
	bool mAllowsFontSubpixelQuantization;

}

@property (assign,nonatomic) <TSDCanvasDelegate> * delegate; 
@property (nonatomic,readonly) TSKDocumentRoot * documentRoot; 
@property (nonatomic,readonly) TSPObjectContext * objectContext; 
@property (nonatomic,readonly) TSKChangeNotifier * changeNotifier; 
@property (nonatomic,readonly) TSKAccessController * accessController; 
@property (nonatomic,readonly) TSDInteractiveCanvasController * canvasController; 
@property (nonatomic,readonly) bool supportsAdaptiveLayout; 
@property (assign,nonatomic) bool allowsFontSubpixelQuantization; 
@property (assign,nonatomic) CGColorRef backgroundColor; 
@property (assign,nonatomic) UIEdgeInsets contentInset; 
@property (nonatomic,copy) NSArray * infosToDisplay; 
@property (nonatomic,readonly) TSDLayoutController * layoutController; 
@property (nonatomic,readonly) bool isTemporaryForLayout; 
@property (nonatomic,readonly) bool isCanvasInteractive; 
@property (assign,nonatomic) CGSize unscaledSize; 
@property (assign,nonatomic) double viewScale; 
-(id)textRendererForLayer:(id)arg1 context:(CGContextRef)arg2 ;
-(id)changeNotifier;
-(id)accessController;
-(double)viewScale;
-(CGRect)visibleUnscaledRectForClippingReps;
-(bool)isCanvasInteractive;
-(CGPoint)convertBoundsToUnscaledPoint:(CGPoint)arg1 ;
-(void)invalidateLayers;
-(CGRect)convertBoundsToUnscaledRect:(CGRect)arg1 ;
-(CGRect)convertUnscaledToBoundsRect:(CGRect)arg1 ;
-(bool)isPrinting;
-(bool)isDrawingIntoPDF;
-(id)canvasController;
-(void)layoutInvalidated;
-(CGSize)unscaledSize;
-(id)commandController;
-(bool)shouldSuppressBackgrounds;
-(id)layoutController;
-(CGPoint)convertUnscaledToBoundsPoint:(CGPoint)arg1 ;
-(void)i_setCanvasController:(id)arg1 ;
-(id)allReps;
-(void)p_layoutWithReadLock;
-(void)invalidateReps;
-(void)invalidateVisibleBounds;
-(id)topLevelReps;
-(bool)spellCheckingSupported;
-(bool)spellCheckingSuppressed;
-(bool)shouldShowTextOverflowGlyphs;
-(bool)shouldShowInstructionalText;
-(id)infosToDisplay;
-(void)i_setInfosToDisplay:(id)arg1 updatingLayoutController:(bool)arg2 ;
-(void)i_updateInfosInLayoutController;
-(id)repForLayout:(id)arg1 ;
-(void)recreateAllLayoutsAndReps;
-(void)i_unregisterRep:(id)arg1 ;
-(id)hitRep:(CGPoint)arg1 inTopLevelReps:(id)arg2 smallRepOutset:(double)arg3 passingTest:(/*^block*/ id)arg4 ;
-(id)objectContext;
-(bool)i_needsLayout;
-(CGRect)i_unscaledRectOfLayouts;
-(void)setUnscaledSize:(CGSize)arg1 ;
-(bool)supportsAdaptiveLayout;
-(void)setInfosToDisplay:(id)arg1 ;
-(CGSize)convertUnscaledToBoundsSize:(CGSize)arg1 ;
-(CGSize)convertBoundsToUnscaledSize:(CGSize)arg1 ;
-(void)i_registerRep:(id)arg1 ;
-(void)addBitmapsToRenderingQualityInfo:(id)arg1 inContext:(CGContextRef)arg2 ;
-(CGImageRef)i_imageInScaledRect:(CGRect)arg1 withTargetIntegralSize:(CGSize)arg2 distortedToMatch:(bool)arg3 ;
-(void)i_clipsImagesToBounds:(bool)arg1 ;
-(CGImageRef)i_imageInScaledRect:(CGRect)arg1 ;
-(void)i_drawBackgroundInContext:(CGContextRef)arg1 ;
-(void)i_drawRepsInContext:(CGContextRef)arg1 ;
-(CGContextRef)i_createContextToDrawImageInScaledRect:(CGRect)arg1 withTargetIntegralSize:(CGSize)arg2 returningBounds:(CGRect*)arg3 integralBounds:(CGRect*)arg4 ;
-(CGImageRef)i_newImageInContext:(CGContextRef)arg1 bounds:(CGRect)arg2 integralBounds:(CGRect)arg3 distortedToMatch:(bool)arg4 ;
-(id)initForTemporaryLayout;
-(CGRect)i_approximateScaledFrameOfEditingMenuAtPoint:(CGPoint)arg1 ;
-(void)p_removeAllReps;
-(bool)p_updateRepsFromLayouts;
-(bool)isTemporaryForLayout;
-(CGRect)p_bounds;
-(bool)p_expandHitRegionOfPoint:(CGPoint)arg1 forRep:(id)arg2 smallRepOutset:(double)arg3 forShortestDistance:(double*)arg4 ;
-(bool)p_shouldRep:(id)arg1 countAsClosestSmallRepForSizeLimit:(double)arg2 ;
-(void)i_drawBackgroundInContext:(CGContextRef)arg1 bounds:(CGRect)arg2 ;
-(void)i_drawRepsInContext:(CGContextRef)arg1 distort:(CGAffineTransform)arg2 ;
-(CGRect)i_clipRectForCreatingRepsFromLayouts;
-(void)i_setContentsScale:(double)arg1 ;
-(CGImageRef)i_image;
-(bool)allowsFontSubpixelQuantization;
-(void)setAllowsFontSubpixelQuantization:(bool)arg1 ;
-(void)dealloc;
-(void)setBackgroundColor:(CGColorRef)arg1 ;
-(CGColorRef)backgroundColor;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(id)delegate;
-(void)layoutIfNeeded;
-(double)contentsScale;
-(UIEdgeInsets)contentInset;
-(void)setContentInset:(UIEdgeInsets)arg1 ;
-(void)teardown;
-(id)documentRoot;
-(void)setViewScale:(double)arg1 ;
@end

