/*
* This header is generated by classdump-dyld 0.2
* on Sunday, June 29, 2014 at 1:26:54 PM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSDCanvasDelegate.h>
#import <iWorkImport/TSDConnectedInfoReplacing.h>

@class KNSlide, KNSlideNode, KNPlaybackSession, KNAnimatedSlideModel, NSIndexSet, NSMutableSet, NSMutableArray, TSUNoCopyDictionary, TSDCanvas, NSSet;

@interface KNAnimatedSlideView : NSObject <TSDCanvasDelegate, TSDConnectedInfoReplacing> {

	KNSlide* mSlide;
	KNSlideNode* mAlternateDestinationSlideNode;
	KNPlaybackSession* mSession;
	KNAnimatedSlideModel* mAnimatedSlideModel;
	unsigned long long mCurrentEventIndex;
	NSIndexSet* mEventIndexesToAnimate;
	bool mSlideIsBuildable;
	bool mTransitionInitialized;
	bool mShouldStopAnimations;
	NSMutableSet* mMovieRenderers;
	NSMutableSet* mBuildRenderers;
	unsigned long long mSlideNumber;
	double mTransitionStartTime;
	unsigned long long mAnimationsActive;
	unsigned long long mAnimationsStarted;
	bool mIsInDelayBeforeActiveAnimations;
	NSMutableArray* mChunks;
	TSUNoCopyDictionary* mBuildsToStartAfterMovieStartsMap;
	TSUNoCopyDictionary* mTextureSetForInfoMap;
	id mEventStartCallbackTarget;
	SEL mEventStartCallbackSelector;
	id mEventAnimationActiveCallbackTarget;
	SEL mEventAnimationActiveCallbackSelector;
	id mEventEndCallbackTarget;
	SEL mEventEndCallbackSelector;
	id mMovieStartCallbackTarget;
	SEL mMovieStartCallbackSelector;
	id mMovieEndCallbackTarget;
	SEL mMovieEndCallbackSelector;
	bool mEventTriggered;
	bool mQueuedTrigger;
	bool mSkipDelayOnTransition;
	TSDCanvas* mCanvas;
	int mIsTexturePreloadingCancelled;
	NSMutableSet* mTextureSets;

}

@property (assign,nonatomic) unsigned long long eventIndex; 
@property (nonatomic,readonly) unsigned long long eventCount; 
@property (nonatomic,readonly) bool hasBuilds; 
@property (nonatomic,readonly) bool isAnimating; 
@property (nonatomic,readonly) bool isNonMovieAnimationAnimating; 
@property (nonatomic,readonly) bool isNonMovieAnimationActive; 
@property (nonatomic,readonly) bool isDoneAnimating; 
@property (nonatomic,readonly) bool isMovieAnimating; 
@property (assign,nonatomic) bool eventHasTriggered; 
@property (assign,nonatomic) bool triggerQueued; 
@property (nonatomic,readonly) KNAnimatedSlideModel * model; 
@property (nonatomic,copy) NSIndexSet * eventIndexesToAnimate; 
@property (nonatomic,readonly) KNPlaybackSession * session; 
@property (nonatomic,readonly) NSSet * movieRenderers; 
@property (nonatomic,readonly) NSSet * animatingBuildRenderers; 
@property (assign,nonatomic) bool skipDelayOnTransition; 
@property (nonatomic,readonly) TSDCanvas * canvas; 
+(void)registerUserDefaults;
+(void)initialize;
-(bool)shouldSuppressBackgrounds;
-(bool)isPrintingCanvas;
-(bool)shouldShowInstructionalText;
-(bool)isCanvasDrawingIntoPDF:(id)arg1 ;
-(id)infoToConnectToForConnectionLineConnectedToInfo:(id)arg1 ;
-(unsigned long long)slideNumber;
-(unsigned long long)eventCount;
-(bool)hasBuilds;
-(id)repsCurrentlyVisible;
-(void)setTexture:(id)arg1 forRep:(id)arg2 ;
-(id)infosVisibleAtEvent:(unsigned long long)arg1 ignoreBuildVisibility:(bool)arg2 ;
-(void)setEventIndex:(unsigned long long)arg1 ;
-(id)animatingBuildRenderers;
-(void)pauseAnimations;
-(void)resumeAnimationsIfPaused;
-(void)renderCurrentEventPreparingNextEvent:(bool)arg1 ;
-(void)addAnimatedBuild:(id)arg1 ;
-(void)removeAnimatedBuild:(id)arg1 ;
-(void)clearAnimatedBuilds;
-(id)movieRenderers;
-(CGImageRef)copyImageOfCurrentEvent;
-(void)beginRenderingEvent:(unsigned long long)arg1 onBaseLayer:(id)arg2 shouldPrepareBuildAnimation:(bool)arg3 completionHandler:(/*^block*/ id)arg4 ;
-(void)renderEvent:(unsigned long long)arg1 intoContext:(CGContextRef)arg2 ignoreBuildVisibility:(bool)arg3 ;
-(void)cancelRendering;
-(bool)hasTransitionAtEventIndex:(long long)arg1 ;
-(id)initForSlideNode:(id)arg1 session:(id)arg2 ;
-(void)setupTransition;
-(void)renderEvent:(unsigned long long)arg1 onBaseLayer:(id)arg2 shouldPrepareBuildAnimation:(bool)arg3 ;
-(void)interruptAndReset;
-(void)registerForMovieStartCallback:(SEL)arg1 target:(id)arg2 ;
-(void)p_tearDownTextures;
-(void)p_setupTransitionStartTime;
-(void)p_resetMovieTextures;
-(void)p_clearMovieRenderers;
-(void)p_animateBuild:(id)arg1 afterDelay:(double)arg2 ;
-(void)buildHasFinishedAnimating:(id)arg1 ;
-(void)p_removeMovieRenderer:(id)arg1 ;
-(bool)p_shouldSkipActionBuild:(id)arg1 onMovieInfo:(id)arg2 ;
-(void)triggerNextEvent;
-(id)infosCurrentlyVisible;
-(bool)p_shouldAddInfoToTree:(id)arg1 ;
-(id)p_infosForSlide;
-(void)p_renderTexturesForEvent:(unsigned long long)arg1 onBaseLayer:(id)arg2 intoContext:(CGContextRef)arg3 shouldPrepareBuildAnimation:(bool)arg4 ignoreBuildVisibility:(bool)arg5 ;
-(void)p_preloadTexturesForEvent:(unsigned long long)arg1 ignoreBuildVisibility:(bool)arg2 priority:(long long)arg3 completionHandler:(/*^block*/ id)arg4 ;
-(void)renderEvent:(unsigned long long)arg1 shouldPrepareBuildAnimation:(bool)arg2 shouldPrepareTransition:(bool)arg3 ;
-(void)triggerNextEventIgnoringDelay:(bool)arg1 ;
-(id)eventIndexesToAnimate;
-(bool)isDoneAnimating;
-(void)p_animateCurrentEventIgnoringDelays:(bool)arg1 ;
-(void)p_stopAllMovieRenderers;
-(id)p_getRenderersAtEventIndex:(long long)arg1 ;
-(void)transitionHasFinishedAnimating:(id)arg1 ;
-(void)p_animateTransition:(id)arg1 ;
-(void)movieHasFinishedPlayback:(id)arg1 ;
-(void)p_addMovieRenderer:(id)arg1 ;
-(void)p_movieStarted:(id)arg1 ;
-(void)p_animateBuild:(id)arg1 ;
-(void)p_animateBuild:(id)arg1 isMoviePlayback:(bool)arg2 ;
-(void)registerForEventStartCallback:(SEL)arg1 target:(id)arg2 ;
-(void)registerForEventAnimationActiveCallback:(SEL)arg1 target:(id)arg2 ;
-(void)registerForEventEndCallback:(SEL)arg1 target:(id)arg2 ;
-(void)registerForMovieEndCallback:(SEL)arg1 target:(id)arg2 ;
-(bool)isNonMovieAnimationActive;
-(bool)isNonMovieAnimationAnimating;
-(bool)isMovieAnimating;
-(void)renderCurrentEvent;
-(bool)playAutomaticEvents;
-(void)setEventIndexesToAnimate:(id)arg1 ;
-(bool)isAtFirstEvent;
-(void)setNewDestinationSlideNode:(id)arg1 ;
-(id)textureSetForRep:(id)arg1 ;
-(bool)eventHasTriggered;
-(void)setEventHasTriggered:(bool)arg1 ;
-(bool)skipDelayOnTransition;
-(void)setSkipDelayOnTransition:(bool)arg1 ;
-(bool)triggerQueued;
-(void)setTriggerQueued:(bool)arg1 ;
-(id)session;
-(unsigned long long)eventIndex;
-(void)dealloc;
-(bool)isAnimating;
-(id)model;
-(void)reset;
-(id)documentRoot;
-(id)canvas;
-(void)stopAnimations;
@end

