/*
* This header is generated by classdump-dyld 0.2
* on Saturday, June 28, 2014 at 1:57:54 AM Japan Standard Time
* Operating System: Version 7.1.1 (Build 11D201)
* Image Source: /System/Library/CoreServices/SpringBoard.app/SpringBoard
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class PCPersistentTimer, SBPasscodeLockAssertionManager, SBPasscodeLockDisableAssertion, SecureBackup, NSString;

@interface SBDeviceLockController : NSObject {

	int _lockState;
	double _lastLockDate;
	BOOL _isPermanentlyBlocked;
	BOOL _isBlockedForThermalCondition;
	double _deviceLockUnblockTime;
	PCPersistentTimer* _deviceLockUnblockTimer;
	BOOL _cachedPasscodeLockedOrBlocked;
	SBPasscodeLockAssertionManager* _assertionManager;
	SBPasscodeLockDisableAssertion* _transientPasscodeCheckingAssertion;
	BOOL _okToSendNotifications;
	SecureBackup* _secureBackupHelper;
	NSString* _lastIncorrectPasscodeAttempt;

}
+(id)_sharedControllerCreateIfNecessary:(BOOL)arg1 ;
+(id)_sharedControllerIfExists;
+(id)sharedController;
-(BOOL)isPasscodeLockedOrBlocked;
-(void)enablePasscodeLockImmediately;
-(BOOL)deviceHasPasscodeSet;
-(id)lastLockDate;
-(BOOL)isPermanentlyBlocked:(double*)arg1 ;
-(void)setBlockedForThermalCondition:(BOOL)arg1 ;
-(BOOL)attemptDeviceUnlockWithPassword:(id)arg1 appRequested:(BOOL)arg2 ;
-(BOOL)isPasscodeLockedCached;
-(void)_setDeviceLockUnblockTime:(double)arg1 ;
-(void)_enablePasscodeLockImmediately:(BOOL)arg1 ;
-(void)_updateDeviceLockedState;
-(void)_uncachePasscodeIfNecessary;
-(void)_notePasscodeLockedOrBlockedStateMayHaveChanged:(BOOL)arg1 ;
-(void)_clearUnblockTimer;
-(void)_noteBlockedReasonsMayHaveChanged;
-(BOOL)_temporarilyBlocked;
-(void)_unblockTimerFired;
-(void)_scheduleUnblockTimer;
-(BOOL)_shouldLockDeviceNow;
-(void)_setLockState:(int)arg1 ;
-(void)_cachePassword:(id)arg1 ;
-(BOOL)isBlockedForThermalCondition;
-(void)_sendBlockStateChangeNotification;
-(void)_notifyOfFirstUnlock;
-(void)_addDeviceLockDisableAssertion:(id)arg1 ;
-(void)_removeDeviceLockDisableAssertion:(id)arg1 ;
-(BOOL)shouldAllowUnlockToApplication:(id)arg1 ;
-(BOOL)isBlocked;
-(void)dealloc;
-(id)init;
-(id)description;
-(void)_clearBlockedState;
-(BOOL)isPasscodeLocked;
@end

