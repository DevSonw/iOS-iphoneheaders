/*
* This header is generated by classdump-dyld 0.7
* on Wednesday, July 22, 2015 at 5:26:27 PM Japan Standard Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol VKTileSourceClient;
#import <VectorKit/VectorKit-Structs.h>
@class VKTilePool, VKTileKeyMap, VKTileKeyList, VKStyleManager, VKSharedResources, NSError, GEOResourceManifestConfiguration, NSLocale, NSString;

@interface VKTileSource : NSObject {

	id<VKTileSourceClient> _client;
	VKTilePool* _tilePool;
	VKTileKeyMap* _pendingLoads;
	VKTileKeyList* _decoding;
	VKTileKeyList* _failedTiles;
	VKStyleManager* _styleManager;
	double _contentScale;
	VKSharedResources* _sharedResources;
	int loadingTiles;
	NSError* _recentError;
	GEOResourceManifestConfiguration* _manifestConfiguration;
	NSLocale* _locale;
	NSString* _tileLoaderClientIdentifier;
	BOOL _preloadOnly;
	BOOL _requireWiFi;

}

@property (assign,nonatomic) id<VKTileSourceClient> client;                    //@synthesize client=_client - In the implementation block
@property (nonatomic,retain) VKStyleManager * styleManager;                    //@synthesize styleManager=_styleManager - In the implementation block
@property (nonatomic,retain) VKSharedResources * sharedResources;              //@synthesize sharedResources=_sharedResources - In the implementation block
@property (assign,nonatomic) double contentScale;                              //@synthesize contentScale=_contentScale - In the implementation block
@property (assign,nonatomic) BOOL preloadOnly;                                 //@synthesize preloadOnly=_preloadOnly - In the implementation block
@property (assign,nonatomic) BOOL requireWiFi;                                 //@synthesize requireWiFi=_requireWiFi - In the implementation block
@property (nonatomic,readonly) long long tileSize; 
@property (nonatomic,readonly) long long minimumZoomLevel; 
@property (nonatomic,readonly) long long maximumZoomLevel; 
@property (nonatomic,readonly) BOOL minimumZoomLevelBoundsCamera; 
@property (nonatomic,readonly) BOOL maximumZoomLevelBoundsCamera; 
@property (nonatomic,readonly) DeviceRef device; 
@property (nonatomic,readonly) long long zEquivalenceClass; 
@property (nonatomic,readonly) unsigned minimumDownloadZoomLevel; 
@property (nonatomic,readonly) unsigned maximumDownloadZoomLevel; 
-(void)dealloc;
-(id)init;
-(long long)tileSize;
-(void)setContentScale:(double)arg1 ;
-(double)contentScale;
-(DeviceRef)device;
-(VKStyleManager *)styleManager;
-(void)setStyleManager:(VKStyleManager *)arg1 ;
-(id)detailedDescription;
-(long long)minimumZoomLevel;
-(long long)maximumZoomLevel;
-(VKSharedResources *)sharedResources;
-(id)initWithResourceManifestConfiguration:(id)arg1 locale:(id)arg2 ;
-(void)setSharedResources:(VKSharedResources *)arg1 ;
-(void)setPreloadOnly:(BOOL)arg1 ;
-(void)setRequireWiFi:(BOOL)arg1 ;
-(void)setClient:(id<VKTileSourceClient>)arg1 ;
-(void)clearCaches;
-(BOOL)minimumZoomLevelBoundsCamera;
-(BOOL)maximumZoomLevelBoundsCamera;
-(id)tileForData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)populateVisibleTileSets:(id)arg1 withTiles:(id)arg2 ;
-(id<VKTileSourceClient>)client;
-(BOOL)cancelFetchForKey:(const VKTileKey*)arg1 ;
-(unsigned)minimumDownloadZoomLevel;
-(void)fetchTileForKey:(const VKTileKey*)arg1 ;
-(void)forceDownload;
-(id)tileForKey:(const VKTileKey*)arg1 ;
-(BOOL)canFetchTileForKey:(const VKTileKey*)arg1 ;
-(VKTileKey)sourceKeyForRenderKey:(const VKTileKey*)arg1 ;
-(GEOTileKey)downloadKeyForSourceKey:(const VKTileKey*)arg1 ;
-(unsigned)maximumDownloadZoomLevel;
-(long long)zEquivalenceClass;
-(id)tileLoader;
-(void)tileAvailabilityChanged:(id)arg1 ;
-(GEOTileKey)downloadKeyAtX:(unsigned)arg1 y:(unsigned)arg2 z:(unsigned)arg3 ;
-(void)fetchedTile:(id)arg1 forKey:(const VKTileKey*)arg2 ;
-(VKTileKey)nativeKeyForRenderKey:(const VKTileKey*)arg1 ;
-(id)tileForSourceKey:(const VKTileKey*)arg1 renderKey:(const VKTileKey*)arg2 ;
-(void)failedToDecodeSourceKey:(const VKTileKey*)arg1 ;
-(void)_fetchedTile:(id)arg1 ;
-(void)performDownload:(const GEOTileKey*)arg1 ;
-(void)fetchTileForKey:(const VKTileKey*)arg1 sourceKey:(const VKTileKey*)arg2 ;
-(void)cancelDownload:(const GEOTileKey*)arg1 ;
-(BOOL)cancelFetchForKey:(const VKTileKey*)arg1 sourceKey:(const VKTileKey*)arg2 ;
-(BOOL)mayUseNetwork;
-(void)willGoToNetwork;
-(void)didFinishWithNetwork;
-(void)didFailToLoadTileKey:(const GEOTileKey*)arg1 error:(id)arg2 ;
-(void)didFetchData:(id)arg1 forKey:(const GEOTileKey*)arg2 ;
-(id)_extraInfoForPendingSourceKey:(const VKTileKey*)arg1 ;
-(BOOL)_shouldUseDecodedTile:(id)arg1 extraInfo:(id)arg2 ;
-(void)didLoadTile:(id)arg1 forKey:(const VKTileKey*)arg2 ;
-(VKTileKey)sourceKeyForDownloadKey:(const GEOTileKey*)arg1 ;
-(BOOL)_shouldDecodeTile:(const VKTileKey*)arg1 ;
-(void)decodeData:(id)arg1 downloadKey:(const GEOTileKey*)arg2 sourceKey:(const VKTileKey*)arg3 ;
-(void)_failedToLoadSourceKey:(const VKTileKey*)arg1 downloadKey:(const GEOTileKey*)arg2 error:(id)arg3 ;
-(void)foreachTileInPool:(/*^block*/id)arg1 ;
-(BOOL)preloadOnly;
-(BOOL)requireWiFi;
@end

