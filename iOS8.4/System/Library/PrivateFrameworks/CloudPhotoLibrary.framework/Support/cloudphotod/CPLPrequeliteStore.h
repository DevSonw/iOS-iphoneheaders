/*
* This header is generated by classdump-dyld 0.7
* on Wednesday, July 22, 2015 at 5:21:30 PM Japan Standard Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /System/Library/PrivateFrameworks/CloudPhotoLibrary.framework/Support/cloudphotod
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <CloudPhotoLibrary/CPLPlatformObject.h>
#import <cloudphotod/CPLEngineStoreImplementation.h>

@protocol OS_dispatch_queue;
@class NSDate, NSObject, PQLConnection, NSURL, NSMutableSet, CPLPrequeliteVariable, NSString;

@interface CPLPrequeliteStore : CPLPlatformObject <CPLEngineStoreImplementation> {

	NSObject*<OS_dispatch_queue> _queue;
	PQLConnection* _db;
	NSURL* _dbURL;
	BOOL _configuringDB;
	NSMutableSet* _modifiedVariables;
	CPLPrequeliteVariable* _libraryVersionVar;
	CPLPrequeliteVariable* _userIdentifierVar;
	CPLPrequeliteVariable* _libraryZoneNameVar;
	CPLPrequeliteVariable* _clientCacheIdentifierVar;
	CPLPrequeliteVariable* _clientCacheIdentifierAsKnownByClient;
	CPLPrequeliteVariable* _libraryCreationDateVar;
	NSObject*<OS_dispatch_queue> _isClientInSyncWithClientCacheQueue;
	BOOL _isClientInSyncWithClientCache;
	BOOL _shouldTriggerHardResetAfterUpgrade;
	NSString* _hardResetAfterUpgradeTriggerReason;
	BOOL _shouldTriggerSoftResetAfterUpgrade;
	NSString* _softResetAfterUpgradeTriggerReason;
	BOOL _reentrencyGuard;
	NSDate* _libraryCreationDate;

}

@property (readonly) NSDate * libraryCreationDate;                  //@synthesize libraryCreationDate=_libraryCreationDate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(id)pqlConnection;
-(BOOL)addGlobalVariable:(id)arg1 defaultValue:(id)arg2 error:(id*)arg3 ;
-(BOOL)setValue:(id)arg1 forGlobalVariable:(id)arg2 error:(id*)arg3 ;
-(id)valueForGlobalVariable:(id)arg1 ;
-(BOOL)_openWithError:(id*)arg1 ;
-(BOOL)_upgradeToVersion:(long long)arg1 ;
-(BOOL)_postUpgradeToVersion:(long long)arg1 ;
-(BOOL)_initializeDB;
-(BOOL)_upgradeDB:(long long)arg1 ;
-(BOOL)_setupDBIfNeeded;
-(void)_cacheValue:(id)arg1 forVariable:(id)arg2 ;
-(void)triggerResetAfterUpgradeHard:(BOOL)arg1 withReason:(id)arg2 ;
-(id)userIdentifier;
-(id)status;
-(BOOL)openWithError:(id*)arg1 ;
-(void)writeTransactionDidFail;
-(void)writeTransactionDidSucceed;
-(id)createNewLibraryVersion;
-(BOOL)storeLibraryVersion:(id)arg1 withError:(id*)arg2 ;
-(id)createNewClientCacheIdentifier;
-(BOOL)storeClientCacheIdentifier:(id)arg1 error:(id*)arg2 ;
-(BOOL)storeClientIsNotInSyncWithClientCacheWithError:(id*)arg1 ;
-(BOOL)isClientInSyncWithClientCache;
-(BOOL)storeUserIdentifier:(id)arg1 error:(id*)arg2 ;
-(BOOL)executePostOpenWithError:(id*)arg1 ;
-(void)performBarrierTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)performReadTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 ;
-(void)performWriteTransaction:(id)arg1 withBlock:(/*^block*/id)arg2 completionHandler:(/*^block*/id)arg3 ;
-(BOOL)closeWithError:(id*)arg1 ;
-(id)libraryVersion;
-(id)libraryZoneName;
-(BOOL)storeLibraryZoneName:(id)arg1 error:(id*)arg2 ;
-(id)clientCacheIdentifier;
-(BOOL)storeClientIsInSyncWithClientCacheWithError:(id*)arg1 ;
-(NSDate *)libraryCreationDate;
-(id)initWithAbstractObject:(id)arg1 ;
@end

