/*
* This header is generated by classdump-dyld 0.7
* on Wednesday, July 22, 2015 at 7:09:54 PM Japan Standard Time
* Operating System: Version 8.4 (Build 12H143)
* Image Source: /Applications/MobileSafari.app/MobileSafari
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <MobileSafari/MobileSafari-Structs.h>
#import <MobileSafari/TabDocument.h>
#import <MobileSafari/ReaderControllerDelegate.h>
#import <MobileSafari/WebUIBrowserLoadingControllerDelegate.h>

@class UIWebBrowserView, NSString;

@interface TabDocumentWK1 : TabDocument <ReaderControllerDelegate, WebUIBrowserLoadingControllerDelegate> {

	UIWebBrowserView* _browserView;
	UIWebBrowserView* _readerView;
	int _retainCount;

}

@property (readonly) unsigned hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(int)_navigationTypeFromActionInformation:(id)arg1 ;
+(id)_navigationOriginalURLFromActionInformation:(id)arg1 ;
-(id)readerContext;
-(void)preparePrintInteractionController:(id)arg1 withPageRenderer:(id)arg2 frame:(id)arg3 printFooter:(char)arg4 ;
-(void)clearReaderView;
-(void)updateInternalPreferences;
-(void)didInitReaderJSController:(ReaderJSController*)arg1 ;
-(int)readerOperationMode;
-(char)networkIsReachable;
-(void)didChangeNextPageLoadingState:(char)arg1 ;
-(void)willActivateReader;
-(void)didActivateReader;
-(id)_backForwardList;
-(char)isPDFDocument;
-(id)quickLookDocument;
-(id)readerView;
-(void)setLoading;
-(void)showStoreBannerIfNecessary;
-(void)clearBackForwardList;
-(void)setBackForwardListDictionary:(id)arg1 ;
-(void)restoreBackForwardListFromDictionary;
-(void)copyNavigationSnapshotsFromBackForwardList:(id)arg1 ;
-(id)historyItemForNavigationSnapshotPosition:(int)arg1 ;
-(void)setRenderTreeSizeResetThresholdForPosition:(int)arg1 ;
-(char)didContentSizePassThresholdForSnapshotDelay;
-(void)clearBrowserController;
-(void)setPagePaused:(char)arg1 withEvents:(char)arg2 ;
-(char)isProcessingUserGesture;
-(char)quickLookDocumentIsReady;
-(void)willClose;
-(void)createBrowserReaderViewIfNeeded;
-(char)addReadingListBookmarkWithBlock:(/*^block*/id)arg1 ;
-(char)mustShowBarsForBackForwardListItem:(id)arg1 ;
-(void)performAutoFillAction;
-(void)subscribeToWebFeed;
-(id)readerWebView;
-(id)dataForDisplayedPDF;
-(id)suggestedFilenameForDisplayedPDF;
-(void)requestDesktopSiteWithURL:(id)arg1 ;
-(void)requestDesktopSite;
-(id)standaloneImageData;
-(char)isAlive;
-(void)_updateTextSize;
-(id)_loadingController;
-(void)clearReaderContext;
-(void)_saveBackForwardListToDictionary;
-(void)_prepareWebViewRelease;
-(void)_createDocumentView;
-(void)goToCurrentHistoryItem;
-(void)_restoreTransientReadingListDataToWebHistoryItem:(id)arg1 ;
-(void)_resetSnapshotForHistoryItem:(id)arg1 ;
-(id)browserViewMainDataSource;
-(void)handleFrameLoadError:(id)arg1 forDataSource:(id)arg2 ;
-(char)_clearNavigationSnapshotAtHistoryItem:(id)arg1 ;
-(id)currentHistoryItemOriginalURLString;
-(void)checkForFraudulentWebsitesWithURL:(id)arg1 ;
-(char)handleCertificateError:(id)arg1 forDataSource:(id)arg2 ;
-(void)_progressDidStall;
-(void)_webThreadUpdateProgressCanStall;
-(void)detectReaderAvailabilityWithDelay:(double)arg1 ;
-(id)_webClip;
-(void)_determineWebFeedURLForFrame:(id)arg1 ;
-(void)_decidePolicyForAction:(id)arg1 request:(id)arg2 frame:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5 ;
-(void)handlePolicyError:(id)arg1 forFrame:(id)arg2 ;
-(void)setUpSecurityWarningPageController;
-(void)_injectDoNotTrackDOMPropertyWithValue:(id)arg1 intoWindowObject:(id)arg2 forFrame:(id)arg3 ;
-(void)_initLoadingController;
-(void)hibernate;
-(void)unhibernate;
-(void)suspendForEventsOnly:(char)arg1 ;
-(void)removeNonVisibleTiles;
-(id)backForwardListDictionary;
-(void)setNavigationSnapshot:(id)arg1 forPosition:(int)arg2 ;
-(id)navigationSnapshotForPosition:(int)arg1 ;
-(void)_updateTilingArea;
-(unsigned)_renderTreeSizeThresholdForReset;
-(void)_setRenderTreeSizeThresholdForReset:(unsigned)arg1 ;
-(void)_forceStopLoading;
-(char)pluginsAreRunning;
-(void)destroyAllPlugIns;
-(void)clearBackForwardCache;
-(void)clearBackForwardListKeepingCurrentItem;
-(char)clearLowPriorityNavigationSnapshots;
-(char)clearNavigationSnapshots;
-(id)_backListWithLimit:(unsigned)arg1 ;
-(id)_forwardListWithLimit:(unsigned)arg1 ;
-(SecTrustRef)_serverTrust;
-(id)_quickLookDocumentForPreview;
-(void)saveWebArchiveToPath:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_updateDisplayingStandaloneImage;
-(void)_updateInitialZoomScaleForPPT;
-(void)_loadStartedDuringSimulatedClickForURL:(id)arg1 ;
-(char)_shouldAskAboutInsecureFormSubmissionForAction:(id)arg1 andURL:(id)arg2 ;
-(char)isImportantDocument;
-(void)didDetermineReaderAvailability:(char)arg1 ;
-(id)readerWebViewOrUIWebBrowserView;
-(void)hideSecurityWarningPage;
-(void)commitProvisionalSecurityInfo;
-(void)urlPassedSafeBrowsingCheck:(id)arg1 canCache:(char)arg2 ;
-(void)_showErrorPageWithTitle:(id)arg1 bodyText:(id)arg2 forError:(id)arg3 ;
-(void)_fraudulentWebsiteCheckCompletedForURL:(id)arg1 withAssessment:(int)arg2 fromProvider:(int)arg3 ;
-(void)setUpSecurityWarningPage;
-(void)updateSecurityWarningPageWithSecurityInfo:(id)arg1 ;
-(void)_continueLoadingSite;
-(void)_warnAboutUnsafeSiteWithSecurityInfo:(id)arg1 ;
-(void)securityWarningPageLoaded;
-(void)securityWarningPageIgnoreWarningButtonPressed;
-(void)securityWarningPageBackButtonPressed;
-(void)securityWarningPageClosePageButtonPressed;
-(void)collectReadingListItemInfo;
-(void)_cancelReaderAvailabilityDetectionTimer;
-(id)tabDocumentReaderWebPreferences;
-(void)_detectReaderAvailabilityNow;
-(void)_detectReaderAvailabilityOnWebThread;
-(void)download:(id)arg1 didFailWithError:(id)arg2 ;
-(void)downloadDidBegin:(id)arg1 ;
-(void)download:(id)arg1 didReceiveResponse:(id)arg2 ;
-(void)download:(id)arg1 didReceiveDataOfLength:(unsigned)arg2 ;
-(void)download:(id)arg1 decideDestinationWithSuggestedFilename:(id)arg2 ;
-(void)downloadDidFinish:(id)arg1 ;
-(id)webThreadWebView:(id)arg1 identifierForInitialRequest:(id)arg2 fromDataSource:(id)arg3 ;
-(void)webThreadWebView:(id)arg1 resource:(id)arg2 didFinishLoadingFromDataSource:(id)arg3 ;
-(void)webThreadWebView:(id)arg1 resource:(id)arg2 didFailLoadingWithError:(id)arg3 fromDataSource:(id)arg4 ;
-(id)retain;
-(void)dealloc;
-(unsigned)retainCount;
-(char)_tryRetain;
-(char)_isDeallocating;
-(id)webView;
-(void)setCustomUserAgent:(id)arg1 ;
-(void)webView:(id)arg1 decidePolicyForNavigationAction:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5 ;
-(void)resume;
-(void)webThreadWebViewDidLayout:(id)arg1 ;
-(unsigned)_renderTreeSize;
-(void)saveStateToHistoryItem:(id)arg1 forWebView:(id)arg2 ;
-(void)restoreStateFromHistoryItem:(id)arg1 forWebView:(id)arg2 ;
-(void)webView:(id)arg1 didFinishLoadForFrame:(id)arg2 ;
-(void)webView:(id)arg1 didFirstVisuallyNonEmptyLayoutInFrame:(id)arg2 ;
-(void)webView:(id)arg1 didFailLoadWithError:(id)arg2 forFrame:(id)arg3 ;
-(void)webView:(id)arg1 didChangeLocationWithinPageForFrame:(id)arg2 ;
-(void)webView:(id)arg1 didCommitLoadForFrame:(id)arg2 ;
-(id)pdfView;
-(void)updateViewHierarchyForFirstNonEmptyLayoutInFrame:(id)arg1 ;
-(void)updateViewHierarchyForDocumentViewNewLoad:(id)arg1 ;
-(void)updateViewHierarchyForDocumentViewLoadComplete:(id)arg1 ;
-(void)webView:(id)arg1 decidePolicyForMIMEType:(id)arg2 request:(id)arg3 frame:(id)arg4 decisionListener:(id)arg5 ;
-(id)customUserAgent;
-(void)stopLoading;
-(void)webView:(id)arg1 decidePolicyForNewWindowAction:(id)arg2 request:(id)arg3 newFrameName:(id)arg4 decisionListener:(id)arg5 ;
-(void)webView:(id)arg1 unableToImplementPolicyWithError:(id)arg2 frame:(id)arg3 ;
-(void)webView:(id)arg1 didStartProvisionalLoadForFrame:(id)arg2 ;
-(id)webThreadWebView:(id)arg1 resource:(id)arg2 willSendRequest:(id)arg3 redirectResponse:(id)arg4 fromDataSource:(id)arg5 ;
-(void)webView:(id)arg1 didClearWindowObject:(id)arg2 forFrame:(id)arg3 ;
-(void)webView:(id)arg1 didReceiveServerRedirectForProvisionalLoadForFrame:(id)arg2 ;
-(void)webView:(id)arg1 didFailProvisionalLoadWithError:(id)arg2 forFrame:(id)arg3 ;
-(void)webView:(id)arg1 resource:(id)arg2 didReceiveAuthenticationChallenge:(id)arg3 fromDataSource:(id)arg4 ;
-(void)webView:(id)arg1 resource:(id)arg2 didCancelAuthenticationChallenge:(id)arg3 fromDataSource:(id)arg4 ;
-(char)webView:(id)arg1 resource:(id)arg2 canAuthenticateAgainstProtectionSpace:(id)arg3 forDataSource:(id)arg4 ;
-(void)loadUserTypedAddress:(id)arg1 ;
-(id)URLString;
-(void)browserLoadingControllerDidUpdateURL:(id)arg1 ;
-(void)browserLoadingControllerDidUpdateURLString:(id)arg1 ;
-(void)browserLoadingControllerDidUpdateTitle:(id)arg1 ;
-(void)browserLoadingControllerDidUpdateBackForward:(id)arg1 ;
-(void)browserLoadingControllerDidUpdateSecurity:(id)arg1 ;
-(void)browserLoadingControllerDidUpdateEstimatedProgress:(id)arg1 ;
-(void)browserLoadingController:(id)arg1 willLoadRequest:(id)arg2 userDriven:(char)arg3 ;
-(void)browserLoadingController:(id)arg1 failedToStartLoadingRequest:(id)arg2 error:(id)arg3 ;
-(char)browserLoadingControllerShouldShowProvisionalURLs:(id)arg1 ;
-(void)browserLoadingControllerWillStartUserDrivenLoad:(id)arg1 ;
-(void)browserLoadingControllerDidStartLoading:(id)arg1 ;
-(void)browserLoadingController:(id)arg1 didFinishLoadingWithError:(id)arg2 dataSource:(id)arg3 ;
-(void)browserLoadingControllerDidUpdateLoadingState:(id)arg1 ;
-(id)browserLoadingController:(id)arg1 userVisibleStringForURL:(id)arg2 ;
-(char)browserLoadingControllerShouldEvaluateUserEnteredJavaScript:(id)arg1 ;
-(void)webView:(id)arg1 didHandleOnloadEventsForFrame:(id)arg2 ;
-(void)webThreadWebView:(id)arg1 didLayout:(unsigned)arg2 ;
-(void)goToBackForwardListItem:(id)arg1 ;
-(void)_setAllowsSpecificHTTPSCertificate:(id)arg1 forHost:(id)arg2 ;
-(void)loadAlternateHTMLString:(id)arg1 baseURL:(id)arg2 forUnreachableURL:(id)arg3 ;
-(oneway void)release;
-(void)_ignorePolicyListener:(id)arg1 ;
-(char)webView:(id)arg1 shouldChangeSelectedDOMRange:(id)arg2 toDOMRange:(id)arg3 affinity:(int)arg4 stillSelecting:(char)arg5 ;
-(char)webView:(id)arg1 shouldGoToHistoryItem:(id)arg2 ;
-(void)setAllowsRemoteInspection:(char)arg1 ;
-(id)browserView;
-(void)_progressChanged:(id)arg1 ;
-(void)didDrawTiles;
-(void)loadWebClip:(id)arg1 userDriven:(char)arg2 ;
-(void)beginSimulatedClickForURL:(id)arg1 ;
-(void)finishSimulatedClick;
-(char)isSimulatingClick;
-(id)expectedOrCurrentURL;
-(char)hasFailedURL;
@end

