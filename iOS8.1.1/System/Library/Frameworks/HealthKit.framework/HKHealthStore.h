/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:28:22 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/Frameworks/HealthKit.framework/HealthKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <HealthKit/HKClientInterface.h>
#import <HealthKit/HKQueryDelegate.h>

@protocol OS_dispatch_queue, _HKAuthorizationPresentationController;
@class NSXPCConnection, _HKHealthStoreProxy, NSObject, NSMutableSet, NSMutableDictionary, NSSet, NSString;

@interface HKHealthStore : NSObject <HKClientInterface, HKQueryDelegate> {

	NSXPCConnection* _connection;
	_HKHealthStoreProxy* _connectionProxy;
	NSObject*<OS_dispatch_queue> _clientQueue;
	NSObject*<OS_dispatch_queue> _queryQueue;
	NSMutableSet* _queries;
	NSMutableDictionary* _discoveries;
	NSMutableSet* _discoveriesEnded;
	NSMutableDictionary* _sessions;
	NSMutableSet* _sessionsEnded;
	id<_HKAuthorizationPresentationController> _authorizationPresentationController;
	/*^block*/id _authorizationDelegateTransactionErrorHandler;
	/*^block*/id _bluetoothStatusHandler;

}

@property (getter=_queries,nonatomic,readonly) NSSet * queries;              //@synthesize queries=_queries - In the implementation block
@property (nonatomic,copy) id bluetoothStatusHandler;                        //@synthesize bluetoothStatusHandler=_bluetoothStatusHandler - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(BOOL)isHealthDataAvailable;
-(void)deleteMedicalIDData;
-(void)fetchMedicalIDDataWithCompletion:(/*^block*/id)arg1 ;
-(id)initWithListenerEndpoint:(id)arg1 ;
-(void)_handleInterruption;
-(id)_serverProxyForSelector:(SEL)arg1 sanitizedErrorHandler:(/*^block*/id)arg2 ;
-(void)hasSourceWithBundleIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)allSourcesWithCompletion:(/*^block*/id)arg1 ;
-(void)orderedSourcesForObjectType:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setOrderedSources:(id)arg1 forObjectType:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)deleteAllSamplesWithTypes:(id)arg1 sourceBundleIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)deleteSourceWithBundleIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)requestAuthorizationToShareTypes:(id)arg1 readTypes:(id)arg2 shouldPrompt:(BOOL)arg3 completion:(/*^block*/id)arg4 ;
-(void)_throwIfAuthorizationDisallowedForSharing:(BOOL)arg1 types:(id)arg2 ;
-(void)allAuthorizationRecordsForBundleIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)allAuthorizationRecordsForType:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)setAuthorizationStatuses:(id)arg1 forBundleIdentifier:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)setRequestedAuthorizationForBundleIdentifier:(id)arg1 shareTypes:(id)arg2 readTypes:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)resetAuthorizationStatusForBundleIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_clientQueue_invokeAuthorizationDelegateTransactionErrorHandlerWithError:(id)arg1 ;
-(void)endAuthorizationDelegateTransactionWithError:(id)arg1 ;
-(void)saveObjects:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)_deleteObjects:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)_fetchCharacteristicForDataTypeSynchronous:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(BOOL)_setCharacteristic:(id)arg1 forDataType:(id)arg2 error:(id*)arg3 ;
-(void)addSamples:(id)arg1 toWorkout:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)_setBackgroundDeliveryFrequencyDataType:(id)arg1 frequency:(long long)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)removeDefaultForKey:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)endBluetoothStatusUpdates;
-(void)_startHealthServiceExtendedDiscovery:(id)arg1 withHandler:(/*^block*/id)arg2 ;
-(void)_addEndedDiscovery:(id)arg1 ;
-(void)endHealthServiceDiscovery:(id)arg1 ;
-(void)_addEndedSession:(id)arg1 ;
-(void)endHealthServiceSession:(id)arg1 ;
-(void)healthServicePairingsWithHandler:(/*^block*/id)arg1 ;
-(void)getHealthServiceProperty:(id)arg1 forSession:(id)arg2 withHandler:(/*^block*/id)arg3 ;
-(void)performHealthServiceOperation:(id)arg1 onSession:(id)arg2 withParameters:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)deliverDiscoveryHealthService:(id)arg1 toClient:(unsigned long long)arg2 finished:(BOOL)arg3 withError:(id)arg4 ;
-(void)deliverSessionHealthServiceStatus:(long long)arg1 toClient:(unsigned long long)arg2 finished:(BOOL)arg3 withError:(id)arg4 ;
-(id)_remoteObjectProxyWithActionCompletion:(/*^block*/id)arg1 ;
-(void)performMigrationWithCompletion:(/*^block*/id)arg1 ;
-(void)startFakingDataWithActivity:(long long)arg1 speed:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)stopFakingDataWithCompletion:(/*^block*/id)arg1 ;
-(void)startReplayingDataFromFile:(id)arg1 repeat:(BOOL)arg2 completion:(/*^block*/id)arg3 ;
-(void)stopReplayingDataWithCompletion:(/*^block*/id)arg1 ;
-(void)startRecordingDataToFile:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)stopRecordingDataWithCompletion:(/*^block*/id)arg1 ;
-(void)fetchMedicalIDDataCreateIfNecessary:(BOOL)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)updateMedicalIDData:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)deleteMedicalIDDataWithCompletion:(/*^block*/id)arg1 ;
-(void)setDataCollectionOptionForType:(id)arg1 key:(id)arg2 value:(id)arg3 completion:(/*^block*/id)arg4 ;
-(void)presentAuthorizationWithSessionIdentifier:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)deliverBluetoothStatus:(long long)arg1 withError:(id)arg2 ;
-(void)deliverSessionTransitoryData:(id)arg1 toClient:(unsigned long long)arg2 withError:(id)arg3 ;
-(void)deliverSessionCharacteristics:(id)arg1 forService:(id)arg2 toClient:(unsigned long long)arg3 withError:(id)arg4 ;
-(void)queryDidFinishExecuting:(id)arg1 ;
-(long long)authorizationStatusForType:(id)arg1 ;
-(void)requestAuthorizationToShareTypes:(id)arg1 readTypes:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)beginAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 sourceHandler:(/*^block*/id)arg2 errorHandler:(/*^block*/id)arg3 ;
-(void)saveObject:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)deleteObject:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)stopQuery:(id)arg1 ;
-(id)dateOfBirthWithError:(id*)arg1 ;
-(BOOL)_setDateOfBirth:(id)arg1 error:(id*)arg2 ;
-(id)biologicalSexWithError:(id*)arg1 ;
-(BOOL)_setBiologicalSex:(long long)arg1 error:(id*)arg2 ;
-(id)bloodTypeWithError:(id*)arg1 ;
-(BOOL)_setBloodType:(long long)arg1 error:(id*)arg2 ;
-(void)enableBackgroundDeliveryForType:(id)arg1 frequency:(long long)arg2 withCompletion:(/*^block*/id)arg3 ;
-(void)disableBackgroundDeliveryForType:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)disableAllBackgroundDeliveryWithCompletion:(/*^block*/id)arg1 ;
-(void)_closeTransactionWithType:(id)arg1 anchor:(id)arg2 ackTime:(id)arg3 ;
-(void)setDefaultValue:(id)arg1 forKey:(id)arg2 completion:(/*^block*/id)arg3 ;
-(void)getDefaultValueForKey:(id)arg1 withHandler:(/*^block*/id)arg2 ;
-(void)startBluetoothStatusUpdates:(/*^block*/id)arg1 ;
-(void)startHealthServiceDiscovery:(id)arg1 withHandler:(/*^block*/id)arg2 ;
-(void)startAllHealthServicesDiscoveryWithHandler:(/*^block*/id)arg1 ;
-(id)activeHealthServiceDiscoveries;
-(void)startHealthServiceSession:(id)arg1 withHandler:(/*^block*/id)arg2 ;
-(id)activeHealthServiceSessions;
-(void)previousHealthServicePairingsWithHandler:(/*^block*/id)arg1 ;
-(void)addHealthServicePairing:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)removeHealthServicePairing:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)registerPeripheralIdentifier:(id)arg1 name:(id)arg2 services:(id)arg3 withCompletion:(/*^block*/id)arg4 ;
-(void)unregisterPeripheralIdentifier:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(void)getDatabaseUsageInBytesWithCompletion:(/*^block*/id)arg1 ;
-(void)diagnosticsForKey:(id)arg1 completion:(/*^block*/id)arg2 ;
-(void)updateMedicalIDData:(id)arg1 ;
-(id)_queries;
-(id)bluetoothStatusHandler;
-(void)setBluetoothStatusHandler:(id)arg1 ;
-(void)dealloc;
-(id)init;
-(void)executeQuery:(id)arg1 ;
@end

