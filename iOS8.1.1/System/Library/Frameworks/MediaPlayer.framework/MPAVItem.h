/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:28:31 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/Frameworks/MediaPlayer.framework/MediaPlayer
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@protocol OS_dispatch_queue;
#import <MediaPlayer/MediaPlayer-Structs.h>
@class AVAsset, NSObject, AVPlayerItem, MPQueueFeeder, MPAVController, NSArray, MPAlternateTracks, NSString, MPMediaItem, AVPlayerItemAccessLog, NSURL, MPAlternateTextTrack;

@interface MPAVItem : NSObject {

	AVAsset* _asset;
	NSObject*<OS_dispatch_queue> _assetQueue;
	AVPlayerItem* _avPlayerItem;
	BOOL _isAssetLoaded;
	MPQueueFeeder* _feeder;
	MPAVController* _player;
	float _soundCheckVolumeNormalization;
	NSArray* _chapterTimeMarkers;
	NSArray* _artworkTimeMarkers;
	NSArray* _urlTimeMarkers;
	NSArray* _closedCaptionTimeMarkers;
	MPAlternateTracks* _alternateTracks;
	double _cachedDuration;
	double _cachedPlayableDuration;
	NSArray* _cachedSeekableTimeRanges;
	double _seekableTimeRangesCacheTime;
	unsigned long long _type;
	float _defaultPlaybackRate;
	unsigned long long _indexInQueueFeeder;
	unsigned _advancedDuringPlayback : 1;
	unsigned _handledFinishTime : 1;
	unsigned _hasPlayedThisSession : 1;
	unsigned _wasCountedAsSkipped : 1;
	unsigned _isStreamable : 2;
	unsigned _watchingAttributes : 1;
	unsigned _lyricsAvailable : 1;
	unsigned _timeMarkersNeedLoading : 1;
	BOOL _hasPostedNaturalSizeChange;
	BOOL _limitReadAhead;
	BOOL _didAttemptToLoadAsset;
	float _loudnessInfoVolumeNormalization;
	long long _albumStoreID;
	NSArray* _buyOffers;
	NSString* _copyrightText;
	long long _storeID;
	MPMediaItem* _mediaItem;

}

@property (nonatomic,readonly) BOOL isStreamingQuality; 
@property (nonatomic,readonly) AVAsset * asset; 
@property (nonatomic,readonly) AVPlayerItem * playerItem; 
@property (nonatomic,readonly) BOOL didAttemptToLoadAsset;                                   //@synthesize didAttemptToLoadAsset=_didAttemptToLoadAsset - In the implementation block
@property (assign) BOOL isAssetLoaded;                                                       //@synthesize isAssetLoaded=_isAssetLoaded - In the implementation block
@property (nonatomic,readonly) long long status; 
@property (nonatomic,readonly) BOOL isAlwaysLive; 
@property (assign,nonatomic) double playbackCheckpointCurrentTime; 
@property (assign,nonatomic) BOOL userAdvancedDuringPlayback; 
@property (assign,nonatomic,__weak) MPQueueFeeder * feeder;                                  //@synthesize feeder=_feeder - In the implementation block
@property (assign,nonatomic) unsigned long long indexInQueueFeeder;                          //@synthesize indexInQueueFeeder=_indexInQueueFeeder - In the implementation block
@property (assign,nonatomic,__weak) MPAVController * player;                                 //@synthesize player=_player - In the implementation block
@property (assign,nonatomic) BOOL hasPlayedThisSession; 
@property (nonatomic,readonly) AVPlayerItemAccessLog * accessLog; 
@property (nonatomic,readonly) unsigned long long countForQueueFeeder; 
@property (nonatomic,readonly) double currentTimeDisplayOverride; 
@property (assign,nonatomic) float defaultPlaybackRate;                                      //@synthesize defaultPlaybackRate=_defaultPlaybackRate - In the implementation block
@property (nonatomic,retain) NSArray * chapterTimeMarkers;                                   //@synthesize chapterTimeMarkers=_chapterTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * artworkTimeMarkers;                                   //@synthesize artworkTimeMarkers=_artworkTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * urlTimeMarkers;                                       //@synthesize urlTimeMarkers=_urlTimeMarkers - In the implementation block
@property (nonatomic,retain) NSArray * closedCaptionTimeMarkers; 
@property (nonatomic,readonly) BOOL useEmbeddedChapterData; 
@property (nonatomic,readonly) unsigned long long type; 
@property (nonatomic,readonly) long long customAVEQPreset; 
@property (nonatomic,readonly) BOOL allowsEQ; 
@property (nonatomic,readonly) MPAlternateTracks * alternateTracks;                          //@synthesize alternateTracks=_alternateTracks - In the implementation block
@property (nonatomic,readonly) NSString * displayableText; 
@property (nonatomic,readonly) BOOL displayableTextLoaded; 
@property (nonatomic,readonly) BOOL hasDisplayableText; 
@property (nonatomic,readonly) NSString * album; 
@property (nonatomic,readonly) long long albumStoreID;                                       //@synthesize albumStoreID=_albumStoreID - In the implementation block
@property (nonatomic,readonly) NSString * artist; 
@property (nonatomic,readonly) NSString * albumArtist; 
@property (nonatomic,readonly) unsigned long long albumTrackNumber; 
@property (nonatomic,readonly) unsigned long long albumTrackCount; 
@property (nonatomic,copy,readonly) NSArray * buyOffers;                                     //@synthesize buyOffers=_buyOffers - In the implementation block
@property (nonatomic,readonly) BOOL canSeedGenius; 
@property (nonatomic,readonly) NSString * composer; 
@property (nonatomic,copy,readonly) NSString * copyrightText;                                //@synthesize copyrightText=_copyrightText - In the implementation block
@property (nonatomic,readonly) unsigned long long discNumber; 
@property (nonatomic,readonly) unsigned long long discCount; 
@property (getter=isExplicitTrack,nonatomic,readonly) BOOL explicitTrack; 
@property (nonatomic,readonly) NSString * genre; 
@property (nonatomic,readonly) BOOL isCloudItem; 
@property (nonatomic,readonly) NSString * lyrics; 
@property (nonatomic,readonly) NSString * mainTitle; 
@property (nonatomic,readonly) NSURL * podcastURL; 
@property (getter=isStreamable,nonatomic,readonly) BOOL streamable; 
@property (nonatomic,readonly) unsigned long long persistentID; 
@property (nonatomic,readonly) long long storeID;                                            //@synthesize storeID=_storeID - In the implementation block
@property (nonatomic,readonly) float userRating; 
@property (nonatomic,readonly) BOOL supportsRewindAndFastForward15Seconds; 
@property (nonatomic,readonly) BOOL supportsSettingCurrentTime; 
@property (nonatomic,readonly) BOOL durationIsValid; 
@property (nonatomic,readonly) double durationIfAvailable; 
@property (nonatomic,readonly) double durationFromExternalMetadata; 
@property (nonatomic,readonly) double playableDuration; 
@property (nonatomic,readonly) double playableDurationIfAvailable; 
@property (nonatomic,readonly) double timeOfSeekableStart; 
@property (nonatomic,readonly) double timeOfSeekableEnd; 
@property (nonatomic,readonly) CGSize naturalSize; 
@property (nonatomic,readonly) NSArray * timedMetadataIfAvailable; 
@property (nonatomic,copy) NSString * videoID; 
@property (nonatomic,retain,readonly) MPMediaItem * mediaItem;                               //@synthesize mediaItem=_mediaItem - In the implementation block
@property (assign,nonatomic) float loudnessInfoVolumeNormalization;                          //@synthesize loudnessInfoVolumeNormalization=_loudnessInfoVolumeNormalization - In the implementation block
@property (assign,nonatomic) float soundCheckVolumeNormalization;                            //@synthesize soundCheckVolumeNormalization=_soundCheckVolumeNormalization - In the implementation block
@property (nonatomic,readonly) BOOL supportsSkip; 
@property (nonatomic,readonly) NSString * localizedPositionInPlaylistString; 
@property (nonatomic,readonly) BOOL isAd; 
@property (nonatomic,readonly) SCD_Struct_MP8 duration; 
@property (assign,nonatomic) SCD_Struct_MP8 forwardPlaybackEndTime; 
@property (nonatomic,readonly) CGSize presentationSize; 
@property (nonatomic,retain) MPAlternateTextTrack * selectedAlternateTextTrack; 
+(id)URLFromPath:(id)arg1 ;
+(unsigned long long)defaultScaleMode;
+(void)setDefaultScaleMode:(unsigned long long)arg1 ;
+(void)applyVolumeNormalizationForQueuedItems:(id)arg1 ;
-(void)MPSPWD_prioritizeDownloadSession;
-(BOOL)isStreamingQuality;
-(id)artworkCatalogForPlaybackTime:(double)arg1 ;
-(void)setPlayerItem:(AVPlayerItem *)arg1 ;
-(double)playableDuration;
-(id)initWithPlayerItem:(id)arg1 ;
-(AVPlayerItem *)playerItem;
-(void)setDefaultPlaybackRate:(float)arg1 ;
-(unsigned long long)indexInQueueFeeder;
-(MPQueueFeeder *)feeder;
-(double)timeOfSeekableEnd;
-(double)timeOfSeekableStart;
-(MPAlternateTracks *)alternateTracks;
-(BOOL)limitReadAhead;
-(void)setLimitReadAhead:(BOOL)arg1 ;
-(void)setVideoID:(NSString *)arg1 ;
-(long long)storeID;
-(BOOL)isAssetLoaded;
-(void)setAlternateAudioTrackID:(int)arg1 ;
-(MPAlternateTextTrack *)selectedAlternateTextTrack;
-(void)setSelectedAlternateTextTrack:(MPAlternateTextTrack *)arg1 ;
-(void)setOverrideDuration:(double)arg1 ;
-(NSString *)videoID;
-(void)_loadAssetProperties;
-(void)_releaseAllTimeMarkers;
-(void)loadAssetAndPlayerItem;
-(void)setIsAssetLoaded:(BOOL)arg1 ;
-(void)_updateSoundCheckVolumeNormalizationForPlayerItem;
-(void)_loadAssetAndPlayerItem;
-(void)_playerItemNewAccessLogEntryNotification:(id)arg1 ;
-(void)_checkAllowsBlockingDurationCall;
-(double)_durationInSeconds;
-(NSString *)displayableText;
-(float)defaultPlaybackRate;
-(SCD_Struct_MP8)forwardPlaybackEndTime;
-(void)setForwardPlaybackEndTime:(SCD_Struct_MP8)arg1 ;
-(BOOL)useEmbeddedChapterData;
-(void)setChapterTimeMarkers:(NSArray *)arg1 ;
-(void)setArtworkTimeMarkers:(NSArray *)arg1 ;
-(void)setUrlTimeMarkers:(NSArray *)arg1 ;
-(void)_loadTimeMarkersBlocking;
-(void)_loadTimeMarkersAsync;
-(NSArray *)chapterTimeMarkers;
-(id)_timeMarkerFromMarkers:(id)arg1 forTime:(double)arg2 ;
-(NSArray *)artworkTimeMarkers;
-(NSArray *)urlTimeMarkers;
-(NSArray *)closedCaptionTimeMarkers;
-(unsigned long long)countForQueueFeeder;
-(double)durationFromExternalMetadata;
-(id)_seekableTimeRanges;
-(double)_durationFromExternalMetadataIfAvailable;
-(double)_playableDurationForLoadedTimeRanges:(id)arg1 ;
-(BOOL)hasDisplayableText;
-(void)setSoundCheckVolumeNormalization:(float)arg1 ;
-(long long)customAVEQPreset;
-(BOOL)allowsEQ;
-(void)_itemAttributeAvailableKey:(id)arg1 ;
-(id)_imageChapterTrackIDsForAsset:(id)arg1 ;
-(BOOL)isSupportedDefaultPlaybackSpeed:(unsigned long long)arg1 ;
-(void)flushNowPlayingCaches;
-(void)resetBookkeeping;
-(void)setPlaybackStoppedTime:(double)arg1 ;
-(void)notePlaybackFinishedByHittingEnd;
-(double)playbackCheckpointCurrentTime;
-(void)setPlaybackCheckpointCurrentTime:(double)arg1 ;
-(void)setPlaybackFinishedTime:(double)arg1 ;
-(void)setRating:(float)arg1 ;
-(int)subtitleTrackID;
-(void)setSubtitleTrackID:(int)arg1 ;
-(void)setUserAdvancedDuringPlayback:(BOOL)arg1 ;
-(void)setUserSkippedPlayback:(BOOL)arg1 ;
-(BOOL)userAdvancedDuringPlayback;
-(BOOL)userSkippedPlayback;
-(double)durationInSeconds;
-(NSString *)albumArtist;
-(unsigned long long)albumTrackNumber;
-(unsigned long long)albumTrackCount;
-(BOOL)canSeedGenius;
-(unsigned long long)discCount;
-(BOOL)isCloudItem;
-(BOOL)isValidPlayerSubstituteForItem:(id)arg1 ;
-(BOOL)isPlaceholderForItem:(id)arg1 ;
-(BOOL)isAssetURLValid;
-(BOOL)isExplicitTrack;
-(double)currentTimeDisplayOverride;
-(BOOL)displayableTextLoaded;
-(BOOL)hasAlternatesForTypes:(unsigned long long)arg1 ;
-(unsigned long long)alternatesCountForTypes:(unsigned long long)arg1 ;
-(BOOL)hasDataForItemArtwork;
-(BOOL)hasPlayedThisSession;
-(id)inBandAlternateTextTracks;
-(BOOL)isAd;
-(BOOL)isAlwaysLive;
-(BOOL)isStreamable;
-(NSString *)mainTitle;
-(NSURL *)podcastURL;
-(float)playbackRateForLevel:(unsigned long long)arg1 direction:(long long)arg2 paused:(BOOL)arg3 ;
-(void)replaceOutOfBandAlternateTextTracksWithArray:(id)arg1 ;
-(float)scanIntervalForLevel:(unsigned long long)arg1 paused:(BOOL)arg2 ;
-(void)setHasPlayedThisSession:(BOOL)arg1 ;
-(BOOL)supportsRewindAndFastForward15Seconds;
-(BOOL)supportsSkip;
-(BOOL)supportsSettingCurrentTime;
-(void)_realoadEmbeddedTimeMarkers;
-(NSArray *)timedMetadataIfAvailable;
-(id)titlesForTime:(double)arg1 ;
-(void)setClosedCaptionTimeMarkers:(NSArray *)arg1 ;
-(id)chapterTimeMarkerForTime:(double)arg1 ;
-(id)artworkTimeMarkerForTime:(double)arg1 ;
-(id)urlTimeMarkerForTime:(double)arg1 ;
-(id)closedCaptionTimeMarkerForTime:(double)arg1 ;
-(id)localizedAttributedPositionInPlaylistStringWithRegularTextAttributes:(id)arg1 emphasizedTextAttributes:(id)arg2 ;
-(NSString *)localizedPositionInPlaylistString;
-(BOOL)durationIsValid;
-(double)durationIfAvailable;
-(double)playableDurationIfAvailable;
-(void)_captionAppearanceSettingsChanged;
-(/*^block*/id)blockForDirectAVControllerNotificationReferencingItem:(id)arg1 ;
-(void)_clearAsset;
-(id)aggregateDictionaryItemIdentifier;
-(void)setupEQPresetWithDefaultPreset:(long long)arg1 ;
-(void)setupPlaybackInfo;
-(id)localeForAssetTrack:(id)arg1 ;
-(void)reevaluateType;
-(void)replacePlayerItemWithPlayerItem:(id)arg1 ;
-(void)setFeeder:(MPQueueFeeder *)arg1 ;
-(void)setIndexInQueueFeeder:(unsigned long long)arg1 ;
-(float)soundCheckVolumeNormalization;
-(BOOL)didAttemptToLoadAsset;
-(long long)albumStoreID;
-(NSArray *)buyOffers;
-(NSString *)copyrightText;
-(MPMediaItem *)mediaItem;
-(float)loudnessInfoVolumeNormalization;
-(void)setLoudnessInfoVolumeNormalization:(float)arg1 ;
-(void)dealloc;
-(id)init;
-(SCD_Struct_MP8)duration;
-(id)url;
-(unsigned long long)type;
-(id)path;
-(id)initWithURL:(id)arg1 ;
-(void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4 ;
-(id)initWithAsset:(id)arg1 ;
-(AVAsset *)asset;
-(void)_applicationDidBecomeActive:(id)arg1 ;
-(CGSize)naturalSize;
-(long long)status;
-(CGSize)presentationSize;
-(NSString *)artist;
-(NSString *)composer;
-(NSString *)genre;
-(unsigned long long)discNumber;
-(float)userRating;
-(NSString *)lyrics;
-(unsigned long long)persistentID;
-(NSString *)album;
-(void)setPlayer:(MPAVController *)arg1 ;
-(id)initWithURL:(id)arg1 options:(id)arg2 ;
-(AVPlayerItemAccessLog *)accessLog;
-(MPAVController *)player;
@end

