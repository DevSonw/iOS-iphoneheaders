/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:34:37 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/VectorKit.framework/VectorKit
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


@class NSString, GEOVectorTile;

typedef struct shared_ptr<ggl::Device> {
	Device __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Device>;

typedef struct _compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > {
	AlphaAtlas __first_;
} compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> >;

typedef struct unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> > {
	compressed_pair<ggl::AlphaAtlas *, std::__1::default_delete<ggl::AlphaAtlas> > __ptr_;
} unique_ptr<ggl::AlphaAtlas, std::__1::default_delete<ggl::AlphaAtlas> >;

typedef struct _compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > {
	IsoAlphaAtlas __first_;
} compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> >;

typedef struct unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> > {
	compressed_pair<ggl::IsoAlphaAtlas *, std::__1::default_delete<ggl::IsoAlphaAtlas> > __ptr_;
} unique_ptr<ggl::IsoAlphaAtlas, std::__1::default_delete<ggl::IsoAlphaAtlas> >;

typedef struct VKPoint {
	double x;
	double y;
	double z;
} VKPoint;

typedef struct {
	double v[4][4];
} SCD_Struct_VK6;

typedef struct {
	BOOL orthographic;
	double width;
	double height;
	double near;
	double far;
} SCD_Struct_VK7;

typedef struct Matrix<double, 3, 1> {
	double _e[3];
} Matrix<double, 3, 1>;

typedef struct Matrix<double, 4, 4> {
	double _e[16];
} Matrix<double, 4, 4>;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
} SCD_Struct_VK10;

typedef struct {
	double x0;
	double x1;
	double y0;
	double y1;
} SCD_Struct_VK11;

typedef struct VKFootprintConvexHull_struct {
	int edgeCount;
	VKPoint edgeOrigin[6];
	Matrix<double, 3, 1> edgeNormal[6];
} VKFootprintConvexHull_struct;

typedef struct VKTileKey {
	unsigned z;
	int x;
	int y;
	unsigned pointSize;
} VKTileKey;

typedef struct VKCameraState {
	VKPoint position;
	SCD_Struct_VK6 orientation;
	float aspectRatio;
	float verticalFieldOfView;
} VKCameraState;

typedef struct {
	float m00;
	float m01;
	float m02;
	float m03;
	float m10;
	float m11;
	float m12;
	float m13;
	float m20;
	float m21;
	float m22;
	float m23;
	float m30;
	float m31;
	float m32;
	float m33;
} SCD_Struct_VK15;

typedef union {
	SCD_Struct_VK15 field1;
	float m[16];
} SCD_Union_VK16;

typedef struct Matrix<float, 4, 4> {
	float _e[16];
} Matrix<float, 4, 4>;

typedef struct shared_ptr<ggl::Tile::ViewUniformData> {
	ViewUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Tile::ViewUniformData>;

typedef struct shared_ptr<ggl::BitmapData>* shared_ptr<ggl::BitmapData>Ref;

typedef struct VKEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} VKEdgeInsets;

typedef struct shared_ptr<ggl::RenderQueue> {
	RenderQueue __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::RenderQueue>;

typedef struct CGContext* CGContextRef;

typedef struct {
	double field1;
	double field2;
} SCD_Struct_VK23;

typedef struct {
	VKPoint field1;
	double field2;
	BOOL field3;
} SCD_Struct_VK24;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > >;

typedef struct _tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > > {
	__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true> > __pair3_;
} tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >;

typedef struct map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > > {
	tree<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::__map_value_compare<md::CommandBufferId, std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > >, std::__1::less<md::CommandBufferId>, true>, std::__1::allocator<std::__1::__value_type<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > > __tree_;
} map<md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> >, std::__1::less<md::CommandBufferId>, std::__1::allocator<std::__1::pair<const md::CommandBufferId, std::__1::unique_ptr<ggl::CommandBuffer, std::__1::default_delete<ggl::CommandBuffer> > > > >;

typedef struct _compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> > {
	unsigned char __first_;
} compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> >;

typedef struct vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> > {
	unsigned char __begin_;
	unsigned char __end_;
	compressed_pair<md::CommandBufferId *, std::__1::allocator<md::CommandBufferId> > __end_cap_;
} vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> >;

typedef struct CommandBufferIdSet {
	vector<md::CommandBufferId, std::__1::allocator<md::CommandBufferId> > _ids;
} CommandBufferIdSet;

typedef struct Matrix<float, 4, 1> {
	float _e[4];
} Matrix<float, 4, 1>;

typedef struct Matrix<unsigned int, 2, 1> {
	unsigned _e[2];
} Matrix<unsigned int, 2, 1>;

typedef struct Box<unsigned int, 2> {
	Matrix<unsigned int, 2, 1> _minimum;
	Matrix<unsigned int, 2, 1> _maximum;
} Box<unsigned int, 2>;

typedef struct ClearItem {
	unsigned char colorMask;
	Matrix<float, 4, 1> color;
	BOOL clearDepthBuffer;
	float depth;
	unsigned char clearStencilBuffer;
	int stencil;
	unsigned char scissorRegion;
	Box<unsigned int, 2> scissorRect;
} ClearItem;

typedef struct shared_ptr<md::StyleQuery> {
	StyleQuery __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<md::StyleQuery>;

typedef struct vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> >* vector<ggl::ShaderLoadItem, std::__1::allocator<ggl::ShaderLoadItem> >Ref;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > {
	shared_ptr<ggl::RenderItem> __first_;
} compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >;

typedef struct vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > {
	shared_ptr<ggl::RenderItem> __begin_;
	shared_ptr<ggl::RenderItem> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::RenderItem> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::RenderItem>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderItem> > >;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::RenderState> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState> > > {
	shared_ptr<ggl::RenderState> __first_;
} compressed_pair<std::__1::shared_ptr<ggl::RenderState> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState> > >;

typedef struct vector<std::__1::shared_ptr<ggl::RenderState>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState> > > {
	shared_ptr<ggl::RenderState> __begin_;
	shared_ptr<ggl::RenderState> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::RenderState> *, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::RenderState>, std::__1::allocator<std::__1::shared_ptr<ggl::RenderState> > >;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> > > {
	shared_ptr<ggl::PolygonSolidFill::Shader::Setup> __first_;
} compressed_pair<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> > >;

typedef struct vector<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> > > {
	shared_ptr<ggl::PolygonSolidFill::Shader::Setup> __begin_;
	shared_ptr<ggl::PolygonSolidFill::Shader::Setup> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup>, std::__1::allocator<std::__1::shared_ptr<ggl::PolygonSolidFill::Shader::Setup> > >;

typedef struct _compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> > {
	RenderQueue __first_;
} compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> >;

typedef struct unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> > {
	compressed_pair<md::RenderQueue *, std::__1::default_delete<md::RenderQueue> > __ptr_;
} unique_ptr<md::RenderQueue, std::__1::default_delete<md::RenderQueue> >;

typedef struct shared_ptr<ggl::Texture2D> {
	Texture2D __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Texture2D>;

typedef struct _compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > {
	RenderState __first_;
} compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> >;

typedef struct unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> > {
	compressed_pair<ggl::RenderState *, std::__1::default_delete<ggl::RenderState> > __ptr_;
} unique_ptr<ggl::RenderState, std::__1::default_delete<ggl::RenderState> >;

typedef struct _compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > {
	RenderItem __first_;
} compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> >;

typedef struct unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> > {
	compressed_pair<ggl::RenderItem *, std::__1::default_delete<ggl::RenderItem> > __ptr_;
} unique_ptr<ggl::RenderItem, std::__1::default_delete<ggl::RenderItem> >;

typedef struct shared_ptr<ggl::Shader> {
	Shader __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Shader>;

typedef struct _compressed_pair<ggl::TextureBase **, std::__1::allocator<ggl::TextureBase *> > {
	TextureBase __first_;
} compressed_pair<ggl::TextureBase **, std::__1::allocator<ggl::TextureBase *> >;

typedef struct vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *> > {
	TextureBase __begin_;
	TextureBase __end_;
	compressed_pair<ggl::TextureBase **, std::__1::allocator<ggl::TextureBase *> > __end_cap_;
} vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *> >;

typedef struct _compressed_pair<ggl::UniformDataElement *, std::__1::allocator<ggl::UniformDataElement> > {
	UniformDataElement __first_;
} compressed_pair<ggl::UniformDataElement *, std::__1::allocator<ggl::UniformDataElement> >;

typedef struct vector<ggl::UniformDataElement, std::__1::allocator<ggl::UniformDataElement> > {
	UniformDataElement __begin_;
	UniformDataElement __end_;
	compressed_pair<ggl::UniformDataElement *, std::__1::allocator<ggl::UniformDataElement> > __end_cap_;
} vector<ggl::UniformDataElement, std::__1::allocator<ggl::UniformDataElement> >;

typedef struct Setup {
	/*function pointer*/void* _vptr$ShaderSetup;
	vector<ggl::UniformDataElement, std::__1::allocator<ggl::UniformDataElement> > _dataArray;
	vector<ggl::TextureBase *, std::__1::allocator<ggl::TextureBase *> > _textures;
	shared_ptr<ggl::Shader> _shader;
} Setup;

typedef struct VKCacheKey {
	unsigned a;
	unsigned b;
	unsigned c;
	unsigned d;
} VKCacheKey;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_VK60;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct _NSZone* NSZoneRef;

typedef struct {
	unsigned mapTypeSupport : 1;
	unsigned matchingTreeVersion : 1;
	unsigned version : 1;
} SCD_Struct_VK63;

typedef struct {
	unsigned list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK64;

typedef struct {
	float list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK65;

typedef struct {
	unsigned alternateFillColor : 1;
	unsigned arrowCollisionOrder : 1;
	unsigned arrowCollisionRank : 1;
	unsigned arrowColor : 1;
	unsigned arrowHaloColor : 1;
	unsigned arrowHeight : 1;
	unsigned arrowHeightLarge : 1;
	unsigned arrowHeightMedium : 1;
	unsigned arrowHeightSmall : 1;
	unsigned arrowHeightXLarge : 1;
	unsigned arrowHeightXXLarge : 1;
	unsigned arrowMinZoom : 1;
	unsigned arrowSelectedMinZoom : 1;
	unsigned arrowSpacing : 1;
	unsigned brightness : 1;
	unsigned buildingFacadeColor : 1;
	unsigned buildingFlatColor : 1;
	unsigned buildingLandmarkColor : 1;
	unsigned buildingOutlineColor : 1;
	unsigned buildingRoofStyle : 1;
	unsigned buildingStrokeColor3d : 1;
	unsigned buildingStrokeWidth3d : 1;
	unsigned buildingTopColor : 1;
	unsigned casingsColor : 1;
	unsigned casingsHeight : 1;
	unsigned casingsShadowRamp : 1;
	unsigned casingsShadowWidth : 1;
	unsigned casingsStrokeColor : 1;
	unsigned casingsStrokeWidth : 1;
	unsigned casingsWidth : 1;
	unsigned curbColor : 1;
	unsigned dropShadowColor : 1;
	unsigned fancyCasingsColor : 1;
	unsigned fancyCasingsStrokeColor : 1;
	unsigned fancyCasingsStrokeWidth : 1;
	unsigned fancyCasingsWidth : 1;
	unsigned fillColor : 1;
	unsigned fillTextureBlendMode : 1;
	unsigned fillTextureOpacity : 1;
	unsigned fillZIndex : 1;
	unsigned genericShieldBackgroundColor : 1;
	unsigned genericShieldBorderColor : 1;
	unsigned genericShieldDropShadowColor : 1;
	unsigned genericShieldDropShadowSize : 1;
	unsigned genericShieldHaloColor : 1;
	unsigned genericShieldHaloSize : 1;
	unsigned genericShieldStyle : 1;
	unsigned genericShieldTextColor : 1;
	unsigned glossColor : 1;
	unsigned horizonColor : 1;
	unsigned innerGlowColor : 1;
	unsigned innerGlowRadius : 1;
	unsigned insetShadowAngle : 1;
	unsigned insetShadowColor : 1;
	unsigned insetShadowHeight : 1;
	unsigned labelAlternateTextPositions : 1;
	unsigned labelAnnotationIconSize : 1;
	unsigned labelAnnotationTextSize : 1;
	unsigned labelArrowLayer : 1;
	unsigned labelClass : 1;
	unsigned labelCollisionOrder : 1;
	unsigned labelCollisionRank : 1;
	unsigned labelColor : 1;
	unsigned labelDedupeRank : 1;
	unsigned labelDefaultTextPosition : 1;
	unsigned labelDiagonalPositionAnchor : 1;
	unsigned labelDiagonalPositionHorizontalMargin : 1;
	unsigned labelDiagonalPositionVerticalMargin : 1;
	unsigned labelFontExpansion : 1;
	unsigned labelFontExpansionLarge : 1;
	unsigned labelFontExpansionMedium : 1;
	unsigned labelFontExpansionSmall : 1;
	unsigned labelFontExpansionXLarge : 1;
	unsigned labelFontExpansionXXLarge : 1;
	unsigned labelHaloColor : 1;
	unsigned labelHaloSize : 1;
	unsigned labelHaloSizeLarge : 1;
	unsigned labelHaloSizeMedium : 1;
	unsigned labelHaloSizeSmall : 1;
	unsigned labelHaloSizeXLarge : 1;
	unsigned labelHaloSizeXXLarge : 1;
	unsigned labelHeight : 1;
	unsigned labelHeightCurve : 1;
	unsigned labelHeightCurveLimit : 1;
	unsigned labelHeightLarge : 1;
	unsigned labelHeightLargeCurve : 1;
	unsigned labelHeightLargeCurveLimit : 1;
	unsigned labelHeightMedium : 1;
	unsigned labelHeightMediumCurve : 1;
	unsigned labelHeightMediumCurveLimit : 1;
	unsigned labelHeightSmall : 1;
	unsigned labelHeightSmallCurve : 1;
	unsigned labelHeightSmallCurveLimit : 1;
	unsigned labelHeightXLarge : 1;
	unsigned labelHeightXLargeCurve : 1;
	unsigned labelHeightXLargeCurveLimit : 1;
	unsigned labelHeightXXLarge : 1;
	unsigned labelHeightXXLargeCurve : 1;
	unsigned labelHeightXXLargeCurveLimit : 1;
	unsigned labelIconBadgeColor : 1;
	unsigned labelIconBadgeLightBlendMode : 1;
	unsigned labelIconBadgeLightColor : 1;
	unsigned labelIconBevelAmount : 1;
	unsigned labelIconCornerRadius : 1;
	unsigned labelIconDropShadowColor : 1;
	unsigned labelIconDropShadowSize : 1;
	unsigned labelIconGlowBlendMode : 1;
	unsigned labelIconGlyphBlendMode : 1;
	unsigned labelIconGlyphColor : 1;
	unsigned labelIconGlyphStyle : 1;
	unsigned labelIconHaloColor : 1;
	unsigned labelIconHaloSize : 1;
	unsigned labelIconSaturation : 1;
	unsigned labelIconScale : 1;
	unsigned labelIconSize : 1;
	unsigned labelIconSource : 1;
	unsigned labelIconSourceMultipoi : 1;
	unsigned labelIconStyle : 1;
	unsigned labelLayer : 1;
	unsigned labelLayoutStyle : 1;
	unsigned labelLineWrap : 1;
	unsigned labelLineWrapLogograms : 1;
	unsigned labelMultiShieldGap : 1;
	unsigned labelOffset : 1;
	unsigned labelOffsetLarge : 1;
	unsigned labelOffsetMedium : 1;
	unsigned labelOffsetPosition : 1;
	unsigned labelOffsetSmall : 1;
	unsigned labelOffsetXLarge : 1;
	unsigned labelOffsetXXLarge : 1;
	unsigned labelParallaxHeight : 1;
	unsigned labelPositioningMode : 1;
	unsigned labelRoadCrossingThreshold : 1;
	unsigned labelRoadRank : 1;
	unsigned labelRoadWithShieldGap : 1;
	unsigned labelRoadWithShieldSpacing : 1;
	unsigned labelShieldRank : 1;
	unsigned labelShieldSpacing : 1;
	unsigned labelSpacing : 1;
	unsigned labelSpacingLarge : 1;
	unsigned labelSpacingMedium : 1;
	unsigned labelSpacingSmall : 1;
	unsigned labelSpacingXLarge : 1;
	unsigned labelSpacingXXLarge : 1;
	unsigned labelTextAlternateOrientations : 1;
	unsigned labelTextOrientation : 1;
	unsigned labelTextVisibility : 1;
	unsigned labelTiltLimit : 1;
	unsigned layerShadowsRamp : 1;
	unsigned layerShadowsTaper : 1;
	unsigned layerShadowsWidth : 1;
	unsigned lineColor : 1;
	unsigned lineDrawStyle : 1;
	unsigned margin : 1;
	unsigned marginBottom : 1;
	unsigned marginLeft : 1;
	unsigned marginRight : 1;
	unsigned marginTop : 1;
	unsigned maxScale : 1;
	unsigned navLabelSignBrightness : 1;
	unsigned outerGlowColor : 1;
	unsigned outerGlowRadius : 1;
	unsigned outerStrokeColor : 1;
	unsigned outerStrokeWidth : 1;
	unsigned padding : 1;
	unsigned paddingBottom : 1;
	unsigned paddingLeft : 1;
	unsigned paddingRight : 1;
	unsigned paddingTop : 1;
	unsigned patternScaler : 1;
	unsigned patternScalerQuantizationFactor : 1;
	unsigned poiIconOpacity : 1;
	unsigned polygonType : 1;
	unsigned puckArrowBrightness : 1;
	unsigned puckArrowColor : 1;
	unsigned puckArrowColorStale : 1;
	unsigned puckArrowShadowBrightness : 1;
	unsigned puckCircleBrightness : 1;
	unsigned puckDomeBrightness : 1;
	unsigned puckOffset : 1;
	unsigned puckRimBrightness : 1;
	unsigned puckSize : 1;
	unsigned railroadPattern : 1;
	unsigned routeEnlargementScale : 1;
	unsigned routeEnlargementStartZoom : 1;
	unsigned secondFillTextureBlendMode : 1;
	unsigned secondFillTextureOpacity : 1;
	unsigned shieldCollisionOrder : 1;
	unsigned shieldCollisionRank : 1;
	unsigned shieldSize : 1;
	unsigned shieldTiltLimit : 1;
	unsigned spacing : 1;
	unsigned strokeColor : 1;
	unsigned strokeWidth : 1;
	unsigned strokeWidthCurve : 1;
	unsigned strokeWidthCurveLimit : 1;
	unsigned thirdFillTextureBlendMode : 1;
	unsigned thirdFillTextureOpacity : 1;
	unsigned trafficAnimationBaseSpeed : 1;
	unsigned trafficAnitialiasingOffset : 1;
	unsigned trafficAnitialiasingSlope : 1;
	unsigned trafficGlowFadingEnd : 1;
	unsigned trafficGlowFadingStart : 1;
	unsigned trafficIncidentAccidentMinZ : 1;
	unsigned trafficIncidentBrightness : 1;
	unsigned trafficIncidentConstructionMinZ : 1;
	unsigned trafficIncidentEventMinZ : 1;
	unsigned trafficIncidentHazardMinZ : 1;
	unsigned trafficIncidentLaneClosureMinZ : 1;
	unsigned trafficIncidentRampClosureMinZ : 1;
	unsigned trafficIncidentRoadClosureMinZ : 1;
	unsigned trafficIncidentUnknownMinZ : 1;
	unsigned trafficShiftEnd : 1;
	unsigned trafficShiftStart : 1;
	unsigned trafficWidth : 1;
	unsigned travelledColor : 1;
	unsigned width : 1;
	unsigned widthCurve : 1;
	unsigned widthCurveLimit : 1;
	unsigned widthDropoff : 1;
	unsigned zIndex : 1;
	unsigned arrowVisible : 1;
	unsigned buildingOutlineVisible : 1;
	unsigned casingsVisible : 1;
	unsigned fancyCasingsVisible : 1;
	unsigned fillColorInterpolate : 1;
	unsigned labelRaisedInitial : 1;
	unsigned labelSelectable : 1;
	unsigned labelSmallCaps : 1;
	unsigned labelUpcase : 1;
	unsigned layerShadowsVisible : 1;
	unsigned navLabelShieldVisible : 1;
	unsigned navLabelSignVisible : 1;
	unsigned navLabelSuppressSignIfHaveShield : 1;
	unsigned onlyShowIfTappable : 1;
	unsigned poiDisabledLabelIconVisible : 1;
	unsigned poiDisabledLabelTextVisible : 1;
	unsigned renderEndCaps : 1;
	unsigned shieldVisible : 1;
	unsigned showLabelAsShield : 1;
	unsigned showShieldTextAsLabel : 1;
	unsigned simpleLine : 1;
	unsigned strokeColorInterpolate : 1;
	unsigned trafficVisible : 1;
	unsigned visible : 1;
	unsigned visibleBehindBuildings : 1;
	unsigned yieldsToOnscreenLabels : 1;
} SCD_Struct_VK66;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true>, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true>, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> > > >;

typedef struct unordered_map<StyleKey, std::__1::weak_ptr<md::StyleQuery>, std::__1::hash<StyleKey>, std::__1::equal_to<StyleKey>, std::__1::allocator<std::__1::pair<const StyleKey, std::__1::weak_ptr<md::StyleQuery> > > > {
	hash_table<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::hash<StyleKey>, true>, std::__1::__unordered_map_equal<StyleKey, std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> >, std::__1::equal_to<StyleKey>, true>, std::__1::allocator<std::__1::__hash_value_type<StyleKey, std::__1::weak_ptr<md::StyleQuery> > > > __table_;
} unordered_map<StyleKey, std::__1::weak_ptr<md::StyleQuery>, std::__1::hash<StyleKey>, std::__1::equal_to<StyleKey>, std::__1::allocator<std::__1::pair<const StyleKey, std::__1::weak_ptr<md::StyleQuery> > > >;

typedef struct opaque_pthread_rwlock_t {
	long long __sig;
	char __opaque[192];
} opaque_pthread_rwlock_t;

typedef struct CGImage* CGImageRef;

typedef struct CGColor* CGColorRef;

typedef struct __CTFont* CTFontRef;

typedef struct {
	Matrix<float, 4, 1> field1;
} SCD_Struct_VK81;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >;

typedef struct unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > {
	hash_table<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::ShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::ShieldCacheKey, std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::ShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > __table_;
} unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >;

typedef struct _list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
	__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __prev_;
	__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr> > > {
	list_node_base<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > __size_alloc_;
} list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr> > >;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr> > > _list;
	unordered_map<md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::ShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::ShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<md::ShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::ShieldCacheKey>, std::__1::equal_to<md::ShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >;

typedef struct unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > {
	hash_table<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::hash<md::GenericShieldCacheKey>, true>, std::__1::__unordered_map_equal<md::GenericShieldCacheKey, std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> >, std::__1::equal_to<md::GenericShieldCacheKey>, true>, std::__1::allocator<std::__1::__hash_value_type<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > __table_;
} unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > >;

typedef struct _list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> {
	__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __prev_;
	__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr> > > {
	list_node_base<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > __size_alloc_;
} list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr> > >;

typedef struct GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr> > > _list;
	unordered_map<md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *>, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, std::__1::allocator<std::__1::pair<const md::GenericShieldCacheKey, std::__1::__list_iterator<geo::detail::_CacheItem<md::GenericShieldCacheKey, VKShieldArtwork *, _value_ptr>, void *> > > > _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<md::GenericShieldCacheKey, VKShieldArtwork *, std::__1::hash<md::GenericShieldCacheKey>, std::__1::equal_to<md::GenericShieldCacheKey>, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct {
	CGSize center;
	CGSize span;
} SCD_Struct_VK112;

typedef struct Device* DeviceRef;

typedef struct Range {
	unsigned long long _start;
	unsigned long long _count;
} Range;

typedef struct RenderItem {
	/*function pointer*/void* _vptr$RenderItem;
	char* _name;
	RenderState _renderState;
	ShaderSetup _shaderSetup;
	unsigned _stencilRefValue;
	unsigned _renderOrder;
	float _lineWidth;
	Mesh _mesh;
	Range _range;
	Range _ranges;
	unsigned long long _rangeCount;
} RenderItem;

typedef struct _compressed_pair<ggl::Texture::Shader::Setup *, std::__1::default_delete<ggl::Texture::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::Texture::Shader::Setup *, std::__1::default_delete<ggl::Texture::Shader::Setup> >;

typedef struct unique_ptr<ggl::Texture::Shader::Setup, std::__1::default_delete<ggl::Texture::Shader::Setup> > {
	compressed_pair<ggl::Texture::Shader::Setup *, std::__1::default_delete<ggl::Texture::Shader::Setup> > __ptr_;
} unique_ptr<ggl::Texture::Shader::Setup, std::__1::default_delete<ggl::Texture::Shader::Setup> >;

typedef struct _compressed_pair<ggl::Clut::Shader::Setup *, std::__1::default_delete<ggl::Clut::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::Clut::Shader::Setup *, std::__1::default_delete<ggl::Clut::Shader::Setup> >;

typedef struct unique_ptr<ggl::Clut::Shader::Setup, std::__1::default_delete<ggl::Clut::Shader::Setup> > {
	compressed_pair<ggl::Clut::Shader::Setup *, std::__1::default_delete<ggl::Clut::Shader::Setup> > __ptr_;
} unique_ptr<ggl::Clut::Shader::Setup, std::__1::default_delete<ggl::Clut::Shader::Setup> >;

typedef struct _compressed_pair<ggl::TextureWithReverseAlpha::Shader::Setup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::TextureWithReverseAlpha::Shader::Setup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup> >;

typedef struct unique_ptr<ggl::TextureWithReverseAlpha::Shader::Setup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup> > {
	compressed_pair<ggl::TextureWithReverseAlpha::Shader::Setup *, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup> > __ptr_;
} unique_ptr<ggl::TextureWithReverseAlpha::Shader::Setup, std::__1::default_delete<ggl::TextureWithReverseAlpha::Shader::Setup> >;

typedef struct Matrix<float, 2, 1> {
	float _e[2];
} Matrix<float, 2, 1>;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > >;

typedef struct map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, unsigned long>, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, unsigned long> > > __tree_;
} map<std::__1::basic_string<char>, unsigned long, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, unsigned long> > >;

typedef struct _compressed_pair<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > *, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > > > {
	unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > __first_;
} compressed_pair<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > *, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > > >;

typedef struct vector<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> >, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > > > {
	unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > __begin_;
	unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > __end_;
	compressed_pair<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > *, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > > > __end_cap_;
} vector<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> >, std::__1::allocator<std::__1::unique_ptr<md::TexturedDrawable, std::__1::default_delete<md::TexturedDrawable> > > >;

typedef struct fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh> {
	_fast_shared_ptr_control _control;
} fast_shared_ptr<ggl::PolygonBase::CompressedMeshMesh>;

typedef struct fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
	_fast_shared_ptr_control _control;
} fast_shared_ptr<ggl::RealisticCasingFacade::RealisticMesh>;

typedef struct fast_shared_ptr<ggl::RealisticRoadShadow::RealisticMesh> {
	_fast_shared_ptr_control _control;
} fast_shared_ptr<ggl::RealisticRoadShadow::RealisticMesh>;

typedef struct {
	unsigned char field1;
	unsigned short field2;
} SCD_Struct_VK132;

typedef struct {
	unsigned field1;
	int field2;
	float field3;
	BOOL field4;
	BOOL field5;
	BOOL field6;
	BOOL field7;
	BOOL field8;
	SCD_Struct_VK132 field9[16];
} SCD_Struct_VK133;

typedef struct {
	VKCacheKey field1;
	SCD_Struct_VK133 field2;
} SCD_Struct_VK134;

typedef struct {
	unsigned buildingChangeoverZ : 1;
	unsigned globalScaleFactor : 1;
	unsigned globeLODScale : 1;
	unsigned labelIconScale : 1;
	unsigned lodOffset : 1;
	unsigned minLineTriangleWidth : 1;
	unsigned minTrafficTypeAccidentZ : 1;
	unsigned minTrafficTypeConstructionZ : 1;
	unsigned minTrafficTypeEventZ : 1;
	unsigned minTrafficTypeHazardZ : 1;
	unsigned minTrafficTypeLaneClosureZ : 1;
	unsigned minTrafficTypeRampClosureZ : 1;
	unsigned minTrafficTypeRoadClosureZ : 1;
	unsigned minTrafficTypeUnknownZ : 1;
	unsigned navLabelMaxRoadSigns : 1;
	unsigned navLabelRoadSignHeight : 1;
	unsigned navLabelRoadSignScaleLarge : 1;
	unsigned navLabelRoadSignScaleMedium : 1;
	unsigned navLabelRoadSignScaleSmall : 1;
	unsigned navLabelRoadSignScaleXLarge : 1;
	unsigned navLabelRoadSignScaleXXLarge : 1;
	unsigned rasterPolygonChangeoverZ : 1;
	unsigned realisticNightBrightness : 1;
	unsigned realisticShieldNightBrightness : 1;
	unsigned shieldNightBrightness : 1;
	unsigned tiltLimitSatelliteScale : 1;
	unsigned labelDisableAlternateTextPositions : 1;
} SCD_Struct_VK135;

typedef struct shared_ptr<ggl::PolygonBase::MeshMesh> {
	MeshMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::PolygonBase::MeshMesh>;

typedef struct shared_ptr<ggl::TextureMesh::MeshMesh> {
	MeshMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::TextureMesh::MeshMesh>;

typedef struct StencilManager {
	unsigned char _stencilStart;
	unsigned char _stencilEnd;
	unsigned char _stencilMax;
	ClearItem _stencilResetItem;
} StencilManager;

typedef struct _compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > {
	LoaderImpl __first_;
} compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> >;

typedef struct unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > {
	compressed_pair<ggl::LoaderImpl *, std::__1::default_delete<ggl::LoaderImpl> > __ptr_;
} unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> >;

typedef struct Loader {
	unique_ptr<ggl::LoaderImpl, std::__1::default_delete<ggl::LoaderImpl> > _loaderImpl;
} Loader;

typedef struct {
	long long vectorType;
	int timePeriod;
	int mapOverlayType;
	BOOL iconTappable;
	NSString* localeString;
	BOOL isSelected;
	unsigned applicationState;
} SCD_Struct_VK142;

typedef struct {
	long long field1;
	int field2;
	int field3;
	BOOL field4;
	id field5;
	BOOL field6;
	unsigned field7;
} SCD_Struct_VK143;

typedef struct _compressed_pair<md::StyleMatchingTree **, std::__1::allocator<md::StyleMatchingTree *> > {
	StyleMatchingTree __first_;
} compressed_pair<md::StyleMatchingTree **, std::__1::allocator<md::StyleMatchingTree *> >;

typedef struct vector<md::StyleMatchingTree *, std::__1::allocator<md::StyleMatchingTree *> > {
	StyleMatchingTree __begin_;
	StyleMatchingTree __end_;
	compressed_pair<md::StyleMatchingTree **, std::__1::allocator<md::StyleMatchingTree *> > __end_cap_;
} vector<md::StyleMatchingTree *, std::__1::allocator<md::StyleMatchingTree *> >;

typedef struct {
	VKPoint position;
	double course;
	BOOL onRoute;
} SCD_Struct_VK146;

typedef struct SpringDamper {
	double _position;
	double _velocity;
	double _acceleration;
	double _kSpring;
	double _kDamper;
	double _restingPosition;
	BOOL _directionIsPositive;
} SpringDamper;

typedef struct AngularSpringDamper {
	double _position;
	double _velocity;
	double _acceleration;
	double _kSpring;
	double _kDamper;
	double _restingPosition;
	BOOL _directionIsPositive;
} AngularSpringDamper;

typedef struct State {
	double _course;
	double _referenceScreenOffset;
	double _pitch;
	double _boomLength;
} State;

typedef struct VKNavigationCameraModel {
	double _halfVerticalFov;
	double _horizontalFov;
	double _tanHalfHorizontalFov;
	double _courseOverride;
	SpringDamper _pitchSpring;
	AngularSpringDamper _courseSpring;
	SpringDamper _referenceScreenOffsetSpring;
	SpringDamper _boomLengthSpring;
	State _targetState;
	double _previousUpdateTime;
} VKNavigationCameraModel;

typedef struct fast_shared_ptr<vk::RouteLineSection> {
	_fast_shared_ptr_control _control;
} fast_shared_ptr<vk::RouteLineSection>;

typedef struct PolylineCoordinate {
	unsigned index;
	float offset;
} PolylineCoordinate;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> {
	__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > >;

typedef struct unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > > {
	hash_table<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::__unordered_map_hasher<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::hash<VKVectorTile *>, true>, std::__1::__unordered_map_equal<VKVectorTile *, std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList>, std::__1::equal_to<VKVectorTile *>, true>, std::__1::allocator<std::__1::__hash_value_type<VKVectorTile *, OccluderGroupList> > > __table_;
} unordered_map<VKVectorTile *, OccluderGroupList, std::__1::hash<VKVectorTile *>, std::__1::equal_to<VKVectorTile *>, std::__1::allocator<std::__1::pair<VKVectorTile *const, OccluderGroupList> > >;

typedef struct _compressed_pair<unsigned long, std::__1::less<void *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::less<void *> >;

typedef struct _compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > {
	MultiRange __first_;
} compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> >;

typedef struct vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > {
	MultiRange __begin_;
	MultiRange __end_;
	compressed_pair<ggl::MultiRange *, std::__1::allocator<ggl::MultiRange> > __end_cap_;
} vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > >;

typedef struct _tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > {
	__tree_node<void *, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<void *, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::less<void *> > __pair3_;
} tree<void *, std::__1::less<void *>, std::__1::allocator<void *> >;

typedef struct set<void *, std::__1::less<void *>, std::__1::allocator<void *> > {
	tree<void *, std::__1::less<void *>, std::__1::allocator<void *> > __tree_;
} set<void *, std::__1::less<void *>, std::__1::allocator<void *> >;

typedef struct Pool<ggl::RenderItem> {
	set<void *, std::__1::less<void *>, std::__1::allocator<void *> > mAllocatedSlabs;
	unsigned long long mElementsPerSlab;
	unsigned long long mSlabSize;
	FreeList mFreeElement;
} Pool<ggl::RenderItem>;

typedef struct _compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > {
	Range __first_;
} compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> >;

typedef struct vector<ggl::Range, std::__1::allocator<ggl::Range> > {
	Range __begin_;
	Range __end_;
	compressed_pair<ggl::Range *, std::__1::allocator<ggl::Range> > __end_cap_;
} vector<ggl::Range, std::__1::allocator<ggl::Range> >;

typedef struct RenderItemBatcher {
	vector<ggl::Range, std::__1::allocator<ggl::Range> > _activeRanges;
	unsigned long long _rangePoolCount;
	vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > _rangePool;
	vector<ggl::Range, std::__1::allocator<ggl::Range> > _activeRanges;
	RenderItem _prototype;
	Pool<ggl::RenderItem> _pool;
	unsigned long long _rangePoolCount;
	vector<ggl::MultiRange, std::__1::allocator<ggl::MultiRange> > _rangePool;
} RenderItemBatcher;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > {
	FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlatStroke::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > {
	FragmentedPool<ggl::BuildingFlat::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingFlat::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > {
	FragmentedPool<ggl::BuildingTop::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingTop::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > {
	FragmentedPool<ggl::PrefilteredLine::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PrefilteredLine::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > {
	FragmentedPool<ggl::Building::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::Building::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::Building::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Building::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > {
	FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingPointyRoof::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > {
	FragmentedPool<ggl::BuildingShadow::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::BuildingShadow::Shader::Setup> > >;

typedef struct shared_ptr<ggl::RenderState> {
	RenderState __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::RenderState>;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > {
	FragmentedPool<ggl::RenderItem> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RenderItem> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RenderItem>, std::__1::default_delete<ggl::FragmentedPool<ggl::RenderItem> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonStroke::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonStroke::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableStroke::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonFill::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonFill::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonAnimatableFill::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonShadowedStroke::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::Glow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > > {
	FragmentedPool<ggl::Glow::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::Glow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::Glow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::Glow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Glow::Shader::Setup> > >;

typedef struct shared_ptr<ggl::AnimatableTexture::VariantUniformData> {
	VariantUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::AnimatableTexture::VariantUniformData>;

typedef struct shared_ptr<ggl::PolygonFill::FillUniformData> {
	FillUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::PolygonFill::FillUniformData>;

typedef struct _compressed_pair<ggl::PolygonFill::Shader::Setup *, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::PolygonFill::Shader::Setup *, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> >;

typedef struct unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> > {
	compressed_pair<ggl::PolygonFill::Shader::Setup *, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> > __ptr_;
} unique_ptr<ggl::PolygonFill::Shader::Setup, std::__1::default_delete<ggl::PolygonFill::Shader::Setup> >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::Building::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh> > > {
	MeshVendor<ggl::Building::BuildingMesh> __first_;
} compressed_pair<ggl::MeshVendor<ggl::Building::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::Building::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::Building::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Building::BuildingMesh> > >;

typedef struct _compressed_pair<vk::RoadManager *, std::__1::default_delete<vk::RoadManager> > {
	RoadManager __first_;
} compressed_pair<vk::RoadManager *, std::__1::default_delete<vk::RoadManager> >;

typedef struct unique_ptr<vk::RoadManager, std::__1::default_delete<vk::RoadManager> > {
	compressed_pair<vk::RoadManager *, std::__1::default_delete<vk::RoadManager> > __ptr_;
} unique_ptr<vk::RoadManager, std::__1::default_delete<vk::RoadManager> >;

typedef struct _compressed_pair<vk::PatternedManager *, std::__1::default_delete<vk::PatternedManager> > {
	PatternedManager __first_;
} compressed_pair<vk::PatternedManager *, std::__1::default_delete<vk::PatternedManager> >;

typedef struct unique_ptr<vk::PatternedManager, std::__1::default_delete<vk::PatternedManager> > {
	compressed_pair<vk::PatternedManager *, std::__1::default_delete<vk::PatternedManager> > __ptr_;
} unique_ptr<vk::PatternedManager, std::__1::default_delete<vk::PatternedManager> >;

typedef struct _compressed_pair<vk::TrafficManager *, std::__1::default_delete<vk::TrafficManager> > {
	TrafficManager __first_;
} compressed_pair<vk::TrafficManager *, std::__1::default_delete<vk::TrafficManager> >;

typedef struct unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager> > {
	compressed_pair<vk::TrafficManager *, std::__1::default_delete<vk::TrafficManager> > __ptr_;
} unique_ptr<vk::TrafficManager, std::__1::default_delete<vk::TrafficManager> >;

typedef struct _compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue> > {
	OffscreenQueue __first_;
} compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue> >;

typedef struct unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue> > {
	compressed_pair<md::OffscreenQueue *, std::__1::default_delete<md::OffscreenQueue> > __ptr_;
} unique_ptr<md::OffscreenQueue, std::__1::default_delete<md::OffscreenQueue> >;

typedef struct shared_ptr<ggl::Sky::SkyUniformData> {
	SkyUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Sky::SkyUniformData>;

typedef struct shared_ptr<ggl::Sky::Shader::Setup> {
	Setup __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Sky::Shader::Setup>;

typedef struct shared_ptr<ggl::Sky::SkyMesh> {
	SkyMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Sky::SkyMesh>;

typedef struct shared_ptr<ggl::IndexDataTyped<unsigned short> > {
	IndexDataTyped<unsigned short> __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::IndexDataTyped<unsigned short> >;

typedef struct shared_ptr<vk::LabelTile> {
	LabelTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::LabelTile>;

typedef const struct shared_ptr<vk::LabelManager>* shared_ptr<vk::LabelManager>Ref;

typedef struct shared_ptr<ggl::RealisticCasingFacade::RealisticMesh> {
	RealisticMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::RealisticCasingFacade::RealisticMesh>;

typedef struct _compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData> > {
	_VKRealisticPolygonMetaData __first_;
} compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData> >;

typedef struct vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData> > {
	_VKRealisticPolygonMetaData __begin_;
	_VKRealisticPolygonMetaData __end_;
	compressed_pair<_VKRealisticPolygonMetaData *, std::__1::allocator<_VKRealisticPolygonMetaData> > __end_cap_;
} vector<_VKRealisticPolygonMetaData, std::__1::allocator<_VKRealisticPolygonMetaData> >;

typedef struct shared_ptr<ggl::Fog::FogUniformData> {
	FogUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Fog::FogUniformData>;

typedef struct shared_ptr<ggl::RealisticTexture::RealisticUniformData> {
	RealisticUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::RealisticTexture::RealisticUniformData>;

typedef struct {
	long long iconStyle;
	Matrix<float, 4, 1> iconBadgeColor;
	Matrix<float, 4, 1> iconGradientColor[2];
	Matrix<float, 4, 1> iconBadgeLightColor;
	int iconBadgeLightBlendMode;
	Matrix<float, 4, 1> iconGlyphColor;
	long long iconGlyphStyle;
	int iconGlyphBlendMode;
	float iconHaloSize;
	Matrix<float, 4, 1> iconHaloColor;
	CGSize iconDropShadowOffset;
	float iconDropShadowSize;
	Matrix<float, 4, 1> iconDropShadowColor;
	float iconCornerRadius;
	float iconBrightness;
	float iconBevelAmount;
	unsigned iconSourceStyleAttributeKey;
	unsigned iconSourceStyleMultipoiAttributeKey;
} SCD_Struct_VK227;

typedef struct {
	long long field1;
	CGSize field2;
	Matrix<float, 4, 1> field3[2];
	Matrix<float, 4, 1> field4;
	int field5;
	Matrix<float, 4, 1> field6;
	long long field7;
	int field8;
	float field9;
	Matrix<float, 4, 1> field10;
	Matrix<float, 4, 1> field11;
	float field12;
	Matrix<float, 4, 1> field13;
	float field14;
	float field15;
	float field16;
	unsigned field17;
	unsigned field18;
} SCD_Struct_VK228;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > >;

typedef struct unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > > {
	hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > > __table_;
} unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > >;

typedef struct _list_node_base<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> {
	__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> __prev_;
	__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> __next_;
} list_node_base<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>;

typedef struct list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr> > > {
	list_node_base<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> __end_;
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > __size_alloc_;
} list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr> > >;

typedef struct GEOGenericContainer<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type> {
	mutex _lock;
	list<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, std::__1::allocator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr> > > _list;
	unordered_map<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *>, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__list_iterator<geo::detail::_CacheItem<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, _value_ptr>, void *> > > > _map;
	unsigned long long _maxCapacity;
	unsigned long long _maxCost;
	unsigned long long _currentCost;
	unsigned long long _currentCount;
} GEOGenericContainer<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, id, std::__1::hash<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, geo::GEOGenericContainerWeakReferenceTag, 0, 0, geo::GEOGenericContainerLockingTag, detail::_default_pointer_type>;

typedef struct VKRasterTileKey {
	unsigned x;
	unsigned y;
	unsigned z;
	unsigned pointSize;
} VKRasterTileKey;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >;

typedef struct unordered_map<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > {
	hash_table<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__unordered_map_hasher<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::hash<int>, true>, std::__1::__unordered_map_equal<int, std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<int>, true>, std::__1::allocator<std::__1::__hash_value_type<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > __table_;
} unordered_map<int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::hash<int>, std::__1::equal_to<int>, std::__1::allocator<std::__1::pair<const int, geo::_retain_ptr<id, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >;

typedef struct {
	int from;
	int to;
	unsigned long long fromDisplayStyle;
	unsigned long long toDisplayStyle;
	float fraction;
} SCD_Struct_VK254;

typedef struct {
	int list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK255;

typedef struct {
	unsigned long long list;
	unsigned long long count;
	unsigned long long size;
} SCD_Struct_VK256;

typedef struct {
	unsigned score : 1;
} SCD_Struct_VK257;

typedef struct _compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > {
	ClearItem __first_;
} compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> >;

typedef struct unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> > {
	compressed_pair<ggl::ClearItem *, std::__1::default_delete<ggl::ClearItem> > __ptr_;
} unique_ptr<ggl::ClearItem, std::__1::default_delete<ggl::ClearItem> >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > {
	FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::PolygonSolidFill::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticTexture::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticTexture::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableTexture::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticRoad::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoad::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticAnimatableRoad::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingShadow::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingFacade::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticCasingTop::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > {
	FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::RealisticRoadShadow::Shader::Setup> > >;

typedef struct {
	float field1;
	float field2;
	float field3;
	Matrix<float, 4, 1> field4;
	Matrix<float, 4, 1> field5;
} SCD_Struct_VK278;

typedef struct _compressed_pair<vk::TrafficLayer *, std::__1::default_delete<vk::TrafficLayer> > {
	TrafficLayer __first_;
} compressed_pair<vk::TrafficLayer *, std::__1::default_delete<vk::TrafficLayer> >;

typedef struct unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer> > {
	compressed_pair<vk::TrafficLayer *, std::__1::default_delete<vk::TrafficLayer> > __ptr_;
} unique_ptr<vk::TrafficLayer, std::__1::default_delete<vk::TrafficLayer> >;

typedef struct GEOTileKey {
	unsigned z : 6;
	unsigned x : 26;
	unsigned y : 26;
	unsigned type : 6;
	unsigned pixelSize : 8;
	unsigned textScale : 8;
	unsigned provider : 8;
	unsigned expires : 1;
	unsigned reserved1 : 7;
	unsigned char reserved2[4];
} GEOTileKey;

typedef struct _compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record __first_;
} compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> >;

typedef struct vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > {
	Record __begin_;
	Record __end_;
	compressed_pair<zilch::TrafficSkeletonTile::Record *, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > __end_cap_;
} vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> >;

typedef struct TrafficSkeletonTile {
	vector<zilch::TrafficSkeletonTile::Record, std::__1::allocator<zilch::TrafficSkeletonTile::Record> > m_records;
} TrafficSkeletonTile;

typedef struct {
	id field1;
	char* field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	unsigned long long field6;
	unsigned field7;
	unsigned long long field8;
	BOOL field9;
	unsigned long long field10;
	float field11;
	unsigned long long field12;
	id field13;
	int field14;
} SCD_Struct_VK285;

typedef struct {
	float field1;
	float field2;
} SCD_Struct_VK286;

typedef struct {
	float field1;
	float field2;
	float field3;
	float field4;
} SCD_Struct_VK287;

typedef struct {
	unsigned short field1[2];
	unsigned short field2[2];
} SCD_Struct_VK288;

typedef struct {
	SCD_Struct_VK286 field1;
	SCD_Struct_VK286 field2;
} SCD_Struct_VK289;

typedef struct {
	SCD_Struct_VK285 field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	SCD_Struct_VK287 field11;
	SCD_Struct_VK288) field12;
	/*function pointer*/void* field13;
	SCD_Struct_VK289 field14;
	unsigned char field15;
} SCD_Struct_VK290;

typedef struct {
	SCD_Struct_VK6 arrowMatrix;
	SCD_Struct_VK6 circleMatrix;
	Matrix<float, 4, 1> arrowColor;
} SCD_Struct_VK291;

typedef struct shared_ptr<ggl::TextureWithBrightness::Shader::Setup> {
	Setup __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::TextureWithBrightness::Shader::Setup>;

typedef struct shared_ptr<ggl::TextureAlphaMask::Shader::Setup> {
	Setup __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::TextureAlphaMask::Shader::Setup>;

typedef struct shared_ptr<ggl::RenderItem> {
	RenderItem __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::RenderItem>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> {
	__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true>, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true>, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo> > >;

typedef struct unordered_map<GEOTransportType, vk::TransportTypeInfo, std::__1::hash<GEOTransportType>, std::__1::equal_to<GEOTransportType>, std::__1::allocator<std::__1::pair<const GEOTransportType, vk::TransportTypeInfo> > > {
	hash_table<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::__unordered_map_hasher<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::hash<GEOTransportType>, true>, std::__1::__unordered_map_equal<GEOTransportType, std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo>, std::__1::equal_to<GEOTransportType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOTransportType, vk::TransportTypeInfo> > > __table_;
} unordered_map<GEOTransportType, vk::TransportTypeInfo, std::__1::hash<GEOTransportType>, std::__1::equal_to<GEOTransportType>, std::__1::allocator<std::__1::pair<const GEOTransportType, vk::TransportTypeInfo> > >;

typedef struct _compressed_pair<vk::RouteLineArrowManager *, std::__1::default_delete<vk::RouteLineArrowManager> > {
	RouteLineArrowManager __first_;
} compressed_pair<vk::RouteLineArrowManager *, std::__1::default_delete<vk::RouteLineArrowManager> >;

typedef struct unique_ptr<vk::RouteLineArrowManager, std::__1::default_delete<vk::RouteLineArrowManager> > {
	compressed_pair<vk::RouteLineArrowManager *, std::__1::default_delete<vk::RouteLineArrowManager> > __ptr_;
} unique_ptr<vk::RouteLineArrowManager, std::__1::default_delete<vk::RouteLineArrowManager> >;

typedef struct _compressed_pair<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > *, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > > > {
	unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > __first_;
} compressed_pair<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > *, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > > >;

typedef struct vector<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> >, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > > > {
	unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > __begin_;
	unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > __end_;
	compressed_pair<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > *, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > > > __end_cap_;
} vector<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> >, std::__1::allocator<std::__1::unique_ptr<vk::RouteLineArrowLayer, std::__1::default_delete<vk::RouteLineArrowLayer> > > >;

typedef struct _compressed_pair<vk::RouteLineManager *, std::__1::default_delete<vk::RouteLineManager> > {
	RouteLineManager __first_;
} compressed_pair<vk::RouteLineManager *, std::__1::default_delete<vk::RouteLineManager> >;

typedef struct unique_ptr<vk::RouteLineManager, std::__1::default_delete<vk::RouteLineManager> > {
	compressed_pair<vk::RouteLineManager *, std::__1::default_delete<vk::RouteLineManager> > __ptr_;
} unique_ptr<vk::RouteLineManager, std::__1::default_delete<vk::RouteLineManager> >;

typedef struct _compressed_pair<vk::RouteLineLayer *, std::__1::default_delete<vk::RouteLineLayer> > {
	RouteLineLayer __first_;
} compressed_pair<vk::RouteLineLayer *, std::__1::default_delete<vk::RouteLineLayer> >;

typedef struct unique_ptr<vk::RouteLineLayer, std::__1::default_delete<vk::RouteLineLayer> > {
	compressed_pair<vk::RouteLineLayer *, std::__1::default_delete<vk::RouteLineLayer> > __ptr_;
} unique_ptr<vk::RouteLineLayer, std::__1::default_delete<vk::RouteLineLayer> >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > > {
	FragmentedPool<ggl::Debug::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::Debug::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::Debug::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::Shader::Setup> > >;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > > {
	FragmentedPool<ggl::Debug::BaseMesh> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > > {
	compressed_pair<ggl::FragmentedPool<ggl::Debug::BaseMesh> *, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::Debug::BaseMesh>, std::__1::default_delete<ggl::FragmentedPool<ggl::Debug::BaseMesh> > >;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *> >;

typedef struct _compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *> > {
	float __first_;
} compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *> >;

typedef struct _hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> {
	__hash_node<GEOComposedRouteSection *, void *> __next_;
} hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> > > {
	hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<GEOComposedRouteSection *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > > {
	__hash_node<GEOComposedRouteSection *, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<GEOComposedRouteSection *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > > {
	compressed_pair<std::__1::__hash_node<GEOComposedRouteSection *, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > >;

typedef struct _hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> > {
	unique_ptr<std::__1::__hash_node<GEOComposedRouteSection *, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<GEOComposedRouteSection *, void *> *>, std::__1::allocator<std::__1::__hash_node<GEOComposedRouteSection *, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::hash<GEOComposedRouteSection *> > __p2_;
	compressed_pair<float, std::__1::equal_to<GEOComposedRouteSection *> > __p3_;
} hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> >;

typedef struct unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> > {
	hash_table<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> > __table_;
} unordered_set<GEOComposedRouteSection *, std::__1::hash<GEOComposedRouteSection *>, std::__1::equal_to<GEOComposedRouteSection *>, std::__1::allocator<GEOComposedRouteSection *> >;

typedef struct __CFSet* CFSetRef;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> > > >;

typedef struct unordered_map<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> > > > {
	hash_table<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::__unordered_map_hasher<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::__unordered_map_equal<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, true>, std::__1::allocator<std::__1::__hash_value_type<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> > > > __table_;
} unordered_map<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery>, std::__1::hash<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::equal_to<geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::allocator<std::__1::pair<const geo::_retain_ptr<NSData *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::shared_ptr<md::StyleQuery> > > >;

typedef struct shared_ptr<vk::InfoLabel> {
	InfoLabel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::InfoLabel>;

typedef struct retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> {
	/*function pointer*/void* _vptr$_retain_ptr;
	GEOVectorTile* _obj;
	_retain_objc _retain;
	_release_objc _release;
} retain_ptr<GEOVectorTile *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>;

typedef struct {
	unsigned matchingStyleAttributeLongValue : 1;
	unsigned anchorPointX : 1;
	unsigned anchorPointY : 1;
	unsigned iconRectHeight : 1;
	unsigned iconRectWidth : 1;
	unsigned iconRectX : 1;
	unsigned iconRectY : 1;
	unsigned matchingStyleAttributeKey : 1;
	unsigned matchingStyleAttributeValue : 1;
	unsigned size : 1;
} SCD_Struct_VK340;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > {
	MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> __first_;
} compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PrefilteredLine::PrefilteredLineMesh> > >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > {
	MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> __first_;
} compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::BuildingPointyRoof::BuildingMesh> > >;

typedef struct BufferMemory {
	BufferUser _user;
	ResourceAccessor _accessor;
	Range _range;
	int _access;
	int _sync;
	char* _data;
} BufferMemory;

typedef struct DataWrite<ggl::PolygonBase::DefaultVboVertexElement> {
	BufferMemory _memory;
} DataWrite<ggl::PolygonBase::DefaultVboVertexElement>;

typedef struct DataWrite<unsigned short> {
	BufferMemory _memory;
} DataWrite<unsigned short>;

typedef struct _compressed_pair<ggl::PolygonBase::MeshMesh *, std::__1::allocator<ggl::PolygonBase::MeshMesh> > {
	MeshMesh __first_;
} compressed_pair<ggl::PolygonBase::MeshMesh *, std::__1::allocator<ggl::PolygonBase::MeshMesh> >;

typedef struct vector<ggl::PolygonBase::MeshMesh, std::__1::allocator<ggl::PolygonBase::MeshMesh> > {
	MeshMesh __begin_;
	MeshMesh __end_;
	compressed_pair<ggl::PolygonBase::MeshMesh *, std::__1::allocator<ggl::PolygonBase::MeshMesh> > __end_cap_;
} vector<ggl::PolygonBase::MeshMesh, std::__1::allocator<ggl::PolygonBase::MeshMesh> >;

typedef struct _compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > {
	pair<unsigned short, unsigned int> __first_;
} compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >;

typedef struct vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > {
	pair<unsigned short, unsigned int> __begin_;
	pair<unsigned short, unsigned int> __end_;
	compressed_pair<std::__1::pair<unsigned short, unsigned int> *, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > __end_cap_;
} vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > >;

typedef struct MeshSet<ggl::PolygonBase::MeshMesh, ggl::PolygonBase::DefaultVboVertexElement> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<ggl::PolygonBase::MeshMesh, std::__1::allocator<ggl::PolygonBase::MeshMesh> > _meshes;
	DataWrite<ggl::PolygonBase::DefaultVboVertexElement> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::PolygonBase::MeshMesh, ggl::PolygonBase::DefaultVboVertexElement>;

typedef struct DataWrite<ggl::PolygonMesh::DefaultVboVertexElement> {
	BufferMemory _memory;
} DataWrite<ggl::PolygonMesh::DefaultVboVertexElement>;

typedef struct _compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh> > {
	MeshMesh __first_;
} compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh> >;

typedef struct vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh> > {
	MeshMesh __begin_;
	MeshMesh __end_;
	compressed_pair<ggl::PolygonMesh::MeshMesh *, std::__1::allocator<ggl::PolygonMesh::MeshMesh> > __end_cap_;
} vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh> >;

typedef struct MeshSet<ggl::PolygonMesh::MeshMesh, ggl::PolygonMesh::DefaultVboVertexElement> {
	vector<std::__1::pair<unsigned short, unsigned int>, std::__1::allocator<std::__1::pair<unsigned short, unsigned int> > > _vertexAndIndexCounts;
	vector<ggl::PolygonMesh::MeshMesh, std::__1::allocator<ggl::PolygonMesh::MeshMesh> > _meshes;
	DataWrite<ggl::PolygonMesh::DefaultVboVertexElement> _vertexDataWrite;
	DataWrite<unsigned short> _indexDataWrite;
	unsigned char _meshIndex;
	unsigned short _meshVertexOffset;
	unsigned _meshIndexOffset;
} MeshSet<ggl::PolygonMesh::MeshMesh, ggl::PolygonMesh::DefaultVboVertexElement>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >;

typedef struct unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > {
	hash_table<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::__unordered_map_hasher<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::hash<SectionKey>, true>, std::__1::__unordered_map_equal<std::__1::pair<void *, unsigned long>, std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > >, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > > __table_;
} unordered_map<std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> >, std::__1::hash<SectionKey>, std::__1::equal_to<std::__1::pair<void *, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::pair<void *, unsigned long>, std::__1::vector<Edge, std::__1::allocator<Edge> > > > >;

typedef struct _compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher> > {
	RenderItemBatcher __first_;
} compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher> >;

typedef struct vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher> > {
	RenderItemBatcher __begin_;
	RenderItemBatcher __end_;
	compressed_pair<ggl::RenderItemBatcher *, std::__1::allocator<ggl::RenderItemBatcher> > __end_cap_;
} vector<ggl::RenderItemBatcher, std::__1::allocator<ggl::RenderItemBatcher> >;

typedef struct _compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > {
	vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > __first_;
} compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > >;

typedef struct vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > {
	vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > __begin_;
	vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > __end_;
	compressed_pair<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > *, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > > __end_cap_;
} vector<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > >, std::__1::allocator<std::__1::vector<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> >, std::__1::allocator<std::__1::vector<ggl::Range, std::__1::allocator<ggl::Range> > > > > >;

typedef struct {
	SCD_Struct_VK290 field1;
	unsigned long long field2;
	unsigned long long field3;
	BOOL field4;
} SCD_Struct_VK371;

typedef struct {
	VKPoint position;
	Matrix<double, 3, 1> tangent;
	BOOL tangentValid;
} SCD_Struct_VK372;

typedef struct {
	double mb[4][3];
} SCD_Struct_VK373;

typedef struct {
	VKPoint field1;
	Matrix<double, 3, 1> field2;
	BOOL field3;
} SCD_Struct_VK374;

typedef struct _compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh> > {
	BaseMesh __first_;
} compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh> >;

typedef struct unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh> > {
	compressed_pair<ggl::Debug::BaseMesh *, std::__1::default_delete<ggl::Debug::BaseMesh> > __ptr_;
} unique_ptr<ggl::Debug::BaseMesh, std::__1::default_delete<ggl::Debug::BaseMesh> >;

typedef struct _compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh> > {
	BaseMesh __first_;
} compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh> >;

typedef struct unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh> > {
	compressed_pair<ggl::DebugPoints::BaseMesh *, std::__1::default_delete<ggl::DebugPoints::BaseMesh> > __ptr_;
} unique_ptr<ggl::DebugPoints::BaseMesh, std::__1::default_delete<ggl::DebugPoints::BaseMesh> >;

typedef struct {
	float _a;
	unsigned _b;
	unsigned _g;
	unsigned _r;
} SCD_Struct_VK379;

typedef struct {
	unsigned offsetX : 1;
	unsigned offsetY : 1;
} SCD_Struct_VK380;

typedef struct {
	SCD_Struct_VK379 _color;
	float _offsetX;
	float _offsetY;
	float _size;
	SCD_Struct_VK380 _has;
} SCD_Struct_VK381;

typedef struct {
	unsigned field1 : 1;
	unsigned field2 : 1;
	unsigned field3 : 1;
	unsigned field4 : 1;
	unsigned field5 : 1;
} SCD_Struct_VK382;

typedef struct {
	unsigned field1;
	int field2;
	int field3;
	float field4;
	unsigned field5;
	SCD_Struct_VK382 field6;
} SCD_Struct_VK383;

typedef struct {
	SCD_Struct_VK379 _color;
	float _width;
} SCD_Struct_VK384;

typedef struct {
	unsigned textShadow : 1;
	unsigned textStroke : 1;
	unsigned fontColor : 1;
	unsigned atlasIndex : 1;
	unsigned backgroundColor : 1;
	unsigned borderColor : 1;
	unsigned capWidthLeft : 1;
	unsigned capWidthRight : 1;
	unsigned centerOffsetX : 1;
	unsigned fontSize : 1;
	unsigned maxDigits : 1;
	unsigned minDigits : 1;
	unsigned nonDigitFontSize : 1;
	unsigned paddingLeft : 1;
	unsigned paddingRight : 1;
	unsigned quadIndex : 1;
	unsigned textBaseline : 1;
	unsigned textMaskColor : 1;
} SCD_Struct_VK385;

typedef struct {
	SCD_Struct_VK379 field1;
	float field2;
} SCD_Struct_VK386;

typedef struct {
	SCD_Struct_VK379 field1;
	float field2;
	float field3;
	float field4;
	SCD_Struct_VK380 field5;
} SCD_Struct_VK387;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_VK388;

typedef struct _compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> > {
	TileExclusionArea __first_;
} compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> >;

typedef struct vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea> > {
	TileExclusionArea __begin_;
	TileExclusionArea __end_;
	compressed_pair<vk::TileExclusionArea *, std::__1::allocator<vk::TileExclusionArea> > __end_cap_;
} vector<vk::TileExclusionArea, std::__1::allocator<vk::TileExclusionArea> >;

typedef struct {
	void opaque1;
	long long opaque2;
} SCD_Struct_Pi391;

typedef struct __IOSurfaceAccelerator* IOSurfaceAcceleratorRef;

typedef struct __IOSurface* IOSurfaceRef;

typedef struct {
	float x0;
	float x1;
	float y0;
	float y1;
} SCD_Struct_VK394;

typedef struct shared_ptr<vk::LabelMapTile> {
	LabelMapTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::LabelMapTile>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > >;

typedef struct unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > > {
	hash_table<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__unordered_map_hasher<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::hash<GEOGenericTileType>, true>, std::__1::__unordered_map_equal<GEOGenericTileType, std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::equal_to<GEOGenericTileType>, true>, std::__1::allocator<std::__1::__hash_value_type<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > > __table_;
} unordered_map<GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D>, std::__1::hash<GEOGenericTileType>, std::__1::equal_to<GEOGenericTileType>, std::__1::allocator<std::__1::pair<const GEOGenericTileType, std::__1::shared_ptr<ggl::Texture2D> > > >;

typedef struct __CTLine* CTLineRef;

typedef struct {
	SCD_Struct_VK285 field1;
	unsigned long long field2;
	unsigned long long field3;
	int field4;
	int field5;
	int field6;
	unsigned long long field7;
	unsigned long long( field8;
	/*function pointer*/void* field9;
	= field10;
	SCD_Struct_VK288 field11;
	SCD_Struct_VK289) field12;
	/*function pointer*/void* field13;
	SCD_Struct_VK394 field14;
	unsigned char field15;
} SCD_Struct_VK407;

typedef struct {
	unsigned fadingOffset : 1;
	unsigned fadingSlope : 1;
	unsigned fillColor : 1;
	unsigned patternLength : 1;
	unsigned patternSlotLength : 1;
	unsigned patternWidth : 1;
	unsigned secondaryColor : 1;
	unsigned uNUSEDPattern : 1;
	unsigned widthFraction : 1;
} SCD_Struct_VK408;

typedef struct shared_ptr<vk::Anchor> {
	Anchor __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::Anchor>;

typedef struct shared_ptr<vk::ViewTransform> {
	ViewTransform __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::ViewTransform>;

typedef struct _compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > {
	Texture2D __first_;
} compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> >;

typedef struct unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> > {
	compressed_pair<ggl::Texture2D *, std::__1::default_delete<ggl::Texture2D> > __ptr_;
} unique_ptr<ggl::Texture2D, std::__1::default_delete<ggl::Texture2D> >;

typedef struct _compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer> > {
	TextureBuffer __first_;
} compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer> >;

typedef struct unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer> > {
	compressed_pair<ggl::TextureBuffer *, std::__1::default_delete<ggl::TextureBuffer> > __ptr_;
} unique_ptr<ggl::TextureBuffer, std::__1::default_delete<ggl::TextureBuffer> >;

typedef struct _compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> > {
	IOSurfaceTexture __first_;
} compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> >;

typedef struct unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture> > {
	compressed_pair<ggl::IOSurfaceTexture *, std::__1::default_delete<ggl::IOSurfaceTexture> > __ptr_;
} unique_ptr<ggl::IOSurfaceTexture, std::__1::default_delete<ggl::IOSurfaceTexture> >;

typedef struct _compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > {
	RenderTarget __first_;
} compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> >;

typedef struct unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> > {
	compressed_pair<ggl::RenderTarget *, std::__1::default_delete<ggl::RenderTarget> > __ptr_;
} unique_ptr<ggl::RenderTarget, std::__1::default_delete<ggl::RenderTarget> >;

typedef struct _compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > {
	RenderBuffer __first_;
} compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> >;

typedef struct unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> > {
	compressed_pair<ggl::RenderBuffer *, std::__1::default_delete<ggl::RenderBuffer> > __ptr_;
} unique_ptr<ggl::RenderBuffer, std::__1::default_delete<ggl::RenderBuffer> >;

typedef struct _compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation> > {
	RenderTargetOperation __first_;
} compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation> >;

typedef struct unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation> > {
	compressed_pair<ggl::RenderTargetOperation *, std::__1::default_delete<ggl::RenderTargetOperation> > __ptr_;
} unique_ptr<ggl::RenderTargetOperation, std::__1::default_delete<ggl::RenderTargetOperation> >;

typedef struct MapCamera {
	View _view;
	Viewport _viewport;
	void _layoutContext;
} MapCamera;

typedef struct _compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > {
	RenderQueue __first_;
} compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> >;

typedef struct unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> > {
	compressed_pair<ggl::RenderQueue *, std::__1::default_delete<ggl::RenderQueue> > __ptr_;
} unique_ptr<ggl::RenderQueue, std::__1::default_delete<ggl::RenderQueue> >;

typedef struct _compressed_pair<<anonymous>::YFlipPass *, std::__1::default_delete<<anonymous>::YFlipPass> > {
	YFlipPass __first_;
} compressed_pair<<anonymous>::YFlipPass *, std::__1::default_delete<<anonymous>::YFlipPass> >;

typedef struct unique_ptr<<anonymous>::YFlipPass, std::__1::default_delete<<anonymous>::YFlipPass> > {
	compressed_pair<<anonymous>::YFlipPass *, std::__1::default_delete<<anonymous>::YFlipPass> > __ptr_;
} unique_ptr<<anonymous>::YFlipPass, std::__1::default_delete<<anonymous>::YFlipPass> >;

typedef struct _compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > {
	shared_ptr<ggl::Texture2D> __first_;
} compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >;

typedef struct vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > {
	shared_ptr<ggl::Texture2D> __begin_;
	shared_ptr<ggl::Texture2D> __end_;
	compressed_pair<std::__1::shared_ptr<ggl::Texture2D> *, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > > __end_cap_;
} vector<std::__1::shared_ptr<ggl::Texture2D>, std::__1::allocator<std::__1::shared_ptr<ggl::Texture2D> > >;

typedef struct CullingGridWithHeight {
	float _heights[16];
} CullingGridWithHeight;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct _compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection> > > {
	fast_shared_ptr<vk::RouteLineSection> __first_;
} compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection> > >;

typedef struct vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection> > > {
	fast_shared_ptr<vk::RouteLineSection> __begin_;
	fast_shared_ptr<vk::RouteLineSection> __end_;
	compressed_pair<geo::fast_shared_ptr<vk::RouteLineSection> *, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection> > > __end_cap_;
} vector<geo::fast_shared_ptr<vk::RouteLineSection>, std::__1::allocator<geo::fast_shared_ptr<vk::RouteLineSection> > >;

typedef struct shared_ptr<vk::AnchorContext> {
	AnchorContext __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::AnchorContext>;

typedef struct shared_ptr<vk::AnchorFactory> {
	AnchorFactory __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::AnchorFactory>;

typedef struct VGLBitmapInfo {
	unsigned long long width;
	unsigned long long height;
	unsigned long long bitsPerComponent;
	unsigned long long bitsPerPixel;
	unsigned long long bytesPerRow;
	CGColorSpace space;
	unsigned bitmapInfo;
} VGLBitmapInfo;

typedef struct _compressed_pair<VKRect *, std::__1::allocator<VKRect> > {
	/*function pointer*/void* __first_;
} compressed_pair<VKRect *, std::__1::allocator<VKRect> >;

typedef struct vector<VKRect, std::__1::allocator<VKRect> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<VKRect *, std::__1::allocator<VKRect> > __end_cap_;
} vector<VKRect, std::__1::allocator<VKRect> >;

typedef struct _compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey> > {
	VKTileKey __first_;
} compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey> >;

typedef struct vector<VKTileKey, std::__1::allocator<VKTileKey> > {
	VKTileKey __begin_;
	VKTileKey __end_;
	compressed_pair<VKTileKey *, std::__1::allocator<VKTileKey> > __end_cap_;
} vector<VKTileKey, std::__1::allocator<VKTileKey> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > >;

typedef struct _tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true> > __pair3_;
} tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > > {
	tree<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::__map_value_compare<VKPolylineOverlay *, std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> >, std::__1::less<VKPolylineOverlay *>, true>, std::__1::allocator<std::__1::__value_type<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData> > > > __tree_;
} map<VKPolylineOverlay *, std::__1::weak_ptr<altitude::RouteLineData>, std::__1::less<VKPolylineOverlay *>, std::__1::allocator<std::__1::pair<VKPolylineOverlay *const, std::__1::weak_ptr<altitude::RouteLineData> > > >;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
	unsigned field4;
	/*function pointer*/void* field5;
} SCD_Struct_VK445;

typedef struct _compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > {
	Matrix<double, 2, 1> __first_;
} compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > >;

typedef struct vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > > {
	Matrix<double, 2, 1> __begin_;
	Matrix<double, 2, 1> __end_;
	compressed_pair<gm::Matrix<double, 2, 1> *, std::__1::allocator<gm::Matrix<double, 2, 1> > > __end_cap_;
} vector<gm::Matrix<double, 2, 1>, std::__1::allocator<gm::Matrix<double, 2, 1> > >;

typedef struct {
	/*function pointer*/void* field1;
	unsigned long long field2;
	unsigned long long field3;
	unsigned long long field4;
	unsigned long long field5;
	/*function pointer*/void* field6;
	/*function pointer*/void* field7;
} SCD_Struct_VK448;

typedef struct _compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > {
	shared_ptr<vk::NavLabel> __first_;
} compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >;

typedef struct vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > {
	shared_ptr<vk::NavLabel> __begin_;
	shared_ptr<vk::NavLabel> __end_;
	compressed_pair<std::__1::shared_ptr<vk::NavLabel> *, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > > __end_cap_;
} vector<std::__1::shared_ptr<vk::NavLabel>, std::__1::allocator<std::__1::shared_ptr<vk::NavLabel> > >;

typedef struct shared_ptr<zilch::TrafficDynamicTile> {
	TrafficDynamicTile __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<zilch::TrafficDynamicTile>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> {
	__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *> > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true> > __p3_;
} hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *> > >;

typedef struct unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *> > > {
	hash_table<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::__unordered_map_hasher<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *>, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::__hash_value_type<long long, const zilch::TrafficDynamicTile::Flow *> > > __table_;
} unordered_multimap<long long, const zilch::TrafficDynamicTile::Flow *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, const zilch::TrafficDynamicTile::Flow *> > >;

typedef struct shared_ptr<ggl::GridBase::GridBaseUniformData> {
	GridBaseUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::GridBase::GridBaseUniformData>;

typedef struct shared_ptr<ggl::SimpleGrid::SimpleGridUniformData> {
	SimpleGridUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::SimpleGrid::SimpleGridUniformData>;

typedef struct shared_ptr<ggl::Grid::GridUniformData> {
	GridUniformData __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Grid::GridUniformData>;

typedef struct _compressed_pair<ggl::Grid::Shader::Setup *, std::__1::default_delete<ggl::Grid::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::Grid::Shader::Setup *, std::__1::default_delete<ggl::Grid::Shader::Setup> >;

typedef struct unique_ptr<ggl::Grid::Shader::Setup, std::__1::default_delete<ggl::Grid::Shader::Setup> > {
	compressed_pair<ggl::Grid::Shader::Setup *, std::__1::default_delete<ggl::Grid::Shader::Setup> > __ptr_;
} unique_ptr<ggl::Grid::Shader::Setup, std::__1::default_delete<ggl::Grid::Shader::Setup> >;

typedef struct _compressed_pair<ggl::SimpleGrid::Shader::Setup *, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup> > {
	Setup __first_;
} compressed_pair<ggl::SimpleGrid::Shader::Setup *, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup> >;

typedef struct unique_ptr<ggl::SimpleGrid::Shader::Setup, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup> > {
	compressed_pair<ggl::SimpleGrid::Shader::Setup *, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup> > __ptr_;
} unique_ptr<ggl::SimpleGrid::Shader::Setup, std::__1::default_delete<ggl::SimpleGrid::Shader::Setup> >;

typedef struct shared_ptr<ggl::GridBase::GridMesh> {
	GridMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::GridBase::GridMesh>;

typedef struct _compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *> > {
	id __first_;
} compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *> >;

typedef struct vector<VKMapTile *, std::__1::allocator<VKMapTile *> > {
	id __begin_;
	id __end_;
	compressed_pair<VKMapTile **, std::__1::allocator<VKMapTile *> > __end_cap_;
} vector<VKMapTile *, std::__1::allocator<VKMapTile *> >;

typedef struct _compressed_pair<VGLRect *, std::__1::allocator<VGLRect> > {
	/*function pointer*/void* __first_;
} compressed_pair<VGLRect *, std::__1::allocator<VGLRect> >;

typedef struct vector<VGLRect, std::__1::allocator<VGLRect> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<VGLRect *, std::__1::allocator<VGLRect> > __end_cap_;
} vector<VGLRect, std::__1::allocator<VGLRect> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > >;

typedef struct _tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true> > __pair3_;
} tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > {
	tree<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, std::__1::__map_value_compare<_GEOTileKey, std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> >, GEOTileKeyComp, true>, std::__1::allocator<std::__1::__value_type<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > > __tree_;
} map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob> > > >;

typedef struct Mutex {
	void mMutex;
} Mutex;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, void *> > >;

typedef struct _tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > > {
	__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true> > __pair3_;
} tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > >;

typedef struct map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > > {
	tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> >, std::__1::less<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > > __tree_;
} map<std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D>, std::__1::less<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<ggl::Texture2D> > > >;

typedef struct Vector2i {
	int _x;
	int _y;
} Vector2i;

typedef struct Position3d {
	double _latitude;
	double _longitude;
	double _height;
} Position3d;

typedef struct PositionGeo3d {
	double _x;
	double _y;
	double _z;
} PositionGeo3d;

typedef struct Vector3d {
	double _x;
	double _y;
	double _z;
} Vector3d;

typedef struct CameraManager {
	/*function pointer*/void* _vptr$CameraManager;
	BOOL _panBegin;
	BOOL _panInProgress;
	BOOL _panEnd;
	Vector2i _panCurrentCursor;
	Vector2i _panPreviousCursor;
	Vector2i _panStartCursor;
	Position3d _panStartPosition;
	double _panDistance;
	BOOL _panAtStartPosition;
	BOOL _rotateBegin;
	BOOL _rotateInProgress;
	BOOL _rotateEnd;
	Position3d _rotateStartPosition;
	Vector2i _rotateCurrentCursor;
	double _rotateAngle;
	BOOL _tiltBegin;
	BOOL _tiltInProgress;
	BOOL _tiltEnd;
	Position3d _tiltStartPosition;
	Vector2i _tiltCurrentCursor;
	double _tiltAngle;
	BOOL _zoomBegin;
	BOOL _zoomInProgress;
	BOOL _zoomEnd;
	Position3d _zoomStartPosition;
	Vector2i _zoomCurrentCursor;
	double _zoomFactor;
	BOOL _zoomRotateToNorth;
	BOOL _useTiltLimit;
	int _tiltLimitMode;
	BOOL _tiltLimitPushDownEnabled;
	BOOL _tiltLimitTransferInProgress;
	BOOL _tiltLimitPushDown;
	double _startPushDownTilt;
	double _tiltLimitTransferFraction;
	double _startTiltLimitTilt;
	PositionGeo3d _startTiltLimitPosition;
	Vector3d _startTiltLimitDirection;
	double _fullZoomTiltLimitFactor;
} CameraManager;

typedef struct _compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool> > {
	TexturePool __first_;
} compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool> >;

typedef struct unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool> > {
	compressed_pair<ggl::TexturePool *, std::__1::default_delete<ggl::TexturePool> > __ptr_;
} unique_ptr<ggl::TexturePool, std::__1::default_delete<ggl::TexturePool> >;

typedef struct _compressed_pair<std::__1::shared_ptr<md::StyleQuery> *, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery> > > {
	shared_ptr<md::StyleQuery> __first_;
} compressed_pair<std::__1::shared_ptr<md::StyleQuery> *, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery> > >;

typedef struct vector<std::__1::shared_ptr<md::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery> > > {
	shared_ptr<md::StyleQuery> __begin_;
	shared_ptr<md::StyleQuery> __end_;
	compressed_pair<std::__1::shared_ptr<md::StyleQuery> *, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery> > > __end_cap_;
} vector<std::__1::shared_ptr<md::StyleQuery>, std::__1::allocator<std::__1::shared_ptr<md::StyleQuery> > >;

typedef struct {
	SCD_Struct_VK285 field1;
	SCD_Struct_VK286 field2;
	unsigned char field3;
	unsigned char field4;
	unsigned char field5;
	/*function pointer*/void* field6;
} SCD_Struct_VK492;

typedef struct _compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > > {
	FragmentedPool<ggl::DebugPoints::Shader::Setup> __first_;
} compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > >;

typedef struct unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > > {
	compressed_pair<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> *, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > > __ptr_;
} unique_ptr<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup>, std::__1::default_delete<ggl::FragmentedPool<ggl::DebugPoints::Shader::Setup> > >;

typedef struct shared_ptr<ggl::Debug::BaseMesh> {
	BaseMesh __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::Debug::BaseMesh>;

typedef struct shared_ptr<ggl::GLDevice> {
	GLDevice __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::GLDevice>;

typedef struct shared_ptr<ggl::GLRenderer> {
	GLRenderer __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::GLRenderer>;

typedef struct _compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> > {
	DebugConsoleManager __first_;
} compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> >;

typedef struct unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> > {
	compressed_pair<md::DebugConsoleManager *, std::__1::default_delete<md::DebugConsoleManager> > __ptr_;
} unique_ptr<md::DebugConsoleManager, std::__1::default_delete<md::DebugConsoleManager> >;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> > >;

typedef struct _tree<std::__1::__value_type<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<vk::Anchor *, float> > > {
	__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<vk::Anchor *, float>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true> > __pair3_;
} tree<std::__1::__value_type<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<vk::Anchor *, float> > >;

typedef struct map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float> > > {
	tree<std::__1::__value_type<vk::Anchor *, float>, std::__1::__map_value_compare<vk::Anchor *, std::__1::__value_type<vk::Anchor *, float>, std::__1::less<vk::Anchor *>, true>, std::__1::allocator<std::__1::__value_type<vk::Anchor *, float> > > __tree_;
} map<vk::Anchor *, float, std::__1::less<vk::Anchor *>, std::__1::allocator<std::__1::pair<vk::Anchor *const, float> > >;

typedef struct _compressed_pair<TrafficSegment *, std::__1::allocator<TrafficSegment> > {
	TrafficSegment __first_;
} compressed_pair<TrafficSegment *, std::__1::allocator<TrafficSegment> >;

typedef struct vector<TrafficSegment, std::__1::allocator<TrafficSegment> > {
	TrafficSegment __begin_;
	TrafficSegment __end_;
	compressed_pair<TrafficSegment *, std::__1::allocator<TrafficSegment> > __end_cap_;
} vector<TrafficSegment, std::__1::allocator<TrafficSegment> >;

typedef struct shared_ptr<vk::NavLabel> {
	NavLabel __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<vk::NavLabel>;

typedef struct _compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo __first_;
} compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo> >;

typedef struct vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo> > {
	LabelNavJunctionInfo __begin_;
	LabelNavJunctionInfo __end_;
	compressed_pair<LabelNavJunctionInfo *, std::__1::allocator<LabelNavJunctionInfo> > __end_cap_;
} vector<LabelNavJunctionInfo, std::__1::allocator<LabelNavJunctionInfo> >;

typedef struct Matrix<double, 2, 1> {
	double _e[2];
} Matrix<double, 2, 1>;

typedef struct Box<double, 2> {
	Matrix<double, 2, 1> _minimum;
	Matrix<double, 2, 1> _maximum;
} Box<double, 2>;

typedef struct _compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> >;

typedef struct _compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true> >;

typedef struct _compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > {
	float __first_;
} compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true> >;

typedef struct _hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> __next_;
} hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>;

typedef struct _compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > > {
	hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> __first_;
} compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > >;

typedef struct _bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > {
	compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > __data_;
} bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> >;

typedef struct _compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > {
	__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> __first_;
	bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > __second_;
} compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > >;

typedef struct unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > {
	compressed_pair<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > __ptr_;
} unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > >;

typedef struct _hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > {
	unique_ptr<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *> > > __bucket_list_;
	compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, void *> > > __p1_;
	compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true> > __p2_;
	compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true> > __p3_;
} hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >;

typedef struct unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > {
	hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> >, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > > __table_;
} unordered_map<std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature>, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::shared_ptr<NavRoadFeature> > > >;

typedef struct _compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment> > {
	RouteSegment __first_;
} compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment> >;

typedef struct vector<RouteSegment, std::__1::allocator<RouteSegment> > {
	RouteSegment __begin_;
	RouteSegment __end_;
	compressed_pair<RouteSegment *, std::__1::allocator<RouteSegment> > __end_cap_;
} vector<RouteSegment, std::__1::allocator<RouteSegment> >;

typedef struct {
	unsigned field1;
	int field2;
	int field3;
	int field4;
	int field5;
} SCD_Struct_VK524;

typedef struct {
	unsigned backgroundColor : 1;
	unsigned borderColor : 1;
	unsigned style : 1;
	unsigned textColor : 1;
	unsigned textDropShadowColor : 1;
	unsigned textDropShadowSize : 1;
	unsigned textStrokeColor : 1;
	unsigned textStrokeSize : 1;
} SCD_Struct_VK525;

typedef struct RenderStyle {
	float _blendFactor;
	StyleData _sourceStyleData;
	StyleData _targetStyleData;
} RenderStyle;

typedef struct {
	unsigned width : 1;
	unsigned strokeWidth : 1;
	unsigned fillColor : 1;
	unsigned strokeColor : 1;
	unsigned fillTexture : 1;
	unsigned obscuredFillTexture : 1;
	unsigned travelledFillTexture : 1;
	unsigned buildingStrokeWidth3d : 1;
	unsigned buildingStrokeColor3d : 1;
	unsigned brightness : 1;
	unsigned puckCircleBrightness : 1;
	unsigned puckArrowBrightness : 1;
	unsigned puckArrowColor : 1;
	unsigned puckArrowColorStale : 1;
	unsigned puckSize : 1;
	unsigned puckOffset : 1;
	unsigned shieldFillColor : 1;
} SCD_Struct_VK527;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true> >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true> > {
	unsigned long long __first_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> > >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, gss::StyleData>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __first_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, gss::StyleData>, void *> > >;

typedef struct _tree<std::__1::__value_type<int, gss::StyleData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, gss::StyleData> > > {
	__tree_node<std::__1::__value_type<int, gss::StyleData>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, gss::StyleData>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true> > __pair3_;
} tree<std::__1::__value_type<int, gss::StyleData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, gss::StyleData> > >;

typedef struct map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData> > > {
	tree<std::__1::__value_type<int, gss::StyleData>, std::__1::__map_value_compare<int, std::__1::__value_type<int, gss::StyleData>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, gss::StyleData> > > __tree_;
} map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > >;

typedef struct map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > {
	tree<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > __tree_;
} map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned int> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<int> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<unsigned char> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<float> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> > > >;

typedef struct map<gss::PropertyID, gss::SparseRamp<bool>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<bool> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::SparseRamp<bool> > > > __tree_;
} map<gss::PropertyID, gss::SparseRamp<bool>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<bool> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair> > >;

typedef struct map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair> > > {
	tree<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gss::StyleDataPair>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gss::StyleDataPair> > > __tree_;
} map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >;

typedef struct map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > {
	tree<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > __tree_;
} map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> > > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> > > >;

typedef struct map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1> > > > {
	tree<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, gm::Matrix<float, 4, 1> > > > __tree_;
} map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1> > > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned int> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned int> > >;

typedef struct map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int> > > {
	tree<std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned int> > > __tree_;
} map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, int> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, int>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, int> > >;

typedef struct map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int> > > {
	tree<std::__1::__value_type<gss::PropertyID, int>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, int>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, int> > > __tree_;
} map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned char> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, unsigned char>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned char> > >;

typedef struct map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char> > > {
	tree<std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, unsigned char>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, unsigned char> > > __tree_;
} map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, float>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, float> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, float>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, float>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, float> > >;

typedef struct map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float> > > {
	tree<std::__1::__value_type<gss::PropertyID, float>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, float>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, float> > > __tree_;
} map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float> > >;

typedef struct _tree<std::__1::__value_type<gss::PropertyID, bool>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, bool> > > {
	__tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<gss::PropertyID, bool>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true> > __pair3_;
} tree<std::__1::__value_type<gss::PropertyID, bool>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, bool> > >;

typedef struct map<gss::PropertyID, bool, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, bool> > > {
	tree<std::__1::__value_type<gss::PropertyID, bool>, std::__1::__map_value_compare<gss::PropertyID, std::__1::__value_type<gss::PropertyID, bool>, std::__1::less<gss::PropertyID>, true>, std::__1::allocator<std::__1::__value_type<gss::PropertyID, bool> > > __tree_;
} map<gss::PropertyID, bool, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, bool> > >;

typedef struct StyleData {
	SCD_Struct_VK527 hasValueInStylesheet;
	map<gss::PropertyID, bool, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, bool> > > _boolMap;
	map<gss::PropertyID, float, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, float> > > _floatMap;
	map<gss::PropertyID, unsigned char, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned char> > > _uint8Map;
	map<gss::PropertyID, int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, int> > > _intMap;
	map<gss::PropertyID, unsigned int, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, unsigned int> > > _uintMap;
	map<gss::PropertyID, gm::Matrix<float, 4, 1>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gm::Matrix<float, 4, 1> > > > _colorMap;
	map<gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > _stringMap;
	map<gss::PropertyID, gss::StyleDataPair, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::StyleDataPair> > > _pairMap;
	map<gss::PropertyID, gss::SparseRamp<bool>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<bool> > > > _boolRampMap;
	map<gss::PropertyID, gss::SparseRamp<float>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<float> > > > _floatRampMap;
	map<gss::PropertyID, gss::SparseRamp<unsigned char>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned char> > > > _uint8RampMap;
	map<gss::PropertyID, gss::SparseRamp<int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<int> > > > _intRampMap;
	map<gss::PropertyID, gss::SparseRamp<unsigned int>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<unsigned int> > > > _uintRampMap;
	map<gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gm::Matrix<float, 4, 1> > > > > _colorRampMap;
	map<gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<geo::_retain_ptr<NSString *, geo::_retain_objc, geo::_release_objc, geo::_hash_objc, geo::_equal_objc> > > > > _stringRampMap;
	map<gss::PropertyID, gss::SparseRamp<gss::StyleDataPair>, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, gss::SparseRamp<gss::StyleDataPair> > > > _pairRampMap;
	map<gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> >, std::__1::less<gss::PropertyID>, std::__1::allocator<std::__1::pair<const gss::PropertyID, std::__1::vector<gss::LinePattern, std::__1::allocator<gss::LinePattern> > > > > _linePatternMap;
	map<int, gss::StyleData, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, gss::StyleData> > > _subStyleDataMap;
} StyleData;

typedef struct VKProfileSparseRampValue {
	float value;
	unsigned char hi;
} VKProfileSparseRampValue;

typedef struct VKProfileSparseRamp<float> {
	_u u;
	VKProfileSparseRampValue v[2];
	f) extra;
	unsigned char count;
} VKProfileSparseRamp<float>;

typedef struct VGLColor {
	float r;
	float g;
	float b;
	float a;
} VGLColor;

typedef struct VKProfileSparseRamp<_VGLColor> {
	_u u;
	VKProfileSparseRampValue v[2];
	_VGLColor) extra;
	unsigned char count;
} VKProfileSparseRamp<_VGLColor>;

typedef struct VKProfileSparseRamp<bool> {
	_u u;
	VKProfileSparseRampValue v[2];
	B) extra;
	unsigned char count;
} VKProfileSparseRamp<bool>;

typedef struct VKProfileSparseRamp<int> {
	_u u;
	VKProfileSparseRampValue v[2];
	i) extra;
	unsigned char count;
} VKProfileSparseRamp<int>;

typedef struct {
	BOOL field1;
	float field2;
	float field3;
} SCD_Struct_VK607;

typedef struct {
	unsigned field1;
	float field2;
	unsigned field3;
	unsigned field4;
	int field5;
	SCD_Struct_VK382 field6;
} SCD_Struct_VK608;

typedef struct _compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh> > {
	Mesh __first_;
} compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh> >;

typedef struct unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh> > {
	compressed_pair<ggl::Mesh *, std::__1::default_delete<ggl::Mesh> > __ptr_;
} unique_ptr<ggl::Mesh, std::__1::default_delete<ggl::Mesh> >;

typedef struct {
	unsigned field1;
	unsigned field2;
	unsigned field3;
} SCD_Struct_VK611;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> > > {
	MeshVendor<ggl::PolygonMesh::MeshMesh> __first_;
} compressed_pair<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::PolygonMesh::MeshMesh> > >;

typedef struct _compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh> > > {
	MeshVendor<ggl::Glow::MeshMesh> __first_;
} compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh> > >;

typedef struct unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh> > > {
	compressed_pair<ggl::MeshVendor<ggl::Glow::MeshMesh> *, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh> > > __ptr_;
} unique_ptr<ggl::MeshVendor<ggl::Glow::MeshMesh>, std::__1::default_delete<ggl::MeshVendor<ggl::Glow::MeshMesh> > >;

typedef struct shared_ptr<ggl::BitmapDataBase> {
	BitmapDataBase __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<ggl::BitmapDataBase>;

typedef struct _compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __first_;
} compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<GEOLocationCoordinate2D *, std::__1::allocator<GEOLocationCoordinate2D> > __end_cap_;
} vector<GEOLocationCoordinate2D, std::__1::allocator<GEOLocationCoordinate2D> >;

typedef struct _compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap> > {
	/*function pointer*/void* __first_;
} compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap> >;

typedef struct vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap> > {
	/*function pointer*/void* __begin_;
	/*function pointer*/void* __end_;
	compressed_pair<VKBuildingHeightMap *, std::__1::allocator<VKBuildingHeightMap> > __end_cap_;
} vector<VKBuildingHeightMap, std::__1::allocator<VKBuildingHeightMap> >;

typedef struct {
	SCD_Struct_VK285 field1;
	char* field2;
	unsigned long long field3;
} SCD_Struct_VK621;

typedef struct _compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> > {
	RoadLayer __first_;
} compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> >;

typedef struct unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer> > {
	compressed_pair<vk::RoadLayer *, std::__1::default_delete<vk::RoadLayer> > __ptr_;
} unique_ptr<vk::RoadLayer, std::__1::default_delete<vk::RoadLayer> >;

typedef struct _compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer> > {
	PatternedLayer __first_;
} compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer> >;

typedef struct unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer> > {
	compressed_pair<vk::PatternedLayer *, std::__1::default_delete<vk::PatternedLayer> > __ptr_;
} unique_ptr<vk::PatternedLayer, std::__1::default_delete<vk::PatternedLayer> >;

