/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:30:57 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/CloudDocsDaemon.framework/CloudDocsDaemon
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <Foundation/NSOperation.h>

@protocol OS_dispatch_queue, OS_dispatch_source, OS_dispatch_group;
@class NSObject, NSDate, NSError, NSMutableArray, NSString, CKDatabase, BRCThrottle, BRCLocalContainer, BRCAccountSession;

@interface BRCOperation : NSOperation {

	NSObject*<OS_dispatch_queue> _internalQueue;
	NSDate* _startDate;
	NSDate* _lastTryDate;
	NSDate* _nextTryDate;
	NSError* _lastError;
	NSMutableArray* _subOperations;
	long long _throttleHash;
	NSObject*<OS_dispatch_source> _retryTimer;
	NSObject*<OS_dispatch_group> _group;
	BOOL _finished;
	BOOL _executing;
	BOOL _isDiscretionary;
	BOOL _usesBackgroundSession;
	BOOL _allowsCellularAccess;
	NSString* _name;
	NSObject*<OS_dispatch_queue> _callbackQueue;
	CKDatabase* _database;
	BRCThrottle* _operationThrottle;
	BRCLocalContainer* _container;
	BRCAccountSession* _accountSession;
	/*^block*/id _mainBlock;
	/*^block*/id _finishBlock;
	id _logSections;

}

@property (nonatomic,readonly) NSError * error;                                         //@synthesize lastError=_lastError - In the implementation block
@property (nonatomic,readonly) id logSections;                                          //@synthesize logSections=_logSections - In the implementation block
@property (copy) NSString * name;                                                       //@synthesize name=_name - In the implementation block
@property (nonatomic,readonly) NSObject*<OS_dispatch_queue> callbackQueue;              //@synthesize callbackQueue=_callbackQueue - In the implementation block
@property (assign,nonatomic) BRCThrottle * operationThrottle;                           //@synthesize operationThrottle=_operationThrottle - In the implementation block
@property (assign,nonatomic) BOOL usesBackgroundSession;                                //@synthesize usesBackgroundSession=_usesBackgroundSession - In the implementation block
@property (assign,nonatomic) BOOL allowsCellularAccess;                                 //@synthesize allowsCellularAccess=_allowsCellularAccess - In the implementation block
@property (assign,nonatomic) BOOL isDiscretionary;                                      //@synthesize isDiscretionary=_isDiscretionary - In the implementation block
@property (assign,nonatomic) CKDatabase * database;                                     //@synthesize database=_database - In the implementation block
@property (nonatomic,retain) BRCLocalContainer * container;                             //@synthesize container=_container - In the implementation block
@property (nonatomic,retain) BRCAccountSession * accountSession;                        //@synthesize accountSession=_accountSession - In the implementation block
@property (nonatomic,copy) id mainBlock;                                                //@synthesize mainBlock=_mainBlock - In the implementation block
@property (nonatomic,copy) id finishBlock;                                              //@synthesize finishBlock=_finishBlock - In the implementation block
@property (assign,getter=isExecuting,nonatomic) BOOL executing;                         //@synthesize executing=_executing - In the implementation block
@property (assign,getter=isFinished,nonatomic) BOOL finished;                           //@synthesize finished=_finished - In the implementation block
-(void)cancel;
-(void)dealloc;
-(id)init;
-(id)description;
-(id)state;
-(void)setName:(NSString *)arg1 ;
-(NSString *)name;
-(void)setContainer:(BRCLocalContainer *)arg1 ;
-(BRCLocalContainer *)container;
-(void)start;
-(void)main;
-(id)initWithName:(id)arg1 ;
-(BOOL)isFinished;
-(BOOL)isExecuting;
-(void)setUsesBackgroundSession:(BOOL)arg1 ;
-(id)initWithName:(id)arg1 group:(id)arg2 ;
-(void)finishWithResult:(id)arg1 error:(id)arg2 ;
-(BOOL)_finishIfCancelled;
-(id)mainBlock;
-(BRCAccountSession *)accountSession;
-(BOOL)allowsCellularAccess;
-(void)setAllowsCellularAccess:(BOOL)arg1 ;
-(void)setExecuting:(BOOL)arg1 ;
-(void)_main;
-(void)_executeAndBumpThrottle:(id)arg1 ;
-(NSObject*<OS_dispatch_queue>)callbackQueue;
-(BOOL)finishIfCancelled;
-(BRCThrottle *)operationThrottle;
-(void)_scheduleExecutionWithPreviousError:(id)arg1 throttle:(id)arg2 ;
-(void)setFinished:(BOOL)arg1 ;
-(BOOL)shouldRetryForError:(id)arg1 ;
-(void)_completedWithResult:(id)arg1 error:(id)arg2 ;
-(CKDatabase *)database;
-(BOOL)isDiscretionary;
-(void)setIsDiscretionary:(BOOL)arg1 ;
-(BOOL)usesBackgroundSession;
-(void)setAccountSession:(BRCAccountSession *)arg1 ;
-(void)setDatabase:(CKDatabase *)arg1 ;
-(BOOL)isConcurrent;
-(void)completedWithResult:(id)arg1 error:(id)arg2 ;
-(void)addSubOperation:(id)arg1 ;
-(void)setOperationThrottle:(BRCThrottle *)arg1 ;
-(void)setMainBlock:(id)arg1 ;
-(id)finishBlock;
-(void)setFinishBlock:(id)arg1 ;
-(id)logSections;
-(NSError *)error;
@end

