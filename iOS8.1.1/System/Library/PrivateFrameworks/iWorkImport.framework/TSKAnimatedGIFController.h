/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:35:37 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/iWorkImport.framework/iWorkImport
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/

#import <iWorkImport/iWorkImport-Structs.h>
#import <iWorkImport/TSKMediaPlayerController.h>

@protocol TSKMediaPlayerControllerDelegate;
@class NSArray, NSMutableSet, CADisplayLink, NSString;

@interface TSKAnimatedGIFController : NSObject <TSKMediaPlayerController> {

	id<TSKMediaPlayerControllerDelegate> mDelegate;
	CGImageSourceRef mSource;
	NSArray* mFrames;
	NSMutableSet* mLayers;
	BOOL mPlaying;
	double mLastDisplayUpdateTime;
	unsigned long long mDisplayLinkCounter;
	double mAbsoluteCurrentTime;
	float mRate;
	float mRateBeforeScrubbing;
	unsigned long long mScrubbingCount;
	double mStartTime;
	double mEndTime;
	float mVolume;
	long long mRepeatMode;
	CADisplayLink* mDisplayLink;
	BOOL fastReversing;
	BOOL fastForwarding;

}

@property (nonatomic,readonly) CGImageRef imageForCurrentTime; 
@property (assign,nonatomic) double lastDisplayUpdateTime; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (nonatomic,readonly) id<TSKMediaPlayerControllerDelegate> delegate; 
@property (nonatomic,readonly) BOOL canPlay; 
@property (assign,getter=isPlaying,nonatomic) BOOL playing; 
@property (assign,nonatomic) float rate; 
@property (assign,nonatomic) double startTime; 
@property (assign,nonatomic) double endTime; 
@property (assign,nonatomic) long long repeatMode; 
@property (assign,nonatomic) float volume; 
@property (getter=isScrubbing,nonatomic,readonly) BOOL scrubbing; 
@property (nonatomic,readonly) BOOL canFastReverse; 
@property (assign,getter=isFastReversing,nonatomic) BOOL fastReversing; 
@property (nonatomic,readonly) BOOL canFastForward; 
@property (assign,getter=isFastForwarding,nonatomic) BOOL fastForwarding; 
@property (nonatomic,readonly) double absoluteCurrentTime; 
@property (nonatomic,readonly) double currentTime; 
@property (nonatomic,readonly) double remainingTime; 
@property (nonatomic,readonly) double absoluteDuration; 
@property (nonatomic,readonly) double duration; 
-(id)newLayer;
-(id)initWithData:(id)arg1 delegate:(id)arg2 ;
-(double)absoluteCurrentTime;
-(void)scrubToTime:(double)arg1 withTolerance:(double)arg2 completionHandler:(/*^block*/id)arg3 ;
-(CGImageRef)imageForTime:(double)arg1 ;
-(double)absoluteDuration;
-(void)p_prepareFrameTimes;
-(void)p_updateDisplayLink;
-(void)p_setAbsoluteCurrentTime:(double)arg1 ;
-(void)setLastDisplayUpdateTime:(double)arg1 ;
-(void)p_updateLayers;
-(void)p_enableDisplayLink;
-(void)p_disableDisplayLink;
-(double)lastDisplayUpdateTime;
-(void)p_displayLinkDidTrigger:(id)arg1 ;
-(void)p_getAbsoluteMovieTime:(double*)arg1 shouldStopPlayback:(BOOL*)arg2 shouldReversePlayback:(BOOL*)arg3 ;
-(void)scrubToTime:(double)arg1 withTolerance:(double)arg2 ;
-(void)seekForwardByOneFrame;
-(void)seekBackwardByOneFrame;
-(void)seekToBeginning;
-(id)addPeriodicTimeObserverForInterval:(double)arg1 block:(/*^block*/id)arg2 ;
-(void)removePeriodicTimeObserver:(id)arg1 ;
-(BOOL)canFastReverse;
-(BOOL)isFastReversing;
-(void)setFastReversing:(BOOL)arg1 ;
-(BOOL)canFastForward;
-(BOOL)isFastForwarding;
-(void)setFastForwarding:(BOOL)arg1 ;
-(void)removeLayer:(id)arg1 ;
-(CGImageRef)imageForCurrentTime;
-(void)cancelPendingSeeks;
-(long long)repeatMode;
-(void)setRepeatMode:(long long)arg1 ;
-(BOOL)isScrubbing;
-(void)beginScrubbing;
-(void)endScrubbing;
-(void)setEndTime:(double)arg1 ;
-(void)dealloc;
-(id<TSKMediaPlayerControllerDelegate>)delegate;
-(double)duration;
-(void)setStartTime:(double)arg1 ;
-(double)startTime;
-(void)seekToEnd;
-(double)remainingTime;
-(void)teardown;
-(float)rate;
-(void)setRate:(float)arg1 ;
-(void)addLayer:(id)arg1 ;
-(double)endTime;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(double)currentTime;
-(BOOL)canPlay;
-(BOOL)isPlaying;
-(void)setPlaying:(BOOL)arg1 ;
@end

