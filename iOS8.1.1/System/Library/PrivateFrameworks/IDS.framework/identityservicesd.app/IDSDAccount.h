/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:32:07 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/IDS.framework/identityservicesd.app/identityservicesd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <identityservicesd/IDSUTunDeliveryControllerConnectivityDelegate.h>
#import <identityservicesd/IDSDLocalDeviceControllerDelegate.h>

@class NSMutableDictionary, IDSAppleRegistration, IDSDService, NSString, NSMutableArray, IDSRegistrationPushHandler, IMTimer, NSDate, NSMutableSet, NSDictionary, NSArray;

@interface IDSDAccount : NSObject <IDSUTunDeliveryControllerConnectivityDelegate, IDSDLocalDeviceControllerDelegate> {

	NSMutableDictionary* _accountInfo;
	IDSAppleRegistration* _registrationInfo;
	IDSDService* _service;
	NSString* _uniqueID;
	NSMutableArray* _setupHandlers;
	IDSRegistrationPushHandler* _pushHandler;
	IMTimer* _restoreTimer;
	NSDate* _dateOfLastHandlesCheck;
	NSMutableSet* _localServices;
	BOOL _disabledAutomatically;
	BOOL _duringInit;
	BOOL _createdDuringSetup;
	BOOL _shouldRequeryHandles;
	BOOL _issuingDependentCheck;
	BOOL _issuingHandlesCheck;
	BOOL _pendingDependantCheck;
	BOOL _pendingHandlesCheck;
	BOOL _pendingAuthenticate;
	BOOL _pendingReIdentify;
	BOOL _pendingReRegister;
	BOOL _isRegistrationActive;
	BOOL _pendingAccountInfoBroadcast;

}

@property (nonatomic,retain,readonly) NSString * uniqueID; 
@property (nonatomic,retain) NSString * loginID; 
@property (nonatomic,retain,readonly) NSString * dsHandle; 
@property (nonatomic,retain,readonly) NSString * dsID; 
@property (nonatomic,retain,readonly) IDSDService * service; 
@property (nonatomic,readonly) int accountType; 
@property (nonatomic,retain,readonly) IDSAppleRegistration * registration;                            //@synthesize registrationInfo=_registrationInfo - In the implementation block
@property (nonatomic,readonly) long long registrationStatus; 
@property (nonatomic,readonly) int registrationErrorReason; 
@property (nonatomic,readonly) long long registrationError; 
@property (nonatomic,readonly) BOOL isRegistered; 
@property (nonatomic,readonly) BOOL isEnabled; 
@property (nonatomic,readonly) BOOL hasEverRegistered; 
@property (assign,nonatomic) BOOL wasDisabledAutomatically;                                           //@synthesize disabledAutomatically=_disabledAutomatically - In the implementation block
@property (nonatomic,readonly) BOOL isUsableForSending; 
@property (nonatomic,readonly) BOOL shouldAutoRegisterAllHandles; 
@property (nonatomic,readonly) BOOL shouldRegisterUsingDSHandle; 
@property (nonatomic,retain,readonly) NSDictionary * accountInfo;                                     //@synthesize accountInfo=_accountInfo - In the implementation block
@property (nonatomic,retain,readonly) NSArray * dependentRegistrations; 
@property (nonatomic,retain,readonly) NSDictionary * defaultPairedDependentRegistration; 
@property (nonatomic,retain,readonly) NSArray * aliasStrings; 
@property (nonatomic,retain,readonly) NSArray * linkedAccounts; 
@property (nonatomic,retain,readonly) NSDictionary * accountSetupInfo; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)sendMessageWithSendParameters:(id)arg1 willSendBlock:(/*^block*/id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)sendMessage:(id)arg1 bulkedPayload:(id)arg2 fromID:(id)arg3 toDestinations:(id)arg4 useDictAsTopLevel:(BOOL)arg5 dataToEncrypt:(id)arg6 encryptPayload:(BOOL)arg7 wantsResponse:(BOOL)arg8 expirationDate:(id)arg9 command:(id)arg10 wantsDeliveryStatus:(BOOL)arg11 deliveryStatusContext:(id)arg12 messageUUID:(id)arg13 priority:(long long)arg14 localDelivery:(BOOL)arg15 willSendBlock:(/*^block*/id)arg16 completionBlock:(/*^block*/id)arg17 ;
-(void)_sendRemotelyWithSendParameters:(id)arg1 data:(id)arg2 protobuf:(id)arg3 willSendBlock:(/*^block*/id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)_splitDestinations:(id)arg1 intoLocalDestinations:(id*)arg2 remoteDestinations:(id*)arg3 ;
-(void)_sendLocallyWithSendParameters:(id)arg1 uriToLocalDestination:(id)arg2 data:(id)arg3 protobuf:(id)arg4 completionBlock:(/*^block*/id)arg5 ;
-(void)sendServerMessage:(id)arg1 command:(id)arg2 completionBlock:(/*^block*/id)arg3 ;
-(void)decryptMessageData:(id)arg1 myURI:(id)arg2 fromURI:(id)arg3 token:(id)arg4 encryptionType:(long long)arg5 completionBlock:(/*^block*/id)arg6 ;
-(BOOL)isDeviceRegistered;
-(void)registrationControllerNeedsNewRegistration:(id)arg1 ;
-(void)registrationController:(id)arg1 registrationUpdated:(id)arg2 ;
-(void)registrationController:(id)arg1 registrationWillStart:(id)arg2 ;
-(void)registrationController:(id)arg1 registrationFailed:(id)arg2 error:(long long)arg3 info:(id)arg4 ;
-(void)registrationController:(id)arg1 registrationSucceeded:(id)arg2 ;
-(void)registrationController:(id)arg1 deregistrationWillStart:(id)arg2 ;
-(void)center:(id)arg1 succeededIdentification:(id)arg2 phoneNumber:(id)arg3 token:(id)arg4 ;
-(void)center:(id)arg1 startedAuthenticating:(id)arg2 ;
-(void)center:(id)arg1 succeededAuthentication:(id)arg2 ;
-(void)center:(id)arg1 succeededLinkHandlesConfirmation:(id)arg2 emailAddress:(id)arg3 ;
-(void)center:(id)arg1 succeededUnlinkHandleRequest:(id)arg2 handle:(id)arg3 ;
-(void)center:(id)arg1 succeededEmailValidationRequest:(id)arg2 emailAddress:(id)arg3 ;
-(void)center:(id)arg1 succeededRegionValidation:(id)arg2 regionID:(id)arg3 phoneNumber:(id)arg4 extraContext:(id)arg5 verified:(BOOL)arg6 ;
-(void)center:(id)arg1 failedAuthentication:(id)arg2 error:(long long)arg3 info:(id)arg4 ;
-(void)center:(id)arg1 failedLinkHandlesConfirmation:(id)arg2 emailAddress:(id)arg3 error:(long long)arg4 info:(id)arg5 ;
-(void)center:(id)arg1 failedUnlinkHandleRequest:(id)arg2 handle:(id)arg3 error:(long long)arg4 info:(id)arg5 ;
-(void)center:(id)arg1 failedEmailValidationRequest:(id)arg2 emailAddress:(id)arg3 error:(long long)arg4 info:(id)arg5 ;
-(void)center:(id)arg1 failedRegionValidation:(id)arg2 error:(long long)arg3 info:(id)arg4 ;
-(void)center:(id)arg1 succeededCurrentEmailsRequest:(id)arg2 emailInfo:(id)arg3 ;
-(void)deactivateRegistration;
-(void)activateRegistration;
-(void)_issueDependantCheck;
-(void)_updateHandles:(BOOL)arg1 ;
-(BOOL)_stopRegistrationAgent;
-(void)_updateVettedAliases:(id)arg1 emailInfo:(id)arg2 addToCurrentHandlesIfNeeded:(BOOL)arg3 ;
-(void)_addAliases:(id)arg1 ;
-(void)_setValidationStatus:(long long)arg1 error:(int)arg2 forAlias:(id)arg3 info:(id)arg4 addToCurrentHandlesIfNeeded:(BOOL)arg5 forceAdd:(BOOL)arg6 ;
-(long long)_neededRegistrationType;
-(BOOL)_rebuildRegistrationInfo:(BOOL)arg1 ;
-(void)_registerAccount;
-(void)_registrationAbilityChanged:(id)arg1 ;
-(void)_identityReloaded:(id)arg1 ;
-(void)_identityRegenerated:(id)arg1 ;
-(void)_keychainMigrationComplete:(id)arg1 ;
-(void)_removeAliases:(id)arg1 ;
-(void)_reregister;
-(void)_refreshRegistration;
-(void)_registerForDeviceCenterNotifications;
-(void)_updateRegistrationStatusWithError:(long long)arg1 info:(id)arg2 ;
-(void)_checkRegistration;
-(void)_unregisterAccount;
-(void)_deregisterDeviceCenterNotifications;
-(void)_authenticateAccount;
-(void)_retryRegister;
-(BOOL)_migrateRegistrationIfNeeded;
-(BOOL)isDeviceAuthenticated;
-(void)_validateAliases:(id)arg1 validateAlreadyValid:(BOOL)arg2 ;
-(void)_validateAliases:(id)arg1 ;
-(void)_unvalidateAliases:(id)arg1 ;
-(void)handler:(id)arg1 reregisterUserID:(id)arg2 style:(id)arg3 service:(id)arg4 ;
-(void)handler:(id)arg1 reloadBag:(id)arg2 ;
-(void)handler:(id)arg1 profile:(id)arg2 deviceUpdated:(id)arg3 service:(id)arg4 ;
-(void)handler:(id)arg1 profileHandlesUpdated:(id)arg2 status:(id)arg3 ;
-(void)handler:(id)arg1 profile:(id)arg2 emailConfirmed:(id)arg3 status:(id)arg4 ;
-(void)registrationController:(id)arg1 deregistrationSucceeded:(id)arg2 ;
-(void)refreshVettedAliases;
-(id)pushHandler;
-(void)_updatePhoneNumberCallerID;
-(void)_acceptIncomingPushes;
-(void)_ignoreIncomingPushes;
-(void)systemDidStartBackup;
-(void)systemDidFinishMigration;
-(void)systemRestoreStateDidChange;
-(void)systemDidLeaveFirstDataProtectionLock;
-(id)serviceType;
-(void)handler:(id)arg1 pushTokenChanged:(id)arg2 ;
-(id)aliases;
-(id)vettedAliases;
-(id)_aliases;
-(void)authenticateAccount;
-(void)addAliases:(id)arg1 ;
-(void)removeAliases:(id)arg1 ;
-(void)unvalidateAliases:(id)arg1 ;
-(void)validateAliases:(id)arg1 ;
-(long long)validationStatusForAlias:(id)arg1 ;
-(void)registerAccount;
-(void)unregisterAccount;
-(void)updateAuthorizationCredentials:(id)arg1 token:(id)arg2 ;
-(void)validateProfile;
-(void)setRegistrationStatus:(int)arg1 error:(long long)arg2 alertInfo:(id)arg3 ;
-(void)passwordUpdated;
-(void)deactivateAndPurgeIdentify;
-(void)_reregisterAndReidentify:(BOOL)arg1 ;
-(id)_aliasStrings;
-(long long)_validationStatusForAlias:(id)arg1 ;
-(void)activeDevicesUpdated;
-(void)reregister;
-(void)reIdentify;
-(id)primaryRegistration;
-(BOOL)shouldRegisterUsingDSHandle;
-(NSString *)dsHandle;
-(NSDictionary *)defaultPairedDependentRegistration;
-(id)smallDescription;
-(NSDictionary *)accountSetupInfo;
-(NSArray *)dependentRegistrations;
-(void)cleanupAccount;
-(BOOL)isAdHocAccount;
-(id)adHocAccounts;
-(BOOL)hasAliasURI:(id)arg1 ;
-(id)initWithLoginID:(id)arg1 service:(id)arg2 uniqueID:(id)arg3 accountType:(int)arg4 accountConfig:(id)arg5 ;
-(NSArray *)linkedAccounts;
-(id)initAdHocAccountWithLoginID:(id)arg1 service:(id)arg2 uniqueID:(id)arg3 accountType:(int)arg4 accountConfig:(id)arg5 primaryAccount:(id)arg6 ;
-(id)initWithDictionary:(id)arg1 service:(id)arg2 uniqueID:(id)arg3 ;
-(void)setupAccountWithCompletionBlock:(/*^block*/id)arg1 ;
-(BOOL)deviceIDisNearby:(id)arg1 ;
-(BOOL)hasEverRegistered;
-(void)_writeAccountDefaults:(id)arg1 force:(BOOL)arg2 ;
-(void)_resetVariables;
-(void)_cleanupAccount;
-(void)_notifyDelegatesAddedLocalDevice:(id)arg1 ;
-(int)registrationErrorReason;
-(void)_setupAccount;
-(id)_initWithLoginID:(id)arg1 service:(id)arg2 uniqueID:(id)arg3 accountType:(int)arg4 accountConfig:(id)arg5 primaryAccount:(id)arg6 isAdHocAccount:(BOOL)arg7 ;
-(void)_broadcastAccountInfoChanged;
-(BOOL)shouldAutoRegisterAllHandles;
-(id)_dependentRegistrationsForDefaultPairedDevice:(BOOL)arg1 ;
-(id)primaryAccountUniqueID;
-(id)accountAndAdHocAccounts;
-(void)_broadcastAccountMessageBlock:(/*^block*/id)arg1 ;
-(void)_notifyListenersWithChanges:(id)arg1 ;
-(void)_updateAccountWithAccountInfo:(id)arg1 ;
-(void)didAddLocalDevice:(id)arg1 ;
-(void)didRemoveLocalDevice:(id)arg1 ;
-(void)authenticationChanged;
-(id)_certForFromURI:(id)arg1 ;
-(BOOL)isUsableForSending;
-(id)deviceUniqueIDForURI:(id)arg1 token:(id)arg2 ;
-(BOOL)hasDependentRegistrationWithURI:(id)arg1 token:(id)arg2 ;
-(id)btIDForURI:(id)arg1 token:(id)arg2 ;
-(id)fromIDForCBUUID:(id)arg1 ;
-(BOOL)isRegistered;
-(void)dealloc;
-(NSString *)description;
-(BOOL)isEnabled;
-(id)primaryAccount;
-(int)accountType;
-(IDSDService *)service;
-(NSArray *)aliasStrings;
-(void)setLoginID:(NSString *)arg1 ;
-(id)primaryServiceName;
-(void)writeAccountDefaults:(id)arg1 ;
-(BOOL)wasDisabledAutomatically;
-(void)setWasDisabledAutomatically:(BOOL)arg1 ;
-(NSString *)loginID;
-(NSDictionary *)accountInfo;
-(IDSAppleRegistration *)registration;
-(long long)registrationStatus;
-(void)setObject:(id)arg1 forKey:(id)arg2 ;
-(NSString *)uniqueID;
-(NSString *)dsID;
-(long long)registrationError;
@end

