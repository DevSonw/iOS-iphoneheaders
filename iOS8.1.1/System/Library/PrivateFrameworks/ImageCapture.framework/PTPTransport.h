/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:32:20 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/ImageCapture.framework/ImageCapture
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013 by Elias Limneos.
*/


#import <ImageCapture/ImageCapture-Structs.h>
@class PTPOperationResponsePacket, PTPWrappedBytes;

@interface PTPTransport : NSObject {

	unsigned short _type;
	int _role;
	int _connectionStatus;
	id _delegate;
	BOOL _timedOut;
	BOOL _responseReceived;
	PTPOperationResponsePacket* _response;
	opaque_pthread_t* _callbackThread;
	opaque_pthread_mutex_t _callbackThreadMutex;
	opaque_pthread_cond_t _callbackThreadCondition;
	BOOL _callbackThreadConditionSignaled;
	CFRunLoopRef _callbackThreadRunLoop;
	CFRunLoopSourceRef _callbackDummyMachPortRLSrc;
	unsigned char _headerBuffer[12];
	BOOL _headerBufferFound;
	BOOL _delegateNeedsResponse;
	BOOL _busy;
	unsigned _canceledTransactionID;
	PTPWrappedBytes* _dataForTransaction;
	unsigned long long _excessReceivedDataSize;
	unsigned _totalBytesFilled;

}
-(int)role;
-(void)dealloc;
-(void)setDelegate:(id)arg1 ;
-(id)init;
-(BOOL)sendResponse:(id)arg1 ;
-(BOOL)sendEvent:(id)arg1 ;
-(unsigned short)type;
-(id)response;
-(void)stop;
-(void)setResponse:(id)arg1 ;
-(CFRunLoopRef)callbackThreadRunLoop;
-(BOOL)startInitiator;
-(int)lockCallbackThreadMutex;
-(int)unlockCallbackThreadMutex;
-(int)waitForCallbackThreadConditionSignalWithTimeout:(long long)arg1 ;
-(void)setResponseReceived:(BOOL)arg1 ;
-(int)signalCallbackThreadCondition;
-(BOOL)responseReceived;
-(BOOL)startResponder;
-(id)sendRequest:(id)arg1 receiveData:(id)arg2 timeout:(unsigned)arg3 ;
-(id)sendRequest:(id)arg1 sendData:(id)arg2 timeout:(unsigned)arg3 ;
-(void)cancelTransaction:(id)arg1 ;
-(void)abortPendingIO;
-(int)connectionStatus;
-(unsigned long long)excessReceivedDataSize;
-(unsigned short)deviceStatus;
-(void)deviceReset;
-(BOOL)startCallbackThread;
-(void)endCallbackThread;
-(void)cleanupCallbackThread;
-(void*)callbackThreadFunction;
-(void)sendData:(id)arg1 ;
-(BOOL)connected;
-(void)setTimedOut:(BOOL)arg1 ;
-(BOOL)timedOut;
@end

