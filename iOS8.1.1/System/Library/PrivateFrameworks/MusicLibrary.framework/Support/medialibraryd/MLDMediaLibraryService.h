/*
* This header is generated by classdump-dyld 0.7
* on Tuesday, December 2, 2014 at 7:32:45 PM Japan Standard Time
* Operating System: Version 8.1.1 (Build 12B436)
* Image Source: /System/Library/PrivateFrameworks/MusicLibrary.framework/Support/medialibraryd
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2014 by Elias Limneos.
*/

#import <medialibraryd/NSXPCConnectionDelegate.h>
#import <medialibraryd/NSXPCListenerDelegate.h>
#import <medialibraryd/MLDMediaLibraryWriterDelegate.h>
#import <medialibraryd/ML3MusicLibraryDelegate.h>
#import <medialibraryd/MLMediaLibraryServiceProtocol.h>

@protocol OS_dispatch_queue, OS_dispatch_source;
@class NSObject, NSXPCListener, NSMutableDictionary, MLDMediaLibraryWriter, MLDDatabaseImportManager, NSOperationQueue, NSTimer, NSString, NSMutableSet;

@interface MLDMediaLibraryService : NSObject <NSXPCConnectionDelegate, NSXPCListenerDelegate, MLDMediaLibraryWriterDelegate, ML3MusicLibraryDelegate, MLMediaLibraryServiceProtocol> {

	NSObject*<OS_dispatch_queue> _serialQueue;
	NSObject*<OS_dispatch_queue> _writerBeginTransactionQueue;
	NSObject*<OS_dispatch_queue> _writerUpdateQueue;
	NSXPCListener* _xpcListener;
	NSMutableDictionary* _xpcTransactions;
	NSMutableDictionary* _xpcClients;
	MLDMediaLibraryWriter* _writer;
	MLDDatabaseImportManager* _importManager;
	NSOperationQueue* _validationOperationQueue;
	int _languageChangeNotifyToken;
	int _springboardFinishedStartupNotifyToken;
	int _homeSharingCachesClearedNotifyToken;
	NSObject*<OS_dispatch_source> _signalDispatchSource;
	NSTimer* _idleTimer;
	NSMutableDictionary* _mediaLibraries;
	NSString* _deviceSharedLibraryPath;
	NSMutableSet* _validatedDatabasePaths;
	BOOL _databaseLocked;
	NSString* _currentLockReason;

}

@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
+(id)sharedInstance;
-(void)_registerForLanguageChangeNotifications;
-(void)_registerForHomeSharingCacheNotifications;
-(void)_tearDownLanguageChangeNotifications;
-(void)_tearDownHomeSharingCacheNotifications;
-(void)_stopIdleTimer;
-(id)_mediaLibraryForPath:(id)arg1 ;
-(id)_currentXPCClient;
-(void)_setXPCTransaction:(id)arg1 forDatabaseTransactionIdentifier:(id)arg2 ;
-(id)_xpcTransactionForDatabaseTransactionIdentifier:(id)arg1 ;
-(id)_allMediaLibraries;
-(id)_deviceSharedLibraryPath;
-(void)_handleXPCDisconnect:(id)arg1 ;
-(void)_unregisterServiceOriginatedTransactionWithConnection:(id)arg1 ;
-(id)_clientForConnection:(id)arg1 ;
-(void)_exitForLocalizationChange;
-(void)_processLocalizationChange;
-(void)_handleHomeSharingCachesClearedNotification;
-(void)_handleDebugSignal;
-(void)_idleTimerFired:(id)arg1 ;
-(void)mediaLibraryWriter:(id)arg1 terminatedTransaction:(id)arg2 withError:(id)arg3 ;
-(void)dealloc;
-(id)init;
-(id)_init;
-(void)start;
-(BOOL)listener:(id)arg1 shouldAcceptNewConnection:(id)arg2 ;
-(void)_resetIdleTimer;
-(void)_setupSignalHandler;
-(void)_tearDownSignalHandler;
-(oneway void)performDatabaseOperation:(unsigned long long)arg1 withAttributes:(id)arg2 options:(id)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)library:(id)arg1 didBeginDatabaseTransactionWithConnection:(id)arg2 ;
-(void)library:(id)arg1 didCommitDatabaseTransactionWithConnection:(id)arg2 ;
-(void)library:(id)arg1 didRollbackDatabaseTransactionWithConnection:(id)arg2 ;
-(oneway void)getDeviceSharedLibraryPath:(/*^block*/id)arg1 ;
-(oneway void)setDeviceSharedLibraryPath:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(oneway void)validateDatabaseAtPath:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(oneway void)recreateDatabaseAtPath:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(oneway void)beginTransactionForDatabaseAtPath:(id)arg1 withPriorityLevel:(unsigned long long)arg2 options:(unsigned long long)arg3 completionHandler:(/*^block*/id)arg4 ;
-(oneway void)executeUpdate:(id)arg1 withParameters:(id)arg2 onTransaction:(id)arg3 withCompletionHandler:(/*^block*/id)arg4 ;
-(oneway void)executeQuery:(id)arg1 withParameters:(id)arg2 options:(id)arg3 onTransaction:(id)arg4 withCompletionHandler:(/*^block*/id)arg5 ;
-(oneway void)endTransaction:(id)arg1 shouldCommit:(BOOL)arg2 withCompletionHandler:(/*^block*/id)arg3 ;
-(oneway void)setOptions:(id)arg1 withCompletionHandler:(/*^block*/id)arg2 ;
-(oneway void)performImportFromSource:(unsigned long long)arg1 intoDatabaseAtPath:(id)arg2 withTrackData:(id)arg3 withPlaylistData:(id)arg4 options:(id)arg5 completionHandler:(/*^block*/id)arg6 ;
-(oneway void)cancelImportOperation:(unsigned long long)arg1 completionHandler:(/*^block*/id)arg2 ;
-(oneway void)pollCurrentImportStatus:(/*^block*/id)arg1 ;
-(oneway void)lockDatabaseForReason:(id)arg1 withCompletion:(/*^block*/id)arg2 ;
-(oneway void)unlockDatabaseWithCompletion:(/*^block*/id)arg1 ;
-(oneway void)getLanguageResourcesWithCompletion:(/*^block*/id)arg1 ;
-(void)_startIdleTimer;
@end

